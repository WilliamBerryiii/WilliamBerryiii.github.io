<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="https://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:gd='http://schemas.google.com/g/2005' xmlns:thr='http://purl.org/syndication/thread/1.0' xmlns:georss='http://www.georss.org/georss'><id>tag:blogger.com,1999:blog-4707687462195457004.archive</id><updated>2017-07-27T05:43:41.304-07:00</updated><title type='text'>Lucid Motions</title><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/archive'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/archive'/><link rel='http://schemas.google.com/g/2005#post' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/archive'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/'/><author><name>William Berry</name><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><generator version='7.00' uri='https://www.blogger.com'>Blogger</generator><entry><id>tag:blogger.com,1999:blog-4707687462195457004.layout</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#template'/><title type='text'>Template: Lucid Motions</title><content type='text'>&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE html&gt;
&lt;!--[if lt IE 7]&gt;
&lt;html expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr' class='no-js lt-ie9 lt-ie8 lt-ie7'&gt;
&lt;![endif]--&gt;&lt;!--[if IE 7]&gt;
&lt;html expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr' class='no-js lt-ie9 lt-ie8'&gt;
&lt;![endif]--&gt;&lt;!--[if IE 8]&gt;
&lt;html expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr' class='no-js lt-ie9'&gt;
&lt;![endif]--&gt;&lt;!--[if gt IE 8]&gt;&lt;!--&gt;&lt;html class='no-js' expr:dir='data:blog.languageDirection' xmlns='http://www.w3.org/1999/xhtml' xmlns:b='http://www.google.com/2005/gml/b' xmlns:data='http://www.google.com/2005/gml/data' xmlns:expr='http://www.google.com/2005/gml/expr'&gt;
&lt;!--&lt;![endif]--&gt;
&lt;head&gt;

&lt;meta content='summary_large_image' name='twitter:card'/&gt;
&lt;meta content='@williamberryiii' name='twitter:site'/&gt;
&lt;meta content='@williamberryiii' name='twitter:creator'/&gt;
&lt;meta expr:content='data:blog.homepageUrl' name='twitter:domain'/&gt;
&lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
&lt;meta expr:content='data:blog.canonicalUrl' name='twitter:url'/&gt;
&lt;meta expr:content='data:blog.pageName' name='twitter:title'/&gt;
&lt;meta expr:content='data:blog.postImageUrl' name='twitter:image:src'/&gt;
&lt;b:else/&gt;
&lt;meta expr:content='data:blog.homepageUrl' name='twitter:url'/&gt;
&lt;meta expr:content='data:blog.pageTitle' name='twitter:title'/&gt;
&lt;meta content='http://4.bp.blogspot.com/-EkzDxyEB_m0/U5Po2D9IdbI/AAAAAAAAATo/JgrehebfR0Q/s1600/IMG_8404.JPG' name='twitter:image:src'/&gt;
&lt;/b:if&gt;
&lt;b:if cond='data:blog.metaDescription'&gt;
&lt;meta expr:content='data:blog.metaDescription' name='twitter:description'/&gt;
&lt;/b:if&gt;
&lt;meta expr:content='data:blog.canonicalUrl' name='twitter:url'/&gt;

&lt;meta content='width=device-width' name='viewport'/&gt;
&lt;link href='//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css' rel='stylesheet'/&gt;
&lt;link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,900' rel='stylesheet' type='text/css'/&gt;
&lt;link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,900' rel='stylesheet' type='text/css'/&gt;
&lt;link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,700,900' rel='stylesheet' type='text/css'/&gt;

&lt;b:include data='blog' name='all-head-content'/&gt;
&lt;!--[if IE]&gt;&lt;meta http-equiv='X-UA-Compatible' content='IE=edge,chrome=1'&gt;&lt;![endif]--&gt;

&lt;b:if cond='data:blog.pageType == &amp;quot;index&amp;quot;'&gt;
&lt;title&gt;&lt;data:blog.pageTitle/&gt;&lt;/title&gt; 
&lt;b:else/&gt;
&lt;title&gt;&lt;data:blog.pageName/&gt; ~ &lt;data:blog.title/&gt;&lt;/title&gt;
&lt;/b:if&gt;

&lt;b:skin&gt;&lt;![CDATA[/*
-----------------------------------------------
Template Name  : Moments
Author         : NewBloggerThemes.com
Author URL     : http://newbloggerthemes.com/
Theme URL      : http://newbloggerthemes.com/moments-blogger-template/
Created Date   : Thursday, February 6, 2014
License        : This template is free for both personal and commercial use, But to satisfy the 'attribution' clause of the license, you are required to keep the footer links intact which provides due credit to its authors.For more information about this license, please use this link :http://creativecommons.org/licenses/by/3.0/
----------------------------------------------- */
body#layout ul{list-style-type:none;list-style:none}
body#layout ul li{list-style-type:none;list-style:none}
body#layout #headerbwrap {height:auto;}
body#layout .headerbwrap2 {height:auto;}
body#layout #blogtitle {min-height:120px;}
body#layout .mainbpart aside {width: auto;}
body#layout header.wrapperbpart.clearfix {margin: 50px 0;}
/* Variable definitions
   ====================

*/

/* Use this with templates/template-twocol.html */

.section, .widget {
  margin:0;
  padding:0;
}

/*! normalize.css v1.1.2 | MIT License | git.io/normalize */article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}audio,canvas,video{display:inline-block;*display:inline;*zoom:1}audio:not([controls]){display:none;height:0}[hidden]{display:none}html{font-size:100%;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}html,button,input,select,textarea{font-family:sans-serif}body{margin:0}a:focus{outline:thin dotted}a:active,a:hover{outline:0}h1{font-size:2em;margin:.67em 0}h2{font-size:1.5em;margin:.83em 0}h3{font-size:1.17em;margin:1em 0}h4{font-size:1em;margin:1.33em 0}h5{font-size:.83em;margin:1.67em 0}h6{font-size:.67em;margin:2.33em 0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:bold}blockquote{margin:1em 40px}dfn{font-style:italic}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}mark{background:#ff0;color:#000}p,pre{margin:1em 0}code,kbd,pre,samp{font-family:monospace,serif;_font-family:'courier new',monospace;font-size:1em}pre{white-space:pre;white-space:pre-wrap;word-wrap:break-word}q{quotes:none}q:before,q:after{content:'';content:none}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-0.5em}sub{bottom:-0.25em}dl,menu,ol,ul{margin:1em 0}dd{margin:0 0 0 40px}menu,ol,ul{padding:0 0 0 40px}nav ul,nav ol{list-style:none;list-style-image:none}img{border:0;-ms-interpolation-mode:bicubic}svg:not(:root){overflow:hidden}figure{margin:0}form{margin:0}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0;white-space:normal;*margin-left:-7px}button,input,select,textarea{font-size:100%;margin:0;vertical-align:baseline;*vertical-align:middle}button,input{line-height:normal}button,select{text-transform:none}button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer;*overflow:visible}button[disabled],html input[disabled]{cursor:default}input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0;*height:13px;*width:13px}input[type="search"]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type="search"]::-webkit-search-cancel-button,input[type="search"]::-webkit-search-decoration{-webkit-appearance:none}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}textarea{overflow:auto;vertical-align:top}table{border-collapse:collapse;border-spacing:0}

/* ==========================================================================
   HTML5 Boilerplate styles
   ========================================================================== */

html,
button,
input,
select,
textarea {
    color: #222;
}

body {
    font-size: 1em;
    line-height: 1.4;
}

::-moz-selection {
    background: #b3d4fc;
    text-shadow: none;
}

::selection {
    background: #b3d4fc;
    text-shadow: none;
}

hr {
    display: block;
    height: 1px;
    border: 0;
    border-top: 1px solid #ccc;
    margin: 1em 0;
    padding: 0;
}

img {
    vertical-align: middle;
}

fieldset {
    border: 0;
    margin: 0;
    padding: 0;
}

textarea {
    resize: vertical;
}

.chromeframe {
    margin: 0.2em 0;
    background: #ccc;
    color: #000;
    padding: 0.2em 0;
}

:focus {
	outline: 0;
}
ins {
	text-decoration: none;
}
del {
	text-decoration: line-through;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}
.alignleft,
img.alignleft {
	display: inline;
	float: left;
  	margin-right: 1.5em;
  	padding: 4px;
}
.alignright,
img.alignright {
	display: inline;
	float: right;
  	margin-left: 1.5em;
}
.aligncenter,
img.aligncenter {
	clear: both;
	display: block;
	margin-left: auto;
	margin-right: auto;
}
blockquote.left {
	float: left;
	margin-left: 0;
	margin-right: 20px;
	text-align: right;
	width: 33%;
}
blockquote.right {
	float: right;
	margin-left: 20px;
	margin-right: 0;
	text-align: left;
	width: 33%;
}


/* ===== Main Styles ==================================================

   ========================================================================== */

body {
    font: 15px/26px Source Sans Pro, sans serif;
    color:#666659;
    background:#FAF9F5;
}

::selection 	 	{ background: rgb(67, 202, 204 0.17); color:#ffffff }
::-moz-selection 	{ background: rgb(67, 202, 204); color:#ffffff }
img::selection 		{ background: transparent; color:#ffffff}
img::-moz-selection	{ background: transparent; color:#ffffff }
body 				{-webkit-tap-highlight-color: rgb(67, 202, 204);}

a {
	text-decoration: none;
    color:#2A2A26;
	-webkit-transition: all 0.4s ease-out;
    	-moz-transition: all 0.4s ease-out;
    		transition: all 0.4s ease-out;
}

a:hover {
    text-decoration: none;
    color:#43CACC;
}

h1,h2,h3,h4,h5,h6  {
    color:#2A2A26;
}


blockquote {
    border-left: 2px solid #1EB2B2;
    font-size: 120%;
    font-style: italic;
    margin: 0;
    padding-left: 1.5em;
}

.main-container {
    width: 100%;
    height:100%;
    display: table;
}

.wrapperbpart {
    margin: 0%;
}

/* ===================
    ALL: Default Theme
   =================== */

.header_container_fixed{
	background: #2A2A26;
	float: left;
    display:table;
    width: 220px;
    height:100%;
    position:fixed;
    z-index: 1;
}

.header_container_flat{
	background: #2A2A26;
	float: left;
    display:table;
    width: 220px;
    height:100%;
    z-index: 1;
}

.main_content {
	position:relative;
	margin-left:215px;
}

.logoheader {
    color: white;
    clear:both;
    text-align: center;
    margin-top:35px;
	margin-bottom: 15px;
}

.logoheader a {
    color: white;
}

.textlogo {
    color: white;
    clear:both;
    text-align: center;
    margin-top:35px;
}

.textlogo a {
    color: white;
    text-transform:uppercase;
}

.descriptionheader {
    color: white;
    clear:both;
    text-align: center;
    font-size:16px;
    font-family:Georgia;
    font-style:italic;
    font-weight:normal;
    width:65%;
    margin: 0 auto;
}

.mini_divider {
    border: 1px dashed #43443F;
    width:90%;
    text-align:center;
    margin:30px auto 30px auto;
}

.featured_post {
    color: white;
    clear:both;
    background: #1F6D6F;
    font-family:'Source Sans Pro', sans serif;
    font-size: 11px;
    text-transform:uppercase;
    padding:5px;
}

.featured_post:hover {
    color: #43CACC;
}

.more-link {
	color: #43CACC;
    text-transform:uppercase;
    font-weight:bold;
    text-transform:uppercase;
    clear:both;
    display:block;
}

.more-link:hover {
	color: #2A2A26;
}

#social {
    margin-bottom: 30px;
}

/* ==============
    MOBILE: Menu
   ============== */

.navbpart ul {
    margin: 0;
    padding: 0;
}

.navbpart ul li a {
    display: block;
    margin-bottom: 10px;
    text-align: center;
    text-decoration: none;
    font-weight: bold;
    font-family:'Source Sans Pro', sans serif;
    color: #8C8C7B;
    width: 100%;
    padding: 10px 0;
    margin-bottom: 0;
    text-transform:uppercase;
	list-style-type: none;
	list-style: none;
}

.navbpart ul li a:hover,
.navbpart ul li a:visited {
    color: #FFFFFF;
    text-decoration: none;
}

.navbpart ul li.current-menu-item a {
    text-decoration: none;
    color: #FFFFFF;
}

.search_box {
    margin: 0 auto;
    text-align.center;
    width:80%;
}

.search_box input {
    background-image: url("http://3.bp.blogspot.com/-2OgTqSoPYvo/UvMNUK6MEzI/AAAAAAAAKsg/rPQRppWSfaw/s1600/searchbg.png");
    background-position: 90% center;
    background-repeat: no-repeat;
    border: medium none;
    border-radius: 15px;
    padding: 10px 10px;
    font-family:'Georgia', sans serif;
    font-size:12px;
    font-weight:normal;
    font-style:italic;
    color: #8C8C7B;
    width:90%;
}

.bpostmeta {
    line-height: 1;
}

/* ==============
    MOBILE: Main
   ============== */

.mainbpart {
    padding: 0px;
}

.mainbpart article h1 {
    font-size: 42px;
}

.mainbpart .featured{
    background:#2FBFC0;
    margin-bottom:65px;
}

.mainbpart .topbar{
    background:#2FBFC0;
    margin-bottom:35px;
    height:15px;
}

.mainbpart .featured header {
    margin-left: 280px;
    max-width: 763px;
}

.mainbpart .featured article{
    padding:30px 0;
    width: 100%;

}

.mainbpart .featured article h1 a {
    font-size: 46px;
    color:#FFFFFF;
    line-height: 1;
    font-family:'Source Sans Pro', sans serif;
    -webkit-transition: all 0.4s ease-out;
    -moz-transition: all 0.4s ease-out;
    transition: all 0.4s ease-out;
}

.mainbpart .featured article h1 a:hover {
    color:#2A2A26;
}

.mainbpart .featured article .icon {
    background-color: #FFFFFF;
    border-radius:5px;
    float: right;
    height: 47px;
    width: 50px;
    margin-top: 10px;
    position: relative;
    right: 0;
    top: 38px;
    text-align:center;
    color:#43CACC;
    box-shadow: -1px -2px 2px rgba(0, 0, 0, 0.1) inset;
}

.mainbpart article h2 {
    font-size: 32px;
}

.entry-colors {
	    left: 0;
	    position: absolute;
	    top: 0;
	    width: 100%;
	    margin-top:0px;
}

.mainbpart article h2 a {
	color:#2A2A26;
	font-family:'Source Sans Pro', sans serif;
    -webkit-transition: all 0.4s ease-out;
    -moz-transition: all 0.4s ease-out;
    transition: all 0.4s ease-out;
}

.mainbpart article h2 a:hover {
	color:#43CACC;
}

.mainbpart article h2 .post_title_icon {
    background-image: url("http://3.bp.blogspot.com/-gjGlLBw4NBg/UvMNT08edaI/AAAAAAAAKso/1GUeQRLDaXo/s1600/post_title_icon.png");
    background-position: left;
    background-repeat: no-repeat;
    display:inline-table;
    width:57px;
    height:28px;
    position:relative;
    margin-left:-75px;
    margin-right:20px;
}
.mainbpart .featured .bpostmeta span, .mainbpart .featured .bpostmeta span a {
    font-size: 11px;
    color:#196768;
    line-height: 1;
    text-transform:uppercase;
    letter-spacing:2px;
    padding-right:10px;
    font-family:'Source Sans Pro', sans serif;
}

.mainbpart article .bpostmeta span, .mainbpart article .bpostmeta span a {
    font-size: 11px;
    color:#A3A3A3;
    line-height: 1;
    text-transform:uppercase;
    letter-spacing:2px;
    padding-right:10px;
    font-family:'Source Sans Pro', sans serif;
}

.mainbpart article .bpostmeta span a {
    padding: 0 !important;
}

.footer-container footer {
    color: #666659;
    padding: 20px;
    margin:0 auto;
    text-align:center;
    font-size:12px;
    background:#FFFFFF;
}

.mainbpart .page-header {
    margin-bottom: 65px;
    margin-top: 40px;
}

.mainbpart .page-title {
    font-size: 18px;
    line-height: 0;
    margin: 0;
    text-transform: uppercase;
}

.mainbpart .taxonomy-description {
    font-family: Georgia;
    font-size: 14px;
    font-style: italic;
}

/* CONTACT F0RM
---------------------------------------------------------*/
.input input[type="text"],
.input input[type="email"],
.input input[type="url"],
.input input[type="password"],
.input textarea {
    background: #ffffff;
    border:1px solid #efefef;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    border-radius: 5px;
    padding:10px;
    font-family:Georgia;
    font-size:12px;
    font-style:italic;
    color:#999999;
}
.input textarea {
	resize:vertical;
    max-height:300px;
    min-height:200px;
}
.input label {
    display: block;
    font-size: 14px;
    margin-bottom: 5px;
}
.input input {
    width: 88%;
}
.input textarea {
    width: 94%;
    height: 200px;
}

.input input:focus,
.input textarea:focus {
    -webkit-box-shadow:  0px 0px 5px 0 #efefef;
    moz-box-shadow:  0px 0px 5px 0 #efefef;
    box-shadow:  0px 0px 5px 0 #efefef;
}
label sup {
  color:#E3006A;
}
.form-row {
    clear: both;
    margin-bottom: 10px;
}
.col_half {
    width: 50%;
    float: left;
    margin-bottom: 10px;
}
.first,
.last,
.col_half:nth-child(2n+1) {
    clear: both;
}
.last {
clear: right;
margin-right: 0 !important;
}

.col_half p{
    margin-top: 0;
}

/* FOOTER SOCIAL
---------------------------------------------------------*/
#social a {
    font-size: 20px;
    padding-right: 10px;
}

/* FOOTER SOCIAL
---------------------------------------------------------*/
.emm-paginate{
    padding: 10px 0 40px;
}

.emm-paginate a, .emm-paginate span {
    border-bottom: 1px solid #999;
    color: #333;
    text-shadow: 1px 1px #fff;
    padding: 4px 10px;
    text-align: center;
    text-decoration: none;
    -webkit-transition: color 0.1s ease-in;
    -moz-transition: color 0.1s ease-in;
    -o-transition: color 0.1s ease-in;
    -ms-transition: color 0.1s ease-in;
    transition: color 0.1s ease-in;
    text-shadow: none;
    margin: 0 4px;
    border-radius: 4px;
    border: 1px solid #ddd;
}

.emm-paginate .emm-title {
    border:none;
    padding-left:0;
}

.emm-paginate .emm-current,.emm-paginate a:hover {
    color:#1EB2B2;
}

.emm-paginate .emm-current{
    font-weight:bold;
}

.emm-paginate a:hover {
    -webkit-box-shadow: 0 0 3px rgba(35,194,248,.3);
    -moz-box-shadow:0 0 3px rgba(35,194,248,.3);
    box-shadow:0 0 3px rgba(35,194,248,.3);
    border-color:#fff;
}

/* ===============
    ALL: IE Fixes
   =============== */

.ie7 .logoheader {
    padding-top: 20px;
}

/* ==========================================================================
   Author's custom styles
   ========================================================================== */

.mainbpart article {
    width: 100%;
    padding-bottom:30px;
}

.mainbpart .contentbpart {
    float: left;
    position: relative;
    margin-left: 65px;
    z-index: 10;
    width: 760px;
}

.mainbpart .contentbpart article .icon {
    background-color: #FFFFFF;
    box-shadow: -2px -2px 2px rgba(0, 0, 0, 0.04);
    float: right;
    height: 47px;
    text-align:center;
    position: absolute;
    right: 0;
    top: -42px;
    width: 50px;
    color:#43CACC;
    z-index: 1;
}

.icon .fa {
	padding-top:10px;
}

.mainbpart .entry-content {
    /*width: 670px;*/
    padding: 25px;
    position:relative;
    margin-top:20px;
    /*background-image: url(../img/entry-content.png);*/
    background-repeat:no-repeat;
    background-color:#FFFFFF;
    z-index:2;
}

.entry-colors .color_col_1, .entry-colors .color_col_2, .entry-colors .color_col_3{
    width: 33.33%;
    height:5px;
    float:left;
}
.color_col_1 {
	background:#EC3233;
	height:5px;
}
.color_col_2 {
	background:#1EB2B2;
	height:5px;
}
.color_col_3 {
	background:#E0E0E0;
	height:5px;
}

.mainbpart .single_post .entry-content, ul.commentlist {
    border-bottom:1px solid #E6E6E6;
}

.mainbpart .entry-content p {
    margin:20px 0;
}

.pbtthumbimg {
  float:left;
  margin:0px 10px 5px 5px;
  padding:4px;
  border:1px solid #eee;
  background:#fcfcfc;
  width:200px;
  height:150px;
}

.mainbpart .entry-content img {
	max-width:98% !important;
	-webkit-transition: all 0.4s ease-out;
    -moz-transition: all 0.4s ease-out;
    transition: all 0.4s ease-out;
	-moz-box-sizing: border-box;
	-webkit-box-sizing: border-box;
	box-sizing: border-box;
}

.mainbpart .entry-content img:hover {
    opacity:0.8;
}

.mainbpart aside {
    float: left;
    width: 180px;
    height:100%;
    padding: 30px 30px;
    z-index: 1;
    font-size: 14px;
}

.mainbpart aside .widget_sidebar{
	margin-bottom:40px;
}

.mainbpart .sidebar .widget {
	margin-bottom:40px;
}

.mainbpart aside ul {
    margin: 0;
    padding: 0;
    list-style:none;
}

.mainbpart aside ul li, .mainbpart aside ul li a {
    font-size:14px;
    color:#B2B2B2;
}

.mainbpart aside ul li a:hover {
    color:#2FBFC0;
}

.mainbpart aside .widget {
    /*min-height:200px;*/
}

.mainbpart aside .search_box {
    width:100%;
}
.mainbpart aside h3 {
    font-size: 16px;
    color:#3F3F3A;
    line-height: 1;
    text-transform:uppercase;
    letter-spacing:1px;
    padding-bottom:20px;
    margin-top: 0;
    font-family:'Source Sans Pro', sans serif;
    border-bottom:1px solid #C9C9C9;
}
.mainbpart .sidebar .widget h2 {
    font-size: 16px;
    color:#3F3F3A;
    line-height: 1;
    text-transform:uppercase;
    letter-spacing:1px;
    padding-bottom:20px;
    margin-top: 0;
    font-family:'Source Sans Pro', sans serif;
    border-bottom:1px solid #C9C9C9;
}

/* ==========================================================================
   Media Queries
   ========================================================================== */

/*		Tablet Layout: 768px.
		Gutters: 24px.
		Outer margins: 28px.
		Inherits styles from: Default Layout.
-----------------------------------------------------------------
cols    1     2      3      4      5      6      7      8
px      68    160    252    344    436    528    620    712    */

@media only screen and (min-width: 768px) and (max-width: 1300px) {

	body {
		width: 100%;
		padding: 0px;
	}

	.emm-paginate {
	    margin: 0 auto;
	    text-align: center;
	}

	.col_half {
        width: 100%;
        float:none;
    }

    .input input, .input textarea {
	    width: 97%;
	}

	.topbar {
	    display:none;
	}


	.header_container_fixed, .header_container_flat {
	    display: table;
	    float: none;
	    width: 100%;
	    height: auto;
	    position:relative;
	}

	.logoheader {
	    margin-bottom: 15px;
	}

	.descriptionheader {
	    margin-bottom: 30px;
	}

	.navbpart {
    	text-align: center;
    	padding: 0 0 20px;
	}

	.navbpart a {
	    font-size: 14px;

	}

	.navbpart ul, .navbpart ol {
    	display: inline-table;
    	height: 30px;
    	margin:0 auto;

	}

	.navbpart ul li {
    	float: left;
    	padding: 0 30px;
		list-style-type: none;
		list-style: none;
	}

	.search_box {
	    display:none;
	}

	.mini_divider {
    	display: none;
	}

	.mainbpart .featured header {
	    padding: 0 20px;
	    text-align: center;
	    width: auto;
	    margin: 0 auto;
	}


	.mainbpart .featured article {
	    padding: 30px 0 0;
	}

	.mainbpart .featured article h1 a {
	    font-size: 32px;
	}

	.mainbpart .featured article .icon {
	    display: none;
	}

	.featured_post {
	    position: relative;
	    margin-top: 0;
	}

	.bpostmeta {
	   padding-top: 20px;
	}

	.main_content {
	    margin-left: 0px;
	}

	.mainbpart .contentbpart {
	   float:none;
	   margin: 0;
	   width:100%;
	}

	.mainbpart article {
	    margin: 0 auto;
	    padding-bottom: 30px;
	    width: 90%;
	}

	.mainbpart article h2 {
	    font-size: 32px;
	}

	.mainbpart .page-header {
	    margin-left: 40px;
	}

	.mainbpart article h2 .post_title_icon {
		display:none;
	}

	.mainbpart .entry-content {
	    /*width: 88%;*/
	}

	.mainbpart .entry-content img {
	    max-width: 99%;
	}

	.mainbpart .featured {
	    margin-bottom: 40px;
	}

	.mainbpart aside {
	    float: none;
    	margin: 0 auto;
    	width: 89%;
    	padding:0px;
	}

}

/*		Mobile Layout: 320px.
		Gutters: 24px.
		Outer margins: 34px.
		Inherits styles from: Default Layout.
---------------------------------------------
cols    1     2      3
px      68    160    252    */

@media only screen and (max-width: 767px) {

	body {
		width: 100%;
		padding: 0px;
	}

	.emm-paginate {
	    font-size: 12px;
	    margin: 0 auto;
	    text-align: center;
	}

	.input input, .input textarea {
	    width: 90%;
	}

	.col_half {
        width: 100%;
        float:none;
    }

	.jp-progress {
	    width: 100% !important;
	    max-width: 60% !important;
	}

	.topbar {
	    display:none;
	}

	.header_container_fixed, .header_container_flat {
	    display: table;
	    float: none;
	    width: 100%;
	    height: auto;
	    position:relative;
	}

	.logoheader {
	    margin-bottom: 15px;
	}

	.descriptionheader {
	    margin-bottom: 30px;
	}

	.navbpart {
    	text-align: center;
    	padding: 0 0 20px;

	}

	.navbpart a {
	    font-size: 12px;

	}

	.navbpart ul, .navbpart ol {
    	display: inline-table;
    	height: 30px;
    	margin:0 auto;

	}

	.navbpart ul li {
    	float: left;
    	padding: 0 30px;
		list-style-type: none;
		list-style: none;
	}

	.search_box {
	    display:none;
	}

	.mini_divider {
    	display: none;

	}

	.mainbpart .featured header {
	    padding: 0 20px;
	    text-align: center;
	    width: auto;
	    margin-left: auto;
	}


	.mainbpart .featured article {
	    padding: 30px 0 0;
	}

	.mainbpart .featured article h1 a {
	    font-size: 22px;
	}

	.mainbpart .featured article .icon {
	    display: none;

	}

	.mainbpart .contentbpart article .icon {
	    height: 22px;
	    top: -17px;
	    width: 25px;
	}

	.icon .fa {
	    font-size: 14px;
	    padding-top: 0;
	}

	.featured_post {
	    position: relative;
	    margin-top: 0;
	}

	.bpostmeta {
	   padding-top: 20px;
	   text-align: center;
	}

	.mainbpart article .bpostmeta span {
	    padding-bottom: 10px;
	}

	.main_content {
	    margin-left: 0px;
	}

	.mainbpart .contentbpart {
	   float:none;
	   margin: 0;
	   width:97%;
	}

	.mainbpart .page-header {
	    margin: 55px auto;
	    text-align: center;
	    width: 80%;
	}

	.mainbpart article {
	    margin: 0 auto;
	    padding-bottom: 30px;
	    width: 88%;
	}

	.mainbpart .page-title {
	    line-height: 30px;
	}

	.mainbpart article h2 {
	    font-size: 22px;
	    text-align: center;
	}

	.mainbpart article h2 .post_title_icon {
		display:none;
	}

	.mainbpart .entry-content {
	    width: auto;
	    padding: 25px;
	}

	.mainbpart .entry-content img {
	    max-width: 99%;
		height: auto;
	}

	.more_link {
	    font-size: 14px;
	}

	.mainbpart .featured {
	    margin-bottom: 40px;
	}

	.mainbpart aside {
	    float: none;
	    margin: 0 auto;
	    padding: 0;
	    width: 87%;
	}

}



/*		Wide Mobile Layout: 480px.
		Gutters: 24px.
		Outer margins: 22px.
		Inherits styles from: Default Layout, Mobile Layout.
------------------------------------------------------------
cols    1     2      3      4      5
px      68    160    252    344    436    */

@media only screen and (min-width: 480px) and (max-width: 767px) {

	body {
		width: 100%;
		padding: 0px;
	}

	.emm-paginate {
	    font-size: 12px;
	    margin: 0 auto;
	    text-align: center;
	}

	.input input, .input textarea {
	    width: 94%;
	}

	.col_half {
        width: 100%;
        float:none;
    }

	.topbar {
	    display:none;
	}

	.header_container_fixed, .header_container_flat {
	    display: table;
	    float: none;
	    width: 100%;
	    height: auto;
	    position:relative;
	}

	.logoheader {
	    margin-bottom: 15px;
	}

	.descriptionheader {
	    margin-bottom: 30px;
	}

	.navbpart {
    	text-align: center;
    	padding: 0 0 20px;

	}

	.navbpart a {
	    font-size: 14px;

	}

	.navbpart ul, .navbpart ol {
    	display: inline-table;
    	height: 30px;
    	margin:0 auto;

	}

	.navbpart ul li {
    	float: left;
    	padding: 0 30px;
		list-style-type: none;
		list-style: none;
	}

	.search_box {
	    display:none;
	}

	.mini_divider {
    	display: none;

	}

	.mainbpart .featured header {
	    padding: 0 20px;
	    text-align: center;
	    width: auto;
	    margin-left: auto;
	}


	.mainbpart .featured article {
	    padding: 30px 0 0;
	}

	.mainbpart .featured article h1 a {
	    font-size: 28px;
	}

	.mainbpart .featured article .icon {
	    display: none;

	}

	.featured_post {
	    position: relative;
	    margin-top: 0;
	}

	.jp-progress {
	    width: 100% !important;
	    max-width: 70% !important;
	}

	.bpostmeta {
	   padding-top: 20px;
	}

	.mainbpart .contentbpart article .icon {
	    height: 33px;
	    top: -25px;
	    width: 36px;
	}

	.icon .fa {
	    font-size: 18px;
	    padding-top: 8px;
	}

	.mainbpart article .bpostmeta span {
	    display: inline-table;
	    padding-bottom: 10px;
	}

	.main_content {
	    margin-left: 0px;
	}

	.mainbpart .contentbpart {
	   float:none;
	   margin: 0;
	   width:100%;
	}

	.mainbpart .page-header {
	    margin: 55px auto;
	    text-align: center;
	    width: 80%;
	}

	.mainbpart article {
	    margin: 0 auto;
	    padding-bottom: 30px;
	    width: 88%;
	}

	.mainbpart article h2 {
	    font-size: 28px;
	}

	.mainbpart article h2 .post_title_icon {
		display:none;
	}

	.mainbpart .entry-content {
	    width: auto;
	}

	.mainbpart .entry-content img {
	    max-width: 99%;
		height: auto;
	}

	.mainbpart .featured {
	    margin-bottom: 40px;
	}

	.mainbpart aside {
	    float: none;
	    margin: 0 auto;
	    padding: 0;
	    width: 87%;
	}

}


/*	Retina media query.
	Overrides styles for devices with a
	device-pixel-ratio of 2+, such as iPhone 4.
-----------------------------------------------    */

@media
	only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (min-device-pixel-ratio: 2) {

	body {
		width: 100%;
		padding: 0px;
	}

	.emm-paginate {
	    text-align: center;
	}

	.form-row {
	    clear: both;
	    margin-bottom: 10px;
	}

	.topbar {
	    display:none;
	}

	.header_container_fixed, .header_container_flat {
	    display: table;
	    float: none;
	    width: 100%;
	    height: auto;
	    position:relative;
	}

	.logoheader {
	    margin-bottom: 15px;
	}

	.descriptionheader {
	    margin-bottom: 30px;
	}

	.navbpart {
    	text-align: center;
    	padding: 0 0 20px;

	}

	.navbpart a {
	    font-size: 14px;

	}

	.navbpart ul, .navbpart ol {
    	display: inline-table;
    	height: 30px;
    	margin:0 auto;

	}

	.navbpart ul li {
    	float: left;
    	padding: 0 30px;
		list-style-type: none;
		list-style: none;
	}

	.search_box {
	    display:none;
	}

	.mini_divider {
    	display: none;

	}

	.mainbpart .featured header {
	    padding: 0 20px;
	    text-align: center;
	    width: auto;
	    margin-left: auto;
	}


	.mainbpart .featured article {
	    padding: 30px 0 0;
	}

	.mainbpart .featured article .icon {
	    display: none;

	}

	.featured_post {
	    position: relative;
	    margin-top: 0;
	}

	.bpostmeta {
	   padding-top: 20px;
	}

}


/* ==========================================================================
   Helper classes
   ========================================================================== */

.ir {
    background-color: transparent;
    border: 0;
    overflow: hidden;
    *text-indent: -9999px;
}

.ir:before {
    content: "";
    display: block;
    width: 0;
    height: 150%;
}

.hidden {
    display: none !important;
    visibility: hidden;
}

.visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
}

.invisible {
    visibility: hidden;
}

.clearfix:before,
.clearfix:after {
    content: " ";
    display: table;
}

.clearfix:after {
    clear: both;
}

.clearfix {
    *zoom: 1;
}

/* ==========================================================================
   Print styles
   ========================================================================== */

@media print {
    * {
        background: transparent !important;
        color: #000 !important; /* Black prints faster: h5bp.com/s */
        box-shadow: none !important;
        text-shadow: none !important;
    }

    a,
    a:visited {
        text-decoration: underline;
    }

    a[href]:after {
        content: " (" attr(href) ")";
    }

    abbr[title]:after {
        content: " (" attr(title) ")";
    }

    /*
     * Don't show links for images, or javascript/internal links
     */

    .ir a:after,
    a[href^="javascript:"]:after,
    a[href^="#"]:after {
        content: "";
    }

    pre,
    blockquote {
        border: 1px solid #999;
        page-break-inside: avoid;
    }

    thead {
        display: table-header-group; /* h5bp.com/t */
    }

    tr,
    img {
        page-break-inside: avoid;
    }

    img {
        max-width: 100% !important;
    }

    @page {
        margin: 0.5cm;
    }

    p,
    h2,
    h3 {
        orphans: 3;
        widows: 3;
    }

    h2,
    h3 {
        page-break-after: avoid;
    }
}

h2.date-header {
  margin: 1.5em 0 .5em;
  display: none;
}

.main .widget {
  margin: 0 0 5px;
  padding: 0 0 2px;
}

.main .Blog {
  border-bottom-width: 0;
}

#header .description {
}

/* Comments----------------------------------------------- */
#comments {
	padding:25px;
	margin-bottom:20px;
	background:#fff;
}

#comments h4 {
    font-size:22px;
    margin-bottom:10px;
}

.deleted-comment {
  font-style: italic;
  color: gray;
}

#blog-pager-newer-link {
  float: left;
}

#blog-pager-older-link {
  float: right;
}

#blog-pager {
  text-align: center;
  padding:5px;
}

.feed-links {
  clear: both;
}

.comment-form {
}

#navbar-iframe {
  height: 0;
  visibility: hidden;
  display: none;
}

.PopularPosts .widget-content ul li {
  padding:6px 0px;
}

.reaction-buttons table{
  border:none;
  margin-bottom:5px;
}

.reaction-buttons table, .reaction-buttons td{
  border:none !important;
}

]]&gt;&lt;/b:skin&gt;

&lt;script src='https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js' type='text/javascript'/&gt;

&lt;script type='text/javascript'&gt;
//&lt;![CDATA[

/*! jQuery Migrate v1.2.1 | (c) 2005, 2013 jQuery Foundation, Inc. and other contributors | jquery.org/license */
jQuery.migrateMute===void 0&amp;&amp;(jQuery.migrateMute=!0),function(e,t,n){function r(n){var r=t.console;i[n]||(i[n]=!0,e.migrateWarnings.push(n),r&amp;&amp;r.warn&amp;&amp;!e.migrateMute&amp;&amp;(r.warn("JQMIGRATE: "+n),e.migrateTrace&amp;&amp;r.trace&amp;&amp;r.trace()))}function a(t,a,i,o){if(Object.defineProperty)try{return Object.defineProperty(t,a,{configurable:!0,enumerable:!0,get:function(){return r(o),i},set:function(e){r(o),i=e}}),n}catch(s){}e._definePropertyBroken=!0,t[a]=i}var i={};e.migrateWarnings=[],!e.migrateMute&amp;&amp;t.console&amp;&amp;t.console.log&amp;&amp;t.console.log("JQMIGRATE: Logging is active"),e.migrateTrace===n&amp;&amp;(e.migrateTrace=!0),e.migrateReset=function(){i={},e.migrateWarnings.length=0},"BackCompat"===document.compatMode&amp;&amp;r("jQuery is not compatible with Quirks Mode");var o=e("&lt;input/&gt;",{size:1}).attr("size")&amp;&amp;e.attrFn,s=e.attr,u=e.attrHooks.value&amp;&amp;e.attrHooks.value.get||function(){return null},c=e.attrHooks.value&amp;&amp;e.attrHooks.value.set||function(){return n},l=/^(?:input|button)$/i,d=/^[238]$/,p=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,f=/^(?:checked|selected)$/i;a(e,"attrFn",o||{},"jQuery.attrFn is deprecated"),e.attr=function(t,a,i,u){var c=a.toLowerCase(),g=t&amp;&amp;t.nodeType;return u&amp;&amp;(4&gt;s.length&amp;&amp;r("jQuery.fn.attr( props, pass ) is deprecated"),t&amp;&amp;!d.test(g)&amp;&amp;(o?a in o:e.isFunction(e.fn[a])))?e(t)[a](i):("type"===a&amp;&amp;i!==n&amp;&amp;l.test(t.nodeName)&amp;&amp;t.parentNode&amp;&amp;r("Can't change the 'type' of an input or button in IE 6/7/8"),!e.attrHooks[c]&amp;&amp;p.test(c)&amp;&amp;(e.attrHooks[c]={get:function(t,r){var a,i=e.prop(t,r);return i===!0||"boolean"!=typeof i&amp;&amp;(a=t.getAttributeNode(r))&amp;&amp;a.nodeValue!==!1?r.toLowerCase():n},set:function(t,n,r){var a;return n===!1?e.removeAttr(t,r):(a=e.propFix[r]||r,a in t&amp;&amp;(t[a]=!0),t.setAttribute(r,r.toLowerCase())),r}},f.test(c)&amp;&amp;r("jQuery.fn.attr('"+c+"') may use property instead of attribute")),s.call(e,t,a,i))},e.attrHooks.value={get:function(e,t){var n=(e.nodeName||"").toLowerCase();return"button"===n?u.apply(this,arguments):("input"!==n&amp;&amp;"option"!==n&amp;&amp;r("jQuery.fn.attr('value') no longer gets properties"),t in e?e.value:null)},set:function(e,t){var a=(e.nodeName||"").toLowerCase();return"button"===a?c.apply(this,arguments):("input"!==a&amp;&amp;"option"!==a&amp;&amp;r("jQuery.fn.attr('value', val) no longer sets properties"),e.value=t,n)}};var g,h,v=e.fn.init,m=e.parseJSON,y=/^([^&lt;]*)(&lt;[\w\W]+&gt;)([^&gt;]*)$/;e.fn.init=function(t,n,a){var i;return t&amp;&amp;"string"==typeof t&amp;&amp;!e.isPlainObject(n)&amp;&amp;(i=y.exec(e.trim(t)))&amp;&amp;i[0]&amp;&amp;("&lt;"!==t.charAt(0)&amp;&amp;r("$(html) HTML strings must start with '&lt;' character"),i[3]&amp;&amp;r("$(html) HTML text after last tag is ignored"),"#"===i[0].charAt(0)&amp;&amp;(r("HTML string cannot start with a '#' character"),e.error("JQMIGRATE: Invalid selector string (XSS)")),n&amp;&amp;n.context&amp;&amp;(n=n.context),e.parseHTML)?v.call(this,e.parseHTML(i[2],n,!0),n,a):v.apply(this,arguments)},e.fn.init.prototype=e.fn,e.parseJSON=function(e){return e||null===e?m.apply(this,arguments):(r("jQuery.parseJSON requires a valid JSON string"),null)},e.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||0&gt;e.indexOf("compatible")&amp;&amp;/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},e.browser||(g=e.uaMatch(navigator.userAgent),h={},g.browser&amp;&amp;(h[g.browser]=!0,h.version=g.version),h.chrome?h.webkit=!0:h.webkit&amp;&amp;(h.safari=!0),e.browser=h),a(e,"browser",e.browser,"jQuery.browser is deprecated"),e.sub=function(){function t(e,n){return new t.fn.init(e,n)}e.extend(!0,t,this),t.superclass=this,t.fn=t.prototype=this(),t.fn.constructor=t,t.sub=this.sub,t.fn.init=function(r,a){return a&amp;&amp;a instanceof e&amp;&amp;!(a instanceof t)&amp;&amp;(a=t(a)),e.fn.init.call(this,r,a,n)},t.fn.init.prototype=t.fn;var n=t(document);return r("jQuery.sub() is deprecated"),t},e.ajaxSetup({converters:{"text json":e.parseJSON}});var b=e.fn.data;e.fn.data=function(t){var a,i,o=this[0];return!o||"events"!==t||1!==arguments.length||(a=e.data(o,t),i=e._data(o,t),a!==n&amp;&amp;a!==i||i===n)?b.apply(this,arguments):(r("Use of jQuery.fn.data('events') is deprecated"),i)};var j=/\/(java|ecma)script/i,w=e.fn.andSelf||e.fn.addBack;e.fn.andSelf=function(){return r("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()"),w.apply(this,arguments)},e.clean||(e.clean=function(t,a,i,o){a=a||document,a=!a.nodeType&amp;&amp;a[0]||a,a=a.ownerDocument||a,r("jQuery.clean() is deprecated");var s,u,c,l,d=[];if(e.merge(d,e.buildFragment(t,a).childNodes),i)for(c=function(e){return!e.type||j.test(e.type)?o?o.push(e.parentNode?e.parentNode.removeChild(e):e):i.appendChild(e):n},s=0;null!=(u=d[s]);s++)e.nodeName(u,"script")&amp;&amp;c(u)||(i.appendChild(u),u.getElementsByTagName!==n&amp;&amp;(l=e.grep(e.merge([],u.getElementsByTagName("script")),c),d.splice.apply(d,[s+1,0].concat(l)),s+=l.length));return d});var Q=e.event.add,x=e.event.remove,k=e.event.trigger,N=e.fn.toggle,T=e.fn.live,M=e.fn.die,S="ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",C=RegExp("\\b(?:"+S+")\\b"),H=/(?:^|\s)hover(\.\S+|)\b/,A=function(t){return"string"!=typeof t||e.event.special.hover?t:(H.test(t)&amp;&amp;r("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'"),t&amp;&amp;t.replace(H,"mouseenter$1 mouseleave$1"))};e.event.props&amp;&amp;"attrChange"!==e.event.props[0]&amp;&amp;e.event.props.unshift("attrChange","attrName","relatedNode","srcElement"),e.event.dispatch&amp;&amp;a(e.event,"handle",e.event.dispatch,"jQuery.event.handle is undocumented and deprecated"),e.event.add=function(e,t,n,a,i){e!==document&amp;&amp;C.test(t)&amp;&amp;r("AJAX events should be attached to document: "+t),Q.call(this,e,A(t||""),n,a,i)},e.event.remove=function(e,t,n,r,a){x.call(this,e,A(t)||"",n,r,a)},e.fn.error=function(){var e=Array.prototype.slice.call(arguments,0);return r("jQuery.fn.error() is deprecated"),e.splice(0,0,"error"),arguments.length?this.bind.apply(this,e):(this.triggerHandler.apply(this,e),this)},e.fn.toggle=function(t,n){if(!e.isFunction(t)||!e.isFunction(n))return N.apply(this,arguments);r("jQuery.fn.toggle(handler, handler...) is deprecated");var a=arguments,i=t.guid||e.guid++,o=0,s=function(n){var r=(e._data(this,"lastToggle"+t.guid)||0)%o;return e._data(this,"lastToggle"+t.guid,r+1),n.preventDefault(),a[r].apply(this,arguments)||!1};for(s.guid=i;a.length&gt;o;)a[o++].guid=i;return this.click(s)},e.fn.live=function(t,n,a){return r("jQuery.fn.live() is deprecated"),T?T.apply(this,arguments):(e(this.context).on(t,this.selector,n,a),this)},e.fn.die=function(t,n){return r("jQuery.fn.die() is deprecated"),M?M.apply(this,arguments):(e(this.context).off(t,this.selector||"**",n),this)},e.event.trigger=function(e,t,n,a){return n||C.test(e)||r("Global events are undocumented and deprecated"),k.call(this,e,t,n||document,a)},e.each(S.split("|"),function(t,n){e.event.special[n]={setup:function(){var t=this;return t!==document&amp;&amp;(e.event.add(document,n+"."+e.guid,function(){e.event.trigger(n,null,t,!0)}),e._data(this,n,e.guid++)),!1},teardown:function(){return this!==document&amp;&amp;e.event.remove(document,n+"."+e._data(this,n)),!1}}})}(jQuery,window);

//]]&gt;
&lt;/script&gt;

&lt;script type='text/javascript'&gt;
//&lt;![CDATA[

/* Modernizr 2.6.1 (Custom Build) | MIT &amp; BSD
 * Build: http://modernizr.com/download/#-fontface-backgroundsize-borderimage-borderradius-boxshadow-flexbox-hsla-multiplebgs-opacity-rgba-textshadow-cssanimations-csscolumns-generatedcontent-cssgradients-cssreflections-csstransforms-csstransforms3d-csstransitions-applicationcache-canvas-canvastext-draganddrop-hashchange-history-audio-video-indexeddb-input-inputtypes-localstorage-postmessage-sessionstorage-websockets-websqldatabase-webworkers-geolocation-inlinesvg-smil-svg-svgclippaths-touch-webgl-shiv-mq-cssclasses-addtest-prefixed-teststyles-testprop-testallprops-hasevent-prefixes-domprefixes-load
 */
;window.Modernizr=function(a,b,c){function D(a){j.cssText=a}function E(a,b){return D(n.join(a+";")+(b||""))}function F(a,b){return typeof a===b}function G(a,b){return!!~(""+a).indexOf(b)}function H(a,b){for(var d in a){var e=a[d];if(!G(e,"-")&amp;&amp;j[e]!==c)return b=="pfx"?e:!0}return!1}function I(a,b,d){for(var e in a){var f=b[a[e]];if(f!==c)return d===!1?a[e]:F(f,"function")?f.bind(d||b):f}return!1}function J(a,b,c){var d=a.charAt(0).toUpperCase()+a.slice(1),e=(a+" "+p.join(d+" ")+d).split(" ");return F(b,"string")||F(b,"undefined")?H(e,b):(e=(a+" "+q.join(d+" ")+d).split(" "),I(e,b,c))}function K(){e.input=function(c){for(var d=0,e=c.length;d&lt;e;d++)u[c[d]]=c[d]in k;return u.list&amp;&amp;(u.list=!!b.createElement("datalist")&amp;&amp;!!a.HTMLDataListElement),u}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),e.inputtypes=function(a){for(var d=0,e,f,h,i=a.length;d&lt;i;d++)k.setAttribute("type",f=a[d]),e=k.type!=="text",e&amp;&amp;(k.value=l,k.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(f)&amp;&amp;k.style.WebkitAppearance!==c?(g.appendChild(k),h=b.defaultView,e=h.getComputedStyle&amp;&amp;h.getComputedStyle(k,null).WebkitAppearance!=="textfield"&amp;&amp;k.offsetHeight!==0,g.removeChild(k)):/^(search|tel)$/.test(f)||(/^(url|email)$/.test(f)?e=k.checkValidity&amp;&amp;k.checkValidity()===!1:e=k.value!=l)),t[a[d]]=!!e;return t}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var d="2.6.1",e={},f=!0,g=b.documentElement,h="modernizr",i=b.createElement(h),j=i.style,k=b.createElement("input"),l=":)",m={}.toString,n=" -webkit- -moz- -o- -ms- ".split(" "),o="Webkit Moz O ms",p=o.split(" "),q=o.toLowerCase().split(" "),r={svg:"http://www.w3.org/2000/svg"},s={},t={},u={},v=[],w=v.slice,x,y=function(a,c,d,e){var f,i,j,k=b.createElement("div"),l=b.body,m=l?l:b.createElement("body");if(parseInt(d,10))while(d--)j=b.createElement("div"),j.id=e?e[d]:h+(d+1),k.appendChild(j);return f=["&amp;#173;",'&lt;style id="s',h,'"&gt;',a,"&lt;/style&gt;"].join(""),k.id=h,(l?k:m).innerHTML+=f,m.appendChild(k),l||(m.style.background="",g.appendChild(m)),i=c(k,a),l?k.parentNode.removeChild(k):m.parentNode.removeChild(m),!!i},z=function(b){var c=a.matchMedia||a.msMatchMedia;if(c)return c(b).matches;var d;return y("@media "+b+" { #"+h+" { position: absolute; } }",function(b){d=(a.getComputedStyle?getComputedStyle(b,null):b.currentStyle)["position"]=="absolute"}),d},A=function(){function d(d,e){e=e||b.createElement(a[d]||"div"),d="on"+d;var f=d in e;return f||(e.setAttribute||(e=b.createElement("div")),e.setAttribute&amp;&amp;e.removeAttribute&amp;&amp;(e.setAttribute(d,""),f=F(e[d],"function"),F(e[d],"undefined")||(e[d]=c),e.removeAttribute(d))),e=null,f}var a={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return d}(),B={}.hasOwnProperty,C;!F(B,"undefined")&amp;&amp;!F(B.call,"undefined")?C=function(a,b){return B.call(a,b)}:C=function(a,b){return b in a&amp;&amp;F(a.constructor.prototype[b],"undefined")},Function.prototype.bind||(Function.prototype.bind=function(b){var c=this;if(typeof c!="function")throw new TypeError;var d=w.call(arguments,1),e=function(){if(this instanceof e){var a=function(){};a.prototype=c.prototype;var f=new a,g=c.apply(f,d.concat(w.call(arguments)));return Object(g)===g?g:f}return c.apply(b,d.concat(w.call(arguments)))};return e}),s.flexbox=function(){return J("flexWrap")},s.canvas=function(){var a=b.createElement("canvas");return!!a.getContext&amp;&amp;!!a.getContext("2d")},s.canvastext=function(){return!!e.canvas&amp;&amp;!!F(b.createElement("canvas").getContext("2d").fillText,"function")},s.webgl=function(){return!!a.WebGLRenderingContext},s.touch=function(){var c;return"ontouchstart"in a||a.DocumentTouch&amp;&amp;b instanceof DocumentTouch?c=!0:y(["@media (",n.join("touch-enabled),("),h,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(a){c=a.offsetTop===9}),c},s.geolocation=function(){return"geolocation"in navigator},s.postmessage=function(){return!!a.postMessage},s.websqldatabase=function(){return!!a.openDatabase},s.indexedDB=function(){return!!J("indexedDB",a)},s.hashchange=function(){return A("hashchange",a)&amp;&amp;(b.documentMode===c||b.documentMode&gt;7)},s.history=function(){return!!a.history&amp;&amp;!!history.pushState},s.draganddrop=function(){var a=b.createElement("div");return"draggable"in a||"ondragstart"in a&amp;&amp;"ondrop"in a},s.websockets=function(){return"WebSocket"in a||"MozWebSocket"in a},s.rgba=function(){return D("background-color:rgba(150,255,150,.5)"),G(j.backgroundColor,"rgba")},s.hsla=function(){return D("background-color:hsla(120,40%,100%,.5)"),G(j.backgroundColor,"rgba")||G(j.backgroundColor,"hsla")},s.multiplebgs=function(){return D("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(j.background)},s.backgroundsize=function(){return J("backgroundSize")},s.borderimage=function(){return J("borderImage")},s.borderradius=function(){return J("borderRadius")},s.boxshadow=function(){return J("boxShadow")},s.textshadow=function(){return b.createElement("div").style.textShadow===""},s.opacity=function(){return E("opacity:.55"),/^0.55$/.test(j.opacity)},s.cssanimations=function(){return J("animationName")},s.csscolumns=function(){return J("columnCount")},s.cssgradients=function(){var a="background-image:",b="gradient(linear,left top,right bottom,from(#9f9),to(white));",c="linear-gradient(left top,#9f9, white);";return D((a+"-webkit- ".split(" ").join(b+a)+n.join(c+a)).slice(0,-a.length)),G(j.backgroundImage,"gradient")},s.cssreflections=function(){return J("boxReflect")},s.csstransforms=function(){return!!J("transform")},s.csstransforms3d=function(){var a=!!J("perspective");return a&amp;&amp;"webkitPerspective"in g.style&amp;&amp;y("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(b,c){a=b.offsetLeft===9&amp;&amp;b.offsetHeight===3}),a},s.csstransitions=function(){return J("transition")},s.fontface=function(){var a;return y('@font-face {font-family:"font";src:url("https://")}',function(c,d){var e=b.getElementById("smodernizr"),f=e.sheet||e.styleSheet,g=f?f.cssRules&amp;&amp;f.cssRules[0]?f.cssRules[0].cssText:f.cssText||"":"";a=/src/i.test(g)&amp;&amp;g.indexOf(d.split(" ")[0])===0}),a},s.generatedcontent=function(){var a;return y(['#modernizr:after{content:"',l,'";visibility:hidden}'].join(""),function(b){a=b.offsetHeight&gt;=1}),a},s.video=function(){var a=b.createElement("video"),c=!1;try{if(c=!!a.canPlayType)c=new Boolean(c),c.ogg=a.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),c.h264=a.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),c.webm=a.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,"")}catch(d){}return c},s.audio=function(){var a=b.createElement("audio"),c=!1;try{if(c=!!a.canPlayType)c=new Boolean(c),c.ogg=a.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),c.mp3=a.canPlayType("audio/mpeg;").replace(/^no$/,""),c.wav=a.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),c.m4a=(a.canPlayType("audio/x-m4a;")||a.canPlayType("audio/aac;")).replace(/^no$/,"")}catch(d){}return c},s.localstorage=function(){try{return localStorage.setItem(h,h),localStorage.removeItem(h),!0}catch(a){return!1}},s.sessionstorage=function(){try{return sessionStorage.setItem(h,h),sessionStorage.removeItem(h),!0}catch(a){return!1}},s.webworkers=function(){return!!a.Worker},s.applicationcache=function(){return!!a.applicationCache},s.svg=function(){return!!b.createElementNS&amp;&amp;!!b.createElementNS(r.svg,"svg").createSVGRect},s.inlinesvg=function(){var a=b.createElement("div");return a.innerHTML="&lt;svg/&gt;",(a.firstChild&amp;&amp;a.firstChild.namespaceURI)==r.svg},s.smil=function(){return!!b.createElementNS&amp;&amp;/SVGAnimate/.test(m.call(b.createElementNS(r.svg,"animate")))},s.svgclippaths=function(){return!!b.createElementNS&amp;&amp;/SVGClipPath/.test(m.call(b.createElementNS(r.svg,"clipPath")))};for(var L in s)C(s,L)&amp;&amp;(x=L.toLowerCase(),e[x]=s[L](),v.push((e[x]?"":"no-")+x));return e.input||K(),e.addTest=function(a,b){if(typeof a=="object")for(var d in a)C(a,d)&amp;&amp;e.addTest(d,a[d]);else{a=a.toLowerCase();if(e[a]!==c)return e;b=typeof b=="function"?b():b,f&amp;&amp;(g.className+=" "+(b?"":"no-")+a),e[a]=b}return e},D(""),i=k=null,function(a,b){function k(a,b){var c=a.createElement("p"),d=a.getElementsByTagName("head")[0]||a.documentElement;return c.innerHTML="x&lt;style&gt;"+b+"&lt;/style&gt;",d.insertBefore(c.lastChild,d.firstChild)}function l(){var a=r.elements;return typeof a=="string"?a.split(" "):a}function m(a){var b=i[a[g]];return b||(b={},h++,a[g]=h,i[h]=b),b}function n(a,c,f){c||(c=b);if(j)return c.createElement(a);f||(f=m(c));var g;return f.cache[a]?g=f.cache[a].cloneNode():e.test(a)?g=(f.cache[a]=f.createElem(a)).cloneNode():g=f.createElem(a),g.canHaveChildren&amp;&amp;!d.test(a)?f.frag.appendChild(g):g}function o(a,c){a||(a=b);if(j)return a.createDocumentFragment();c=c||m(a);var d=c.frag.cloneNode(),e=0,f=l(),g=f.length;for(;e&lt;g;e++)d.createElement(f[e]);return d}function p(a,b){b.cache||(b.cache={},b.createElem=a.createElement,b.createFrag=a.createDocumentFragment,b.frag=b.createFrag()),a.createElement=function(c){return r.shivMethods?n(c,a,b):b.createElem(c)},a.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&amp;&amp;("+l().join().replace(/\w+/g,function(a){return b.createElem(a),b.frag.createElement(a),'c("'+a+'")'})+");return n}")(r,b.frag)}function q(a){a||(a=b);var c=m(a);return r.shivCSS&amp;&amp;!f&amp;&amp;!c.hasCSS&amp;&amp;(c.hasCSS=!!k(a,"article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}mark{background:#FF0;color:#000}")),j||p(a,c),a}var c=a.html5||{},d=/^&lt;|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,e=/^&lt;|^(?:a|b|button|code|div|fieldset|form|h1|h2|h3|h4|h5|h6|i|iframe|img|input|label|li|link|ol|option|p|param|q|script|select|span|strong|style|table|tbody|td|textarea|tfoot|th|thead|tr|ul)$/i,f,g="_html5shiv",h=0,i={},j;(function(){try{var a=b.createElement("a");a.innerHTML="&lt;xyz&gt;&lt;/xyz&gt;",f="hidden"in a,j=a.childNodes.length==1||function(){b.createElement("a");var a=b.createDocumentFragment();return typeof a.cloneNode=="undefined"||typeof a.createDocumentFragment=="undefined"||typeof a.createElement=="undefined"}()}catch(c){f=!0,j=!0}})();var r={elements:c.elements||"abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",shivCSS:c.shivCSS!==!1,supportsUnknownElements:j,shivMethods:c.shivMethods!==!1,type:"default",shivDocument:q,createElement:n,createDocumentFragment:o};a.html5=r,q(b)}(this,b),e._version=d,e._prefixes=n,e._domPrefixes=q,e._cssomPrefixes=p,e.mq=z,e.hasEvent=A,e.testProp=function(a){return H([a])},e.testAllProps=J,e.testStyles=y,e.prefixed=function(a,b,c){return b?J(a,b,c):J(a,"pfx")},g.className=g.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(f?" js "+v.join(" "):""),e}(this,this.document),function(a,b,c){function d(a){return o.call(a)=="[object Function]"}function e(a){return typeof a=="string"}function f(){}function g(a){return!a||a=="loaded"||a=="complete"||a=="uninitialized"}function h(){var a=p.shift();q=1,a?a.t?m(function(){(a.t=="c"?B.injectCss:B.injectJs)(a.s,0,a.a,a.x,a.e,1)},0):(a(),h()):q=0}function i(a,c,d,e,f,i,j){function k(b){if(!o&amp;&amp;g(l.readyState)&amp;&amp;(u.r=o=1,!q&amp;&amp;h(),l.onload=l.onreadystatechange=null,b)){a!="img"&amp;&amp;m(function(){t.removeChild(l)},50);for(var d in y[c])y[c].hasOwnProperty(d)&amp;&amp;y[c][d].onload()}}var j=j||B.errorTimeout,l={},o=0,r=0,u={t:d,s:c,e:f,a:i,x:j};y[c]===1&amp;&amp;(r=1,y[c]=[],l=b.createElement(a)),a=="object"?l.data=c:(l.src=c,l.type=a),l.width=l.height="0",l.onerror=l.onload=l.onreadystatechange=function(){k.call(this,r)},p.splice(e,0,u),a!="img"&amp;&amp;(r||y[c]===2?(t.insertBefore(l,s?null:n),m(k,j)):y[c].push(l))}function j(a,b,c,d,f){return q=0,b=b||"j",e(a)?i(b=="c"?v:u,a,b,this.i++,c,d,f):(p.splice(this.i++,0,a),p.length==1&amp;&amp;h()),this}function k(){var a=B;return a.loader={load:j,i:0},a}var l=b.documentElement,m=a.setTimeout,n=b.getElementsByTagName("script")[0],o={}.toString,p=[],q=0,r="MozAppearance"in l.style,s=r&amp;&amp;!!b.createRange().compareNode,t=s?l:n.parentNode,l=a.opera&amp;&amp;o.call(a.opera)=="[object Opera]",l=!!b.attachEvent&amp;&amp;!l,u=r?"object":l?"script":"img",v=l?"script":u,w=Array.isArray||function(a){return o.call(a)=="[object Array]"},x=[],y={},z={timeout:function(a,b){return b.length&amp;&amp;(a.timeout=b[0]),a}},A,B;B=function(a){function b(a){var a=a.split("!"),b=x.length,c=a.pop(),d=a.length,c={url:c,origUrl:c,prefixes:a},e,f,g;for(f=0;f&lt;d;f++)g=a[f].split("="),(e=z[g.shift()])&amp;&amp;(c=e(c,g));for(f=0;f&lt;b;f++)c=x[f](c);return c}function g(a,e,f,g,i){var j=b(a),l=j.autoCallback;j.url.split(".").pop().split("?").shift(),j.bypass||(e&amp;&amp;(e=d(e)?e:e[a]||e[g]||e[a.split("/").pop().split("?")[0]]||h),j.instead?j.instead(a,e,f,g,i):(y[j.url]?j.noexec=!0:y[j.url]=1,f.load(j.url,j.forceCSS||!j.forceJS&amp;&amp;"css"==j.url.split(".").pop().split("?").shift()?"c":c,j.noexec,j.attrs,j.timeout),(d(e)||d(l))&amp;&amp;f.load(function(){k(),e&amp;&amp;e(j.origUrl,i,g),l&amp;&amp;l(j.origUrl,i,g),y[j.url]=2})))}function i(a,b){function c(a,c){if(a){if(e(a))c||(j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}),g(a,j,b,0,h);else if(Object(a)===a)for(n in m=function(){var b=0,c;for(c in a)a.hasOwnProperty(c)&amp;&amp;b++;return b}(),a)a.hasOwnProperty(n)&amp;&amp;(!c&amp;&amp;!--m&amp;&amp;(d(j)?j=function(){var a=[].slice.call(arguments);k.apply(this,a),l()}:j[n]=function(a){return function(){var b=[].slice.call(arguments);a&amp;&amp;a.apply(this,b),l()}}(k[n])),g(a[n],j,b,n,h))}else!c&amp;&amp;l()}var h=!!a.test,i=a.load||a.both,j=a.callback||f,k=j,l=a.complete||f,m,n;c(h?a.yep:a.nope,!!i),i&amp;&amp;c(i)}var j,l,m=this.yepnope.loader;if(e(a))g(a,0,m,0);else if(w(a))for(j=0;j&lt;a.length;j++)l=a[j],e(l)?g(l,0,m,0):w(l)?B(l):Object(l)===l&amp;&amp;i(l,m);else Object(a)===a&amp;&amp;i(a,m)},B.addPrefix=function(a,b){z[a]=b},B.addFilter=function(a){x.push(a)},B.errorTimeout=1e4,b.readyState==null&amp;&amp;b.addEventListener&amp;&amp;(b.readyState="loading",b.addEventListener("DOMContentLoaded",A=function(){b.removeEventListener("DOMContentLoaded",A,0),b.readyState="complete"},0)),a.yepnope=k(),a.yepnope.executeStack=h,a.yepnope.injectJs=function(a,c,d,e,i,j){var k=b.createElement("script"),l,o,e=e||B.errorTimeout;k.src=a;for(o in d)k.setAttribute(o,d[o]);c=j?h:c||f,k.onreadystatechange=k.onload=function(){!l&amp;&amp;g(k.readyState)&amp;&amp;(l=1,c(),k.onload=k.onreadystatechange=null)},m(function(){l||(l=1,c(1))},e),i?k.onload():n.parentNode.insertBefore(k,n)},a.yepnope.injectCss=function(a,c,d,e,g,i){var e=b.createElement("link"),j,c=i?h:c||f;e.href=a,e.rel="stylesheet",e.type="text/css";for(j in d)e.setAttribute(j,d[j]);g||(n.parentNode.insertBefore(e,n),m(c,0))}}(this,document),Modernizr.load=function(){yepnope.apply(window,[].slice.call(arguments,0))};

/*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors &amp; copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas. Dual MIT/BSD license */
/*! NOTE: If you're already including a window.matchMedia polyfill via Modernizr or otherwise, you don't need this part */
window.matchMedia=window.matchMedia||(function(e,f){var c,a=e.documentElement,b=a.firstElementChild||a.firstChild,d=e.createElement("body"),g=e.createElement("div");g.id="mq-test-1";g.style.cssText="position:absolute;top:-100em";d.style.background="none";d.appendChild(g);return function(h){g.innerHTML='&amp;shy;&lt;style media="'+h+'"&gt; #mq-test-1 { width: 42px; }&lt;/style&gt;';a.insertBefore(d,b);c=g.offsetWidth==42;a.removeChild(d);return{matches:c,media:h}}})(document);

/*! Respond.js v1.1.0: min/max-width media query polyfill. (c) Scott Jehl. MIT/GPLv2 Lic. j.mp/respondjs  */
(function(e){e.respond={};respond.update=function(){};respond.mediaQueriesSupported=e.matchMedia&amp;&amp;e.matchMedia("only all").matches;if(respond.mediaQueriesSupported){return}var w=e.document,s=w.documentElement,i=[],k=[],q=[],o={},h=30,f=w.getElementsByTagName("head")[0]||s,g=w.getElementsByTagName("base")[0],b=f.getElementsByTagName("link"),d=[],a=function(){var D=b,y=D.length,B=0,A,z,C,x;for(;B&lt;y;B++){A=D[B],z=A.href,C=A.media,x=A.rel&amp;&amp;A.rel.toLowerCase()==="stylesheet";if(!!z&amp;&amp;x&amp;&amp;!o[z]){if(A.styleSheet&amp;&amp;A.styleSheet.rawCssText){m(A.styleSheet.rawCssText,z,C);o[z]=true}else{if((!/^([a-zA-Z:]*\/\/)/.test(z)&amp;&amp;!g)||z.replace(RegExp.$1,"").split("/")[0]===e.location.host){d.push({href:z,media:C})}}}}u()},u=function(){if(d.length){var x=d.shift();n(x.href,function(y){m(y,x.href,x.media);o[x.href]=true;u()})}},m=function(I,x,z){var G=I.match(/@media[^\{]+\{([^\{\}]*\{[^\}\{]*\})+/gi),J=G&amp;&amp;G.length||0,x=x.substring(0,x.lastIndexOf("/")),y=function(K){return K.replace(/(url\()['"]?([^\/\)'"][^:\)'"]+)['"]?(\))/g,"$1"+x+"$2$3")},A=!J&amp;&amp;z,D=0,C,E,F,B,H;if(x.length){x+="/"}if(A){J=1}for(;D&lt;J;D++){C=0;if(A){E=z;k.push(y(I))}else{E=G[D].match(/@media *([^\{]+)\{([\S\s]+?)$/)&amp;&amp;RegExp.$1;k.push(RegExp.$2&amp;&amp;y(RegExp.$2))}B=E.split(",");H=B.length;for(;C&lt;H;C++){F=B[C];i.push({media:F.split("(")[0].match(/(only\s+)?([a-zA-Z]+)\s?/)&amp;&amp;RegExp.$2||"all",rules:k.length-1,hasquery:F.indexOf("(")&gt;-1,minw:F.match(/\(min\-width:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/)&amp;&amp;parseFloat(RegExp.$1)+(RegExp.$2||""),maxw:F.match(/\(max\-width:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/)&amp;&amp;parseFloat(RegExp.$1)+(RegExp.$2||"")})}}j()},l,r,v=function(){var z,A=w.createElement("div"),x=w.body,y=false;A.style.cssText="position:absolute;font-size:1em;width:1em";if(!x){x=y=w.createElement("body");x.style.background="none"}x.appendChild(A);s.insertBefore(x,s.firstChild);z=A.offsetWidth;if(y){s.removeChild(x)}else{x.removeChild(A)}z=p=parseFloat(z);return z},p,j=function(I){var x="clientWidth",B=s[x],H=w.compatMode==="CSS1Compat"&amp;&amp;B||w.body[x]||B,D={},G=b[b.length-1],z=(new Date()).getTime();if(I&amp;&amp;l&amp;&amp;z-l&lt;h){clearTimeout(r);r=setTimeout(j,h);return}else{l=z}for(var E in i){var K=i[E],C=K.minw,J=K.maxw,A=C===null,L=J===null,y="em";if(!!C){C=parseFloat(C)*(C.indexOf(y)&gt;-1?(p||v()):1)}if(!!J){J=parseFloat(J)*(J.indexOf(y)&gt;-1?(p||v()):1)}if(!K.hasquery||(!A||!L)&amp;&amp;(A||H&gt;=C)&amp;&amp;(L||H&lt;=J)){if(!D[K.media]){D[K.media]=[]}D[K.media].push(k[K.rules])}}for(var E in q){if(q[E]&amp;&amp;q[E].parentNode===f){f.removeChild(q[E])}}for(var E in D){var M=w.createElement("style"),F=D[E].join("\n");M.type="text/css";M.media=E;f.insertBefore(M,G.nextSibling);if(M.styleSheet){M.styleSheet.cssText=F}else{M.appendChild(w.createTextNode(F))}q.push(M)}},n=function(x,z){var y=c();if(!y){return}y.open("GET",x,true);y.onreadystatechange=function(){if(y.readyState!=4||y.status!=200&amp;&amp;y.status!=304){return}z(y.responseText)};if(y.readyState==4){return}y.send(null)},c=(function(){var x=false;try{x=new XMLHttpRequest()}catch(y){x=new ActiveXObject("Microsoft.XMLHTTP")}return function(){return x}})();a();respond.update=a;function t(){j(true)}if(e.addEventListener){e.addEventListener("resize",t,false)}else{if(e.attachEvent){e.attachEvent("onresize",t)}}})(this);

//]]&gt;
&lt;/script&gt;

&lt;script src='' type='text/javascript'/&gt;

&lt;style media='all' type='text/css'&gt;
/* Body Font face */
body{ font-family:&amp;#39;Source Sans Pro&amp;#39;,sans-serif}

 h1.textlogo{  font-family:&amp;#39;Source Sans Pro&amp;#39;,sans-serif}

/* Headings Font face */
h1, h2, h3, h4, h5, h6, .mainbpart h1, #intro{font-family:&amp;#39;Source Sans Pro&amp;#39;,sans-serif}

/* Body Text Color */
body{ color:#666659}

 /* Body Links Color */
a{ color:#2A2A26}
a:hover{ color:#43CACC}

/* Logo Text Color */
h1.textlogo a{color:#43CACC}

 /* Headings Color */
 h2, h3, h4, h5, h6{color:#2A2A26}

/* Sidebar Headings Color */
 aside h3{color:#3F3F3A}

/* Post Title Link Color */
.mainbpart article h2 a{ color:#2A2A26}
.mainbpart article h2 a:hover{ color:#43CACC}

/* Navigation Link Color */
.navbpart ul li a{ color:#8C8C7B !important}
.navbpart ul li a:hover, 
.navbpart ul li.current-menu-item a, 
.navbpart ul li.current-post-parent a, 
.navbpart ul li a:hover, 
.navbpart ul li.current-menu-item a, 
.navbpart ul li.current-post-parent a{color:#FFF !important}
&lt;/style&gt;

&lt;script type='text/javascript'&gt;
//&lt;![CDATA[

function showrecentcomments(json){for(var i=0;i&lt;a_rc;i++){var b_rc=json.feed.entry[i];var c_rc;if(i==json.feed.entry.length)break;for(var k=0;k&lt;b_rc.link.length;k++){if(b_rc.link[k].rel=='alternate'){c_rc=b_rc.link[k].href;break;}}c_rc=c_rc.replace("#","#comment-");var d_rc=c_rc.split("#");d_rc=d_rc[0];var e_rc=d_rc.split("/");e_rc=e_rc[5];e_rc=e_rc.split(".html");e_rc=e_rc[0];var f_rc=e_rc.replace(/-/g," ");f_rc=f_rc.link(d_rc);var g_rc=b_rc.published.$t;var h_rc=g_rc.substring(0,4);var i_rc=g_rc.substring(5,7);var j_rc=g_rc.substring(8,10);var k_rc=new Array();k_rc[1]="Jan";k_rc[2]="Feb";k_rc[3]="Mar";k_rc[4]="Apr";k_rc[5]="May";k_rc[6]="Jun";k_rc[7]="Jul";k_rc[8]="Aug";k_rc[9]="Sep";k_rc[10]="Oct";k_rc[11]="Nov";k_rc[12]="Dec";if("content" in b_rc){var l_rc=b_rc.content.$t;}else if("summary" in b_rc){var l_rc=b_rc.summary.$t;}else var l_rc="";var re=/&lt;\S[^&gt;]*&gt;/g;l_rc=l_rc.replace(re,"");if(m_rc==true)document.write('On '+k_rc[parseInt(i_rc,10)]+' '+j_rc+' ');document.write('&lt;a href="'+c_rc+'"&gt;'+b_rc.author[0].name.$t+'&lt;/a&gt; commented');if(n_rc==true)document.write(' on '+f_rc);document.write(': ');if(l_rc.length&lt;o_rc){document.write('&lt;i&gt;&amp;#8220;');document.write(l_rc);document.write('&amp;#8221;&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;');}else{document.write('&lt;i&gt;&amp;#8220;');l_rc=l_rc.substring(0,o_rc);var p_rc=l_rc.lastIndexOf(" ");l_rc=l_rc.substring(0,p_rc);document.write(l_rc+'&amp;hellip;&amp;#8221;&lt;/i&gt;');document.write('&lt;br/&gt;&lt;br/&gt;');}}}

function rp(json){document.write('&lt;ul&gt;');for(var i=0;i&lt;numposts;i++){document.write('&lt;li&gt;');var entry=json.feed.entry[i];var posttitle=entry.title.$t;var posturl;if(i==json.feed.entry.length)break;for(var k=0;k&lt;entry.link.length;k++){if(entry.link[k].rel=='alternate'){posturl=entry.link[k].href;break}}posttitle=posttitle.link(posturl);var readmorelink="(more)";readmorelink=readmorelink.link(posturl);var postdate=entry.published.$t;var cdyear=postdate.substring(0,4);var cdmonth=postdate.substring(5,7);var cdday=postdate.substring(8,10);var monthnames=new Array();monthnames[1]="Jan";monthnames[2]="Feb";monthnames[3]="Mar";monthnames[4]="Apr";monthnames[5]="May";monthnames[6]="Jun";monthnames[7]="Jul";monthnames[8]="Aug";monthnames[9]="Sep";monthnames[10]="Oct";monthnames[11]="Nov";monthnames[12]="Dec";if("content"in entry){var postcontent=entry.content.$t}else if("summary"in entry){var postcontent=entry.summary.$t}else var postcontent="";var re=/&lt;\S[^&gt;]*&gt;/g;postcontent=postcontent.replace(re,"");document.write(posttitle);if(showpostdate==true)document.write(' - '+monthnames[parseInt(cdmonth,10)]+' '+cdday);if(showpostsummary==true){if(postcontent.length&lt;numchars){document.write(postcontent)}else{postcontent=postcontent.substring(0,numchars);var quoteEnd=postcontent.lastIndexOf(" ");postcontent=postcontent.substring(0,quoteEnd);document.write(postcontent+'...'+readmorelink)}}document.write('&lt;/li&gt;')}document.write('&lt;/ul&gt;')}

//]]&gt;
&lt;/script&gt;

&lt;script type='text/javascript'&gt;
summary_noimg = 400;
summary_img = 300;
img_thumb_height = 150;
img_thumb_width = 200; 
&lt;/script&gt;
&lt;script type='text/javascript'&gt;
//&lt;![CDATA[

function removeHtmlTag(strx,chop){ 
	if(strx.indexOf("&lt;")!=-1)
	{
		var s = strx.split("&lt;"); 
		for(var i=0;i&lt;s.length;i++){ 
			if(s[i].indexOf("&gt;")!=-1){ 
				s[i] = s[i].substring(s[i].indexOf("&gt;")+1,s[i].length); 
			} 
		} 
		strx =  s.join(""); 
	}
	chop = (chop &lt; strx.length-1) ? chop : strx.length-2; 
	while(strx.charAt(chop-1)!=' ' &amp;&amp; strx.indexOf(' ',chop)!=-1) chop++; 
	strx = strx.substring(0,chop-1); 
	return strx+'...'; 
}

function createSummaryAndThumb(pID){
	var div = document.getElementById(pID);
	var imgtag = "";
	var img = div.getElementsByTagName("img");
	var summ = summary_noimg;
	if(img.length&gt;=1) {	
		imgtag = '&lt;img src="'+img[0].src+'" class="pbtthumbimg"/&gt;';
		summ = summary_img;
	}
	
	var summary = imgtag + '&lt;div&gt;' + removeHtmlTag(div.innerHTML,summ) + '&lt;/div&gt;';
	div.innerHTML = summary;
}

//]]&gt;
&lt;/script&gt;

&lt;/head&gt;

&lt;body&gt;

&lt;!--[if lt IE 7]&gt;
    &lt;p class="chromeframe"&gt;You are using an outdated browser. &lt;a href="http://browsehappy.com/"&gt;Upgrade your browser today&lt;/a&gt; or &lt;a href="http://www.google.com/chromeframe/?redirect=true"&gt;install Google Chrome Frame&lt;/a&gt; to better experience this site.&lt;/p&gt;
&lt;![endif]--&gt;

&lt;div class='main-container'&gt;

&lt;!-- begin header_container --&gt;
&lt;div class='header_container_fixed'&gt;

&lt;!-- begin header --&gt;
&lt;header class='wrapperbpart clearfix'&gt;

&lt;!-- begin logo --&gt;
&lt;b:section class='headersec' id='headersec' maxwidgets='1' showaddelement='no'&gt;
  &lt;b:widget id='Header1' locked='true' title='Lucid Motions (Header)' type='Header'&gt;
    &lt;b:widget-settings&gt;
      &lt;b:widget-setting name='displayUrl'/&gt;
      &lt;b:widget-setting name='displayHeight'&gt;0&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='sectionWidth'&gt;0&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='useImage'&gt;false&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='shrinkToFit'&gt;false&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='imagePlacement'&gt;BEHIND&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='displayWidth'&gt;0&lt;/b:widget-setting&gt;
    &lt;/b:widget-settings&gt;
    &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:useImage'&gt;
    &lt;b:if cond='data:imagePlacement == &amp;quot;REPLACE&amp;quot;'&gt;
      &lt;!--Show just the image, no text--&gt;
      &lt;div id='header-inner'&gt;
        &lt;a expr:href='data:blog.homepageUrl' style='display: block'&gt;
          &lt;img expr:alt='data:title' expr:height='data:height' expr:id='data:widget.instanceId + &amp;quot;_headerimg&amp;quot;' expr:src='data:sourceUrl' expr:width='data:width' style='display: block;padding:15px 0px 15px 0px;margin: 0px auto;'/&gt;
        &lt;/a&gt;
      &lt;/div&gt;
    &lt;b:else/&gt;
      &lt;!--
      Show image as background to text. You can't really calculate the width
      reliably in JS because margins are not taken into account by any of
      clientWidth, offsetWidth or scrollWidth, so we don't force a minimum
      width if the user is using shrink to fit.
      This results in a margin-width's worth of pixels being cropped. If the
      user is not using shrink to fit then we expand the header.
      --&gt;
      &lt;div expr:style='&amp;quot;background-image: url(\&amp;quot;&amp;quot; + data:sourceUrl + &amp;quot;\&amp;quot;); &amp;quot;                      + &amp;quot;background-position: &amp;quot;                      + data:backgroundPositionStyleStr + &amp;quot;; &amp;quot;                      + data:widthStyleStr                      + &amp;quot;min-height: &amp;quot; + data:height + &amp;quot;px;&amp;quot;                      + &amp;quot;_height: &amp;quot; + data:height + &amp;quot;px;&amp;quot;                      + &amp;quot;background-repeat: no-repeat; &amp;quot;' id='header-inner'&gt;
        &lt;div class='titlewrapper' style='background: transparent'&gt;
          &lt;h1 class='logoheader' style='background: transparent; border-width: 0px'&gt;
            &lt;b:include name='title'/&gt;
          &lt;/h1&gt;
        &lt;/div&gt;
        &lt;b:include name='description'/&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;
  &lt;b:else/&gt;
    &lt;!--No header image --&gt;
    &lt;div id='header-inner'&gt;
      &lt;div class='titlewrapper'&gt;
        &lt;h1 class='logoheader'&gt;
          &lt;b:include name='title'/&gt;
        &lt;/h1&gt;
      &lt;/div&gt;
      &lt;b:include name='description'/&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='description'&gt;
    &lt;h2 class='descriptionheader'&gt;&lt;data:description/&gt;&lt;/h2&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='title'&gt;
&lt;a expr:href='data:blog.homepageUrl'&gt;&lt;data:title/&gt;&lt;/a&gt;
&lt;/b:includable&gt;
  &lt;/b:widget&gt;
&lt;/b:section&gt;
&lt;!-- end logo --&gt;
&lt;div class='mini_divider'/&gt;

&lt;!-- begin main navigation --&gt;
&lt;div class='menu-mainmenu-container navbpart'&gt;
&lt;b:section class='nbttopmenutop' id='nbttopmenutop' showaddelement='no'&gt;
  &lt;b:widget id='LinkList7' locked='true' title='Edit This Menu' type='LinkList'&gt;
    &lt;b:includable id='main'&gt;
 &lt;div class='widget-content'&gt;
   &lt;ul class='menu' id='menu-mainmenu'&gt;
     &lt;b:loop values='data:links' var='link'&gt;
       &lt;li&gt;&lt;a expr:href='data:link.target'&gt;&lt;data:link.name/&gt;&lt;/a&gt;&lt;/li&gt;
     &lt;/b:loop&gt;
   &lt;/ul&gt;
   &lt;b:include name='quickedit'/&gt;
 &lt;/div&gt;
&lt;/b:includable&gt;
  &lt;/b:widget&gt;
&lt;/b:section&gt;
&lt;/div&gt;
&lt;!-- end main navigation --&gt;
&lt;div class='mini_divider'/&gt;

&lt;!-- begin search form --&gt;
&lt;div class='search_box'&gt;
    &lt;form action='/search' id='searchform' method='get'&gt;
		&lt;input class='field' id='s' name='q' placeholder='Search' type='text'/&gt;
	&lt;/form&gt;
&lt;/div&gt;
&lt;!-- end search form --&gt;
&lt;div class='mini_divider'/&gt;

&lt;/header&gt;
&lt;!-- end header --&gt;

&lt;/div&gt;
&lt;!-- end header_container --&gt;

&lt;!-- begin mainbpart --&gt;
&lt;div class='mainbpart wrapperbpart clearfix'&gt;

&lt;!-- .main_content--&gt;
&lt;div class='main_content'&gt;

&lt;!-- section content --&gt;
&lt;div class='contentbpart'&gt;
&lt;b:section class='mainblogsec' id='mainblogsec' showaddelement='no'&gt;
  &lt;b:widget id='Blog1' locked='true' title='Blog Posts' type='Blog'&gt;
    &lt;b:widget-settings&gt;
      &lt;b:widget-setting name='showDateHeader'&gt;true&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='style.textcolor'&gt;#000000&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showShareButtons'&gt;true&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showCommentLink'&gt;true&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='style.urlcolor'&gt;#008000&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showAuthor'&gt;true&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='style.linkcolor'&gt;#0000ff&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='style.unittype'&gt;TextAndImage&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='style.bgcolor'&gt;#ffffff&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showAuthorProfile'&gt;false&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='style.layout'&gt;1x1&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showLabels'&gt;true&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showLocation'&gt;true&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showTimestamp'&gt;true&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='postsPerAd'&gt;1&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showBacklinks'&gt;false&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='style.bordercolor'&gt;#ffffff&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showInlineAds'&gt;false&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showReactions'&gt;false&lt;/b:widget-setting&gt;
    &lt;/b:widget-settings&gt;
    &lt;b:includable id='main' var='top'&gt;
  &lt;b:if cond='data:mobile == &amp;quot;false&amp;quot;'&gt;

    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;data:defaultAdStart/&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &lt;b:if cond='data:post.isFirstPost == &amp;quot;false&amp;quot;'&gt;
            &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-outer&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.dateHeader'&gt;
          &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:post.isDateStart'&gt;
          &amp;lt;div class=&amp;quot;date-posts&amp;quot;&amp;gt;
        &lt;/b:if&gt;
        &lt;div class='post-outer'&gt;
        &lt;b:include data='post' name='post'/&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:if cond='data:post.showThreadedComments'&gt;
            &lt;b:include data='post' name='threaded_comments'/&gt;
          &lt;b:else/&gt;
            &lt;b:include data='post' name='comments'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;b:if cond='data:post.showThreadedComments'&gt;
            &lt;b:include data='post' name='threaded_comments'/&gt;
          &lt;b:else/&gt;
            &lt;b:include data='post' name='comments'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
        &lt;/div&gt;
        &lt;b:if cond='data:post.includeAd'&gt;
          &lt;b:if cond='data:post.isFirstPost'&gt;
            &lt;data:defaultAdEnd/&gt;
          &lt;b:else/&gt;
            &lt;data:adEnd/&gt;
          &lt;/b:if&gt;
          &lt;div class='inline-ad'&gt;
            &lt;data:adCode/&gt;
          &lt;/div&gt;
          &lt;data:adStart/&gt;
        &lt;/b:if&gt;
      &lt;/b:loop&gt;
      &lt;b:if cond='data:numPosts != 0'&gt;
        &amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;
      &lt;/b:if&gt;
      &lt;data:adEnd/&gt;
    &lt;/div&gt;

&lt;div style='clear: both;'/&gt;
&lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
&lt;!-- navigation --&gt;
&lt;b:include name='nextprev'/&gt;
&lt;/b:if&gt;

    &lt;!-- feed links --&gt;

    &lt;b:if cond='data:top.showStars'&gt;
      &lt;script src='//www.google.com/jsapi' type='text/javascript'/&gt;
      &lt;script type='text/javascript'&gt;
        google.load(&amp;quot;annotations&amp;quot;, &amp;quot;1&amp;quot;, {&amp;quot;locale&amp;quot;: &amp;quot;&lt;data:top.languageCode/&gt;&amp;quot;});
        function initialize() {
          google.annotations.setApplicationId(&lt;data:top.blogspotReviews/&gt;);
          google.annotations.createAll();
          google.annotations.fetch();
        }
        google.setOnLoadCallback(initialize);
      &lt;/script&gt;
    &lt;/b:if&gt;

  &lt;b:else/&gt;
    &lt;b:include name='mobile-main'/&gt;
  &lt;/b:if&gt;

  &lt;b:if cond='data:top.showDummy'&gt;
    &lt;data:top.dummyBootstrap/&gt;
  &lt;/b:if&gt;

&lt;/b:includable&gt;
    &lt;b:includable id='backlinkDeleteIcon' var='backlink'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:backlink.adminClass'&gt;
    &lt;a expr:href='data:backlink.deleteUrl' expr:title='data:top.deleteBacklinkMsg'&gt;
      &lt;img src='https://resources.blogblog.com/img/icon_delete13.gif'/&gt;
    &lt;/a&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='backlinks' var='post'&gt;
  &lt;a name='links'/&gt;&lt;h4&gt;&lt;data:post.backlinksLabel/&gt;&lt;/h4&gt;
  &lt;b:if cond='data:post.numBacklinks != 0'&gt;
    &lt;dl class='comments-block' id='comments-block'&gt;
      &lt;b:loop values='data:post.backlinks' var='backlink'&gt;
        &lt;div class='collapsed-backlink backlink-control'&gt;
          &lt;dt class='comment-title'&gt;
            &lt;span class='backlink-toggle-zippy'&gt;&amp;#160;&lt;/span&gt;
            &lt;a expr:href='data:backlink.url' rel='nofollow'&gt;&lt;data:backlink.title/&gt;&lt;/a&gt;
            &lt;b:include data='backlink' name='backlinkDeleteIcon'/&gt;
          &lt;/dt&gt;
          &lt;dd class='comment-body collapseable'&gt;
            &lt;data:backlink.snippet/&gt;
          &lt;/dd&gt;
          &lt;dd class='comment-footer collapseable'&gt;
            &lt;span class='comment-author'&gt;&lt;data:post.authorLabel/&gt; &lt;data:backlink.author/&gt;&lt;/span&gt;
            &lt;span class='comment-timestamp'&gt;&lt;data:post.timestampLabel/&gt; &lt;data:backlink.timestamp/&gt;&lt;/span&gt;
          &lt;/dd&gt;
        &lt;/div&gt;
      &lt;/b:loop&gt;
    &lt;/dl&gt;
  &lt;/b:if&gt;
  &lt;p class='comment-footer'&gt;
    &lt;a class='comment-link' expr:href='data:post.createLinkUrl' expr:id='data:widget.instanceId + &amp;quot;_backlinks-create-link&amp;quot;' target='_blank'&gt;&lt;data:post.createLinkLabel/&gt;&lt;/a&gt;
  &lt;/p&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;h4 id='comment-post-message'&gt;
        &lt;a expr:id='data:widget.instanceId + &amp;quot;_comment-editor-toggle-link&amp;quot;' href='javascript:void(0)'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' expr:height='data:cmtIframeInitialHeight' frameborder='0' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;h4 id='comment-post-message'&gt;&lt;data:postCommentMsg/&gt;&lt;/h4&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' expr:height='data:cmtIframeInitialHeight' frameborder='0' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='commentDeleteIcon' var='comment'&gt;
  &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:comment.adminClass'&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div class='goog-toggle-button'&gt;
        &lt;div class='goog-inline-block comment-action-icon'/&gt;
      &lt;/div&gt;
    &lt;b:else/&gt;
      &lt;a class='comment-delete' expr:href='data:comment.deleteUrl' expr:title='data:top.deleteCommentMsg'&gt;
        &lt;img src='https://resources.blogblog.com/img/icon_delete13.gif'/&gt;
      &lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/span&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='comment_count_picker' var='post'&gt;
  &lt;b:if cond='data:post.commentSource == 1'&gt;
    &lt;span class='cmt_count_iframe_holder' expr:data-count='data:post.numComments' expr:data-onclick='data:post.addCommentOnclick' expr:data-post-url='data:post.url' expr:data-url='data:post.url.canonical.http'&gt;
    &lt;/span&gt;
  &lt;b:else/&gt;
    &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;
      &lt;data:post.commentLabelFull/&gt;:
    &lt;/a&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='comment_picker' var='post'&gt;
  &lt;b:if cond='data:post.commentSource == 1'&gt;
    &lt;b:include data='post' name='iframe_comments'/&gt;
  &lt;b:elseif cond='data:post.showThreadedComments'/&gt;
    &lt;b:include data='post' name='threaded_comments'/&gt;
  &lt;b:else/&gt;
    &lt;b:include data='post' name='comments'/&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;b:if cond='data:post.allowComments'&gt;
      &lt;h4&gt;
        &lt;b:if cond='data:post.numComments == 1'&gt;
          1 &lt;data:commentLabel/&gt;:
        &lt;b:else/&gt;
          &lt;data:post.numComments/&gt; &lt;data:commentLabelPlural/&gt;:
        &lt;/b:if&gt;
      &lt;/h4&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;&lt;data:post.oldestLinkText/&gt;&lt;/a&gt;
          &amp;#160;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;&lt;data:post.olderLinkText/&gt;&lt;/a&gt;
          &amp;#160;
          &lt;data:post.commentRangeText/&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;&lt;data:post.newerLinkText/&gt;&lt;/a&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;&lt;data:post.newestLinkText/&gt;&lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;div expr:id='data:widget.instanceId + &amp;quot;_comments-block-wrapper&amp;quot;'&gt;
        &lt;dl expr:class='data:post.avatarIndentClass' id='comments-block'&gt;
          &lt;b:loop values='data:post.comments' var='comment'&gt;
            &lt;dt expr:class='&amp;quot;comment-author &amp;quot; + data:comment.authorClass' expr:id='data:comment.anchorName'&gt;
              &lt;b:if cond='data:comment.favicon'&gt;
                &lt;img expr:src='data:comment.favicon' height='16px' style='margin-bottom:-2px;' width='16px'/&gt;
              &lt;/b:if&gt;
              &lt;a expr:name='data:comment.anchorName'/&gt;
              &lt;b:if cond='data:blog.enabledCommentProfileImages'&gt;
                &lt;data:comment.authorAvatarImage/&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:comment.authorUrl'&gt;
                &lt;a expr:href='data:comment.authorUrl' rel='nofollow'&gt;&lt;data:comment.author/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;data:comment.author/&gt;
              &lt;/b:if&gt;
              &lt;data:commentPostedByMsg/&gt;
            &lt;/dt&gt;
            &lt;dd class='comment-body' expr:id='data:widget.instanceId + data:comment.cmtBodyIdPostfix'&gt;
              &lt;b:if cond='data:comment.isDeleted'&gt;
                &lt;span class='deleted-comment'&gt;&lt;data:comment.body/&gt;&lt;/span&gt;
              &lt;b:else/&gt;
                &lt;p&gt;
                  &lt;data:comment.body/&gt;
                &lt;/p&gt;
              &lt;/b:if&gt;
            &lt;/dd&gt;
            &lt;dd class='comment-footer'&gt;
              &lt;span class='comment-timestamp'&gt;
                &lt;a expr:href='data:comment.url' title='comment permalink'&gt;
                  &lt;data:comment.timestamp/&gt;
                &lt;/a&gt;
                &lt;b:include data='comment' name='commentDeleteIcon'/&gt;
              &lt;/span&gt;
            &lt;/dd&gt;
          &lt;/b:loop&gt;
        &lt;/dl&gt;
      &lt;/div&gt;

      &lt;b:if cond='data:post.commentPagingRequired'&gt;
        &lt;span class='paging-control-container'&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.oldestLinkUrl'&gt;
            &lt;data:post.oldestLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.oldLinkClass' expr:href='data:post.olderLinkUrl'&gt;
            &lt;data:post.olderLinkText/&gt;
          &lt;/a&gt;
          &amp;#160;
          &lt;data:post.commentRangeText/&gt;
          &amp;#160;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newerLinkUrl'&gt;
            &lt;data:post.newerLinkText/&gt;
          &lt;/a&gt;
          &lt;a expr:class='data:post.newLinkClass' expr:href='data:post.newestLinkUrl'&gt;
            &lt;data:post.newestLinkText/&gt;
          &lt;/a&gt;
        &lt;/span&gt;
      &lt;/b:if&gt;

      &lt;p class='comment-footer'&gt;
        &lt;b:if cond='data:post.embedCommentForm'&gt;
          &lt;b:if cond='data:post.allowNewComments'&gt;
            &lt;b:include data='post' name='comment-form'/&gt;
          &lt;b:else/&gt;
            &lt;data:post.noNewCommentsText/&gt;
          &lt;/b:if&gt;
        &lt;b:else/&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;

      &lt;/p&gt;
    &lt;/b:if&gt;
    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
       &lt;b:if cond='data:post.showBacklinks'&gt;
         &lt;b:include data='post' name='backlinks'/&gt;
       &lt;/b:if&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='feedLinks'&gt;
  &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt; &lt;!-- Blog feed links --&gt;
    &lt;b:if cond='data:feedLinks'&gt;
      &lt;div class='blog-feeds'&gt;
        &lt;b:include data='feedLinks' name='feedLinksBody'/&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

  &lt;b:else/&gt; &lt;!--Post feed links --&gt;
    &lt;div class='post-feeds'&gt;
      &lt;b:loop values='data:posts' var='post'&gt;
        &lt;b:include cond='data:post.allowComments and data:post.feedLinks' data='post.feedLinks' name='feedLinksBody'/&gt;
      &lt;/b:loop&gt;
    &lt;/div&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='feedLinksBody' var='links'&gt;
  &lt;div class='feed-links'&gt;
  &lt;data:feedLinksMsg/&gt;
  &lt;b:loop values='data:links' var='f'&gt;
     &lt;a class='feed-link' expr:href='data:f.url' expr:type='data:f.mimeType' target='_blank'&gt;&lt;data:f.name/&gt; (&lt;data:f.feedType/&gt;)&lt;/a&gt;
  &lt;/b:loop&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='iframe_comments' var='post'&gt;

  &lt;b:if cond='data:post.allowComments'&gt;
    &lt;script expr:src='data:post.commentSrc' type='text/javascript'/&gt;
    &lt;div class='cmt_iframe_holder'/&gt;

    &lt;b:if cond='data:post.embedCommentForm == &amp;quot;false&amp;quot;'&gt;
      &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;data:postCommentMsg/&gt;&lt;/a&gt;
    &lt;/b:if&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='mobile-index-post' var='post'&gt;
  &lt;div class='mobile-date-outer date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;div class='date-header'&gt;
        &lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-post-outer'&gt;
      &lt;a expr:href='data:post.url'&gt;
        &lt;h3 class='mobile-index-title entry-title'&gt;
          &lt;data:post.title/&gt;
        &lt;/h3&gt;

        &lt;div class='mobile-index-arrow'&gt;&amp;amp;rsaquo;&lt;/div&gt;

        &lt;div class='mobile-index-contents'&gt;
          &lt;b:if cond='data:post.thumbnailUrl'&gt;
            &lt;div class='mobile-index-thumbnail'&gt;
              &lt;div class='Image'&gt;
                &lt;img expr:src='data:post.thumbnailUrl'/&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/b:if&gt;

          &lt;div class='post-body'&gt;
            &lt;b:if cond='data:post.snippet'&gt;&lt;data:post.snippet/&gt;&lt;/b:if&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;div style='clear: both;'/&gt;
      &lt;/a&gt;

      &lt;div class='mobile-index-comment'&gt;
        &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:if cond='data:post.allowComments'&gt;
            &lt;b:if cond='data:post.numComments != 0'&gt;
              &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;b:if cond='data:post.numComments == 1'&gt;1 &lt;data:top.commentLabel/&gt;&lt;b:else/&gt;&lt;data:post.numComments/&gt; &lt;data:top.commentLabelPlural/&gt;&lt;/b:if&gt;&lt;/a&gt;
            &lt;/b:if&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='mobile-main' var='top'&gt;
    &lt;!-- posts --&gt;
    &lt;div class='blog-posts hfeed'&gt;

      &lt;b:include data='top' name='status-message'/&gt;

      &lt;b:if cond='data:blog.pageType == &amp;quot;index&amp;quot;'&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-index-post'/&gt;
        &lt;/b:loop&gt;
      &lt;b:else/&gt;
        &lt;b:loop values='data:posts' var='post'&gt;
          &lt;b:include data='post' name='mobile-post'/&gt;
        &lt;/b:loop&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;

   &lt;b:include name='mobile-nextprev'/&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='mobile-nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&amp;amp;lsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;div class='mobile-link-button' id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&amp;amp;rsaquo;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div class='mobile-link-button' id='blog-pager-home-link'&gt;
    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

    &lt;div class='mobile-desktop-link'&gt;
      &lt;a class='home-link' expr:href='data:desktopLinkUrl'&gt;&lt;data:desktopLinkMsg/&gt;&lt;/a&gt;
    &lt;/div&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='mobile-post' var='post'&gt;
  &lt;div class='date-outer'&gt;
    &lt;b:if cond='data:post.dateHeader'&gt;
      &lt;h2 class='date-header'&gt;&lt;span&gt;&lt;data:post.dateHeader/&gt;&lt;/span&gt;&lt;/h2&gt;
    &lt;/b:if&gt;
    &lt;div class='date-posts'&gt;
      &lt;div class='post-outer'&gt;

        &lt;div class='post hentry uncustomized-post-template'&gt;
          &lt;a expr:name='data:post.id'/&gt;
          &lt;b:if cond='data:post.title'&gt;
            &lt;h3 class='post-title entry-title'&gt;
              &lt;b:if cond='data:post.link'&gt;
                &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
              &lt;b:else/&gt;
                &lt;b:if cond='data:post.url'&gt;
                  &lt;b:if cond='data:blog.url != data:post.url'&gt;
                    &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
                  &lt;b:else/&gt;
                    &lt;data:post.title/&gt;
                  &lt;/b:if&gt;
                &lt;b:else/&gt;
                  &lt;data:post.title/&gt;
                &lt;/b:if&gt;
              &lt;/b:if&gt;
            &lt;/h3&gt;
          &lt;/b:if&gt;

          &lt;div class='post-header'&gt;
            &lt;div class='post-header-line-1'/&gt;
          &lt;/div&gt;

          &lt;div class='post-body entry-content' expr:id='&amp;quot;post-body-&amp;quot; + data:post.id'&gt;
            &lt;data:post.body/&gt;
            &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
          &lt;/div&gt;

          &lt;div class='post-footer'&gt;
            &lt;div class='post-footer-line post-footer-line-1'&gt;
              &lt;span class='post-author vcard'&gt;
                &lt;b:if cond='data:top.showAuthor'&gt;
                  &lt;b:if cond='data:post.authorProfileUrl'&gt;
                    &lt;span class='fn'&gt;
                      &lt;a expr:href='data:post.authorProfileUrl' rel='author' title='author profile'&gt;
                        &lt;data:post.author/&gt;
                      &lt;/a&gt;
                    &lt;/span&gt;
                  &lt;b:else/&gt;
                    &lt;span class='fn'&gt;&lt;data:post.author/&gt;&lt;/span&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-timestamp'&gt;
                &lt;b:if cond='data:top.showTimestamp'&gt;
                  &lt;data:top.timestampLabel/&gt;
                  &lt;b:if cond='data:post.url'&gt;
                    &lt;a class='timestamp-link' expr:href='data:post.url' rel='bookmark' title='permanent link'&gt;&lt;abbr class='published' expr:title='data:post.timestampISO8601'&gt;&lt;data:post.timestamp/&gt;&lt;/abbr&gt;&lt;/a&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;

              &lt;span class='post-comment-link'&gt;
                &lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
                  &lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
                    &lt;b:if cond='data:post.allowComments'&gt;
                      &lt;a class='comment-link' expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;b:if cond='data:post.numComments == 1'&gt;1 &lt;data:top.commentLabel/&gt;&lt;b:else/&gt;&lt;data:post.numComments/&gt; &lt;data:top.commentLabelPlural/&gt;&lt;/b:if&gt;&lt;/a&gt;
                    &lt;/b:if&gt;
                  &lt;/b:if&gt;
                &lt;/b:if&gt;
              &lt;/span&gt;
            &lt;/div&gt;

            &lt;div class='post-footer-line post-footer-line-2'&gt;
              &lt;b:if cond='data:top.showMobileShare'&gt;
                &lt;div class='mobile-link-button goog-inline-block' id='mobile-share-button'&gt;
                  &lt;a href='javascript:void(0);'&gt;&lt;data:shareMsg/&gt;&lt;/a&gt;
                &lt;/div&gt;
              &lt;/b:if&gt;
              &lt;b:if cond='data:top.showDummy'&gt;
                &lt;div class='goog-inline-block dummy-container'&gt;&lt;data:post.dummyTag/&gt;&lt;/div&gt;
              &lt;/b:if&gt;
            &lt;/div&gt;

          &lt;/div&gt;
        &lt;/div&gt;

        &lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;
          &lt;b:if cond='data:post.showThreadedComments'&gt;
            &lt;b:include data='post' name='threaded_comments'/&gt;
          &lt;b:else/&gt;
            &lt;b:include data='post' name='comments'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
        &lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
          &lt;b:if cond='data:post.showThreadedComments'&gt;
            &lt;b:include data='post' name='threaded_comments'/&gt;
          &lt;b:else/&gt;
            &lt;b:include data='post' name='comments'/&gt;
          &lt;/b:if&gt;
        &lt;/b:if&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='nextprev'&gt;
  &lt;div class='blog-pager' id='blog-pager'&gt;
    &lt;b:if cond='data:newerPageUrl'&gt;
      &lt;span id='blog-pager-newer-link'&gt;
      &lt;a class='blog-pager-newer-link' expr:href='data:newerPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-newer-link&amp;quot;' expr:title='data:newerPageTitle'&gt;&lt;data:newerPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;b:if cond='data:olderPageUrl'&gt;
      &lt;span id='blog-pager-older-link'&gt;
      &lt;a class='blog-pager-older-link' expr:href='data:olderPageUrl' expr:id='data:widget.instanceId + &amp;quot;_blog-pager-older-link&amp;quot;' expr:title='data:olderPageTitle'&gt;&lt;data:olderPageTitle/&gt;&lt;/a&gt;
      &lt;/span&gt;
    &lt;/b:if&gt;

    &lt;a class='home-link' expr:href='data:blog.homepageUrl'&gt;&lt;data:homeMsg/&gt;&lt;/a&gt;

    &lt;b:if cond='data:mobileLinkUrl'&gt;
      &lt;div class='blog-mobile-link'&gt;
        &lt;a expr:href='data:mobileLinkUrl'&gt;&lt;data:mobileLinkMsg/&gt;&lt;/a&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

  &lt;/div&gt;
  &lt;div class='clear'/&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='post' var='post'&gt;
&lt;article class='post hentry'&gt;

&lt;a expr:name='data:post.id'/&gt;

&lt;h2 class='post-title entry-title'&gt;&lt;span class='post_title_icon'/&gt;
    &lt;b:if cond='data:post.link'&gt;
       &lt;a expr:href='data:post.link'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
     &lt;b:else/&gt;
        &lt;b:if cond='data:post.url'&gt;
          &lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;
        &lt;b:else/&gt;
          &lt;data:post.title/&gt;
        &lt;/b:if&gt;
    &lt;/b:if&gt;
&lt;/h2&gt;

&lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;	
&lt;div class='bpostmeta'&gt;
    &lt;span&gt;&lt;i class='fa fa-clock-o'/&gt; &lt;data:post.timestamp/&gt;&lt;/span&gt;
    &lt;span&gt;&lt;i class='fa fa-user'/&gt; Posted by &lt;data:post.author/&gt;&lt;/span&gt;
    &lt;b:if cond='data:post.labels'&gt;&lt;span&gt;&lt;i class='fa fa-bookmark'/&gt; &lt;b:loop values='data:post.labels' var='label'&gt;&lt;a expr:href='data:label.url' rel='tag'&gt;&lt;data:label.name/&gt;&lt;/a&gt;&lt;b:if cond='data:label.isLast != &amp;quot;true&amp;quot;'&gt;, &lt;/b:if&gt;&lt;/b:loop&gt;&lt;/span&gt;&lt;/b:if&gt;
    &lt;b:if cond='data:post.allowComments'&gt;&lt;span&gt;&lt;i class='fa fa-comments'/&gt; &lt;a expr:href='data:post.addCommentUrl' expr:onclick='data:post.addCommentOnclick'&gt;&lt;b:if cond='data:post.numComments == 0'&gt;No comments&lt;/b:if&gt;&lt;b:if cond='data:post.numComments == 1'&gt;1 comment&lt;/b:if&gt;&lt;b:if cond='data:post.numComments &amp;gt;= 2'&gt;&lt;data:post.numComments/&gt; comments&lt;/b:if&gt;&lt;/a&gt;&lt;/span&gt;&lt;/b:if&gt;
&lt;/div&gt;
&lt;/b:if&gt;

&lt;div class='post-header-line-1'/&gt;

&lt;div class='post-body entry-content clearfix'&gt;
&lt;div class='entry-colors'&gt;
  &lt;div class='color_col_1'/&gt;
  &lt;div class='color_col_2'/&gt;
  &lt;div class='color_col_3'/&gt;
&lt;/div&gt;
&lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
&lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
&lt;div expr:id='&amp;quot;summary&amp;quot; + data:post.id'&gt;&lt;data:post.body/&gt;&lt;/div&gt;
&lt;script type='text/javascript'&gt;createSummaryAndThumb(&amp;quot;summary&lt;data:post.id/&gt;&amp;quot;);&lt;/script&gt;
&lt;/b:if&gt;
&lt;/b:if&gt;
&lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;&lt;data:post.body/&gt;&lt;/b:if&gt;

&lt;b:if cond='data:blog.pageType == &amp;quot;static_page&amp;quot;'&gt;&lt;data:post.body/&gt;&lt;/b:if&gt;

&lt;b:if cond='data:blog.pageType != &amp;quot;static_page&amp;quot;'&gt;
&lt;b:if cond='data:blog.pageType != &amp;quot;item&amp;quot;'&gt;
&lt;div style='float:right;padding-right:0px;margin-top:10px;'&gt;
&lt;a class='more-link' expr:href='data:post.url'&gt;Read More&lt;/a&gt;
&lt;/div&gt;
&lt;/b:if&gt;
&lt;/b:if&gt;

&lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
&lt;div style='clear:both;'/&gt;
&lt;div class='post-share-buttons'&gt;
&lt;b:include data='post' name='shareButtons'/&gt;
&lt;/div&gt;
&lt;span class='reaction-buttons'&gt;
&lt;b:if cond='data:top.showReactions'&gt;
&lt;table border='0' cellpadding='0' width='100%'&gt;&lt;tr&gt;
&lt;td style='font-size:12px;padding-top:2px;' valign='top'&gt;&lt;span class='reactions-label'&gt;&lt;data:top.reactionsLabel/&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;iframe allowtransparency='true' class='reactions-iframe' expr:src='data:post.reactionsUrl' frameborder='0' name='reactions' scrolling='no'/&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;/b:if&gt;
&lt;/span&gt;
&lt;/b:if&gt;

      &lt;div style='clear: both;'/&gt; &lt;!-- clear for photos floats --&gt;
&lt;/div&gt;

&lt;/article&gt;
&lt;div style='clear: both;'/&gt;

&lt;b:if cond='data:blog.pageType == &amp;quot;item&amp;quot;'&gt;
&lt;!-- navigation --&gt;
&lt;b:include name='nextprev'/&gt;
&lt;/b:if&gt;

&lt;/b:includable&gt;
    &lt;b:includable id='postQuickEdit' var='post'&gt;
  &lt;b:if cond='data:post.editUrl'&gt;
    &lt;span expr:class='&amp;quot;item-control &amp;quot; + data:post.adminClass'&gt;
      &lt;a expr:href='data:post.editUrl' expr:title='data:top.editPostMsg'&gt;
        &lt;img alt='' class='icon-action' height='18' src='https://resources.blogblog.com/img/icon18_edit_allbkg.gif' width='18'/&gt;
      &lt;/a&gt;
    &lt;/span&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='shareButtons' var='post'&gt;
  &lt;b:if cond='data:top.showEmailButton'&gt;&lt;a class='goog-inline-block share-button sb-email' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=email&amp;quot;' expr:title='data:top.emailThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.emailThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showBlogThisButton'&gt;&lt;a class='goog-inline-block share-button sb-blog' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=blog&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=270,width=475\&amp;quot;); return false;&amp;quot;' expr:title='data:top.blogThisMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.blogThisMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showTwitterButton'&gt;&lt;a class='goog-inline-block share-button sb-twitter' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=twitter&amp;quot;' expr:title='data:top.shareToTwitterMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToTwitterMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showFacebookButton'&gt;&lt;a class='goog-inline-block share-button sb-facebook' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=facebook&amp;quot;' expr:onclick='&amp;quot;window.open(this.href, \&amp;quot;_blank\&amp;quot;, \&amp;quot;height=430,width=640\&amp;quot;); return false;&amp;quot;' expr:title='data:top.shareToFacebookMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToFacebookMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showOrkutButton'&gt;&lt;a class='goog-inline-block share-button sb-orkut' expr:href='data:post.sharePostUrl + &amp;quot;&amp;amp;target=orkut&amp;quot;' expr:title='data:top.shareToOrkutMsg' target='_blank'&gt;&lt;span class='share-button-link-text'&gt;&lt;data:top.shareToOrkutMsg/&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b:if&gt;&lt;b:if cond='data:top.showDummy'&gt;&lt;div class='goog-inline-block dummy-container'&gt;&lt;data:post.dummyTag/&gt;&lt;/div&gt;&lt;/b:if&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='status-message'&gt;
  &lt;b:if cond='data:navMessage'&gt;
  &lt;div class='status-msg-wrap'&gt;
    &lt;div class='status-msg-body'&gt;
      &lt;data:navMessage/&gt;
    &lt;/div&gt;
    &lt;div class='status-msg-border'&gt;
      &lt;div class='status-msg-bg'&gt;
        &lt;div class='status-msg-hidden'&gt;&lt;data:navMessage/&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div style='clear: both;'/&gt;
  &lt;/b:if&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='threaded-comment-form' var='post'&gt;
  &lt;div class='comment-form'&gt;
    &lt;a name='comment-form'/&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' expr:height='data:cmtIframeInitialHeight' frameborder='0' id='comment-editor' name='comment-editor' src='' style='display: none' width='100%'/&gt;
    &lt;b:else/&gt;
      &lt;p&gt;&lt;data:blogCommentMessage/&gt;&lt;/p&gt;
      &lt;data:blogTeamBlogMessage/&gt;
      &lt;a expr:href='data:post.commentFormIframeSrc' id='comment-editor-src'/&gt;
      &lt;iframe allowtransparency='true' class='blogger-iframe-colorize blogger-comment-from-post' expr:height='data:cmtIframeInitialHeight' frameborder='0' id='comment-editor' name='comment-editor' src='' width='100%'/&gt;
    &lt;/b:if&gt;
    &lt;data:post.cmtfpIframe/&gt;
    &lt;script type='text/javascript'&gt;
      BLOG_CMT_createIframe(&amp;#39;&lt;data:post.appRpcRelayPath/&gt;&amp;#39;);
    &lt;/script&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='threaded_comment_js' var='post'&gt;
  &lt;script async='async' expr:src='data:post.commentSrc' type='text/javascript'/&gt;

  &lt;script type='text/javascript'&gt;
    (function() {
      var items = &lt;data:post.commentJso/&gt;;
      var msgs = &lt;data:post.commentMsgs/&gt;;
      var config = &lt;data:post.commentConfig/&gt;;

// &lt;![CDATA[
      var cursor = null;
      if (items &amp;&amp; items.length &gt; 0) {
        cursor = parseInt(items[items.length - 1].timestamp) + 1;
      }

      var bodyFromEntry = function(entry) {
        if (entry.gd$extendedProperty) {
          for (var k in entry.gd$extendedProperty) {
            if (entry.gd$extendedProperty[k].name == 'blogger.contentRemoved') {
              return '&lt;span class="deleted-comment"&gt;' + entry.content.$t + '&lt;/span&gt;';
            }
          }
        }
        return entry.content.$t;
      }

      var parse = function(data) {
        cursor = null;
        var comments = [];
        if (data &amp;&amp; data.feed &amp;&amp; data.feed.entry) {
          for (var i = 0, entry; entry = data.feed.entry[i]; i++) {
            var comment = {};
            // comment ID, parsed out of the original id format
            var id = /blog-(\d+).post-(\d+)/.exec(entry.id.$t);
            comment.id = id ? id[2] : null;
            comment.body = bodyFromEntry(entry);
            comment.timestamp = Date.parse(entry.published.$t) + '';
            if (entry.author &amp;&amp; entry.author.constructor === Array) {
              var auth = entry.author[0];
              if (auth) {
                comment.author = {
                  name: (auth.name ? auth.name.$t : undefined),
                  profileUrl: (auth.uri ? auth.uri.$t : undefined),
                  avatarUrl: (auth.gd$image ? auth.gd$image.src : undefined)
                };
              }
            }
            if (entry.link) {
              if (entry.link[2]) {
                comment.link = comment.permalink = entry.link[2].href;
              }
              if (entry.link[3]) {
                var pid = /.*comments\/default\/(\d+)\?.*/.exec(entry.link[3].href);
                if (pid &amp;&amp; pid[1]) {
                  comment.parentId = pid[1];
                }
              }
            }
            comment.deleteclass = 'item-control blog-admin';
            if (entry.gd$extendedProperty) {
              for (var k in entry.gd$extendedProperty) {
                if (entry.gd$extendedProperty[k].name == 'blogger.itemClass') {
                  comment.deleteclass += ' ' + entry.gd$extendedProperty[k].value;
                }
              }
            }
            comments.push(comment);
          }
        }
        return comments;
      };

      var paginator = function(callback) {
        if (hasMore()) {
          var url = config.feed + '?alt=json&amp;v=2&amp;orderby=published&amp;reverse=false&amp;max-results=50';
          if (cursor) {
            url += '&amp;published-min=' + new Date(cursor).toISOString();
          }
          window.bloggercomments = function(data) {
            var parsed = parse(data);
            cursor = parsed.length &lt; 50 ? null
                : parseInt(parsed[parsed.length - 1].timestamp) + 1
            callback(parsed);
            window.bloggercomments = null;
          }
          url += '&amp;callback=bloggercomments';
          var script = document.createElement('script');
          script.type = 'text/javascript';
          script.src = url;
          document.getElementsByTagName('head')[0].appendChild(script);
        }
      };
      var hasMore = function() {
        return !!cursor;
      };
      var getMeta = function(key, comment) {
        if ('iswriter' == key) {
          var matches = !!comment.author
              &amp;&amp; comment.author.name == config.authorName
              &amp;&amp; comment.author.profileUrl == config.authorUrl;
          return matches ? 'true' : '';
        } else if ('deletelink' == key) {
          return config.baseUri + '/delete-comment.g?blogID='
               + config.blogId + '&amp;postID=' + comment.id;
        } else if ('deleteclass' == key) {
          return comment.deleteclass;
        }
        return '';
      };

      var replybox = null;
      var replyUrlParts = null;
      var replyParent = undefined;

      var onReply = function(commentId, domId) {
        if (replybox == null) {
          // lazily cache replybox, and adjust to suit this style:
          replybox = document.getElementById('comment-editor');
          if (replybox != null) {
            replybox.height = '250px';
            replybox.style.display = 'block';
            replyUrlParts = replybox.src.split('#');
          }
        }
        if (replybox &amp;&amp; (commentId !== replyParent)) {
          document.getElementById(domId).insertBefore(replybox, null);
          replybox.src = replyUrlParts[0]
              + (commentId ? '&amp;parentID=' + commentId : '')
              + '#' + replyUrlParts[1];
          replyParent = commentId;
        }
      };

      var hash = (window.location.hash || '#').substring(1);
      var startThread, targetComment;
      if (/^comment-form_/.test(hash)) {
        startThread = hash.substring('comment-form_'.length);
      } else if (/^c[0-9]+$/.test(hash)) {
        targetComment = hash.substring(1);
      }

      // Configure commenting API:
      var configJso = {
        'maxDepth': config.maxThreadDepth
      };
      var provider = {
        'id': config.postId,
        'data': items,
        'loadNext': paginator,
        'hasMore': hasMore,
        'getMeta': getMeta,
        'onReply': onReply,
        'rendered': true,
        'initComment': targetComment,
        'initReplyThread': startThread,
        'config': configJso,
        'messages': msgs
      };

      var render = function() {
        if (window.goog &amp;&amp; window.goog.comments) {
          var holder = document.getElementById('comment-holder');
          window.goog.comments.render(holder, provider);
        }
      };

      // render now, or queue to render when library loads:
      if (window.goog &amp;&amp; window.goog.comments) {
        render();
      } else {
        window.goog = window.goog || {};
        window.goog.comments = window.goog.comments || {};
        window.goog.comments.loadQueue = window.goog.comments.loadQueue || [];
        window.goog.comments.loadQueue.push(render);
      }
    })();
// ]]&gt;
  &lt;/script&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='threaded_comments' var='post'&gt;
  &lt;div class='comments' id='comments'&gt;
    &lt;a name='comments'/&gt;
    &lt;h4&gt;&lt;data:post.commentLabelFull/&gt;:&lt;/h4&gt;

    &lt;div class='comments-content'&gt;
      &lt;b:include cond='data:post.embedCommentForm' data='post' name='threaded_comment_js'/&gt;
      &lt;div id='comment-holder'&gt;
         &lt;data:post.commentHtml/&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;p class='comment-footer'&gt;
      &lt;b:if cond='data:post.allowNewComments'&gt;
        &lt;b:include data='post' name='threaded-comment-form'/&gt;
      &lt;b:else/&gt;
        &lt;data:post.noNewCommentsText/&gt;
      &lt;/b:if&gt;
    &lt;/p&gt;

    &lt;b:if cond='data:showCmtPopup'&gt;
      &lt;div id='comment-popup'&gt;
        &lt;iframe allowtransparency='true' frameborder='0' id='comment-actions' name='comment-actions' scrolling='no'&gt;
        &lt;/iframe&gt;
      &lt;/div&gt;
    &lt;/b:if&gt;

    &lt;div id='backlinks-container'&gt;
    &lt;div expr:id='data:widget.instanceId + &amp;quot;_backlinks-container&amp;quot;'&gt;
      &lt;b:include cond='data:post.showBacklinks' data='post' name='backlinks'/&gt;
    &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
  &lt;/b:widget&gt;
&lt;/b:section&gt;
&lt;/div&gt;
&lt;!-- section content --&gt;

&lt;!-- begin aside --&gt;
&lt;aside&gt;
&lt;!-- Sidebar Widgets Area --&gt;
&lt;b:section class='sidebar' id='sidebartop' preferred='yes'&gt;
  &lt;b:widget id='PageList1' locked='false' title='Pages' type='PageList'&gt;
    &lt;b:widget-settings&gt;
      &lt;b:widget-setting name='pageListJson'&gt;&lt;![CDATA[{'home': {'href': 'http://www.lucidmotions.net/', 'title': 'Home', 'position': 0}, '8313311895403509721': {'href': 'http://www.lucidmotions.net/p/williamr.html', 'title': 'Resume', 'position': 1}, '7319328104247075820': {'href': 'http://www.lucidmotions.net/p/blog-page.html', 'title': 'Off the Shelf', 'position': 2}, '299037963309613008': {'href': 'http://www.lucidmotions.net/p/about.html', 'title': 'About Me', 'position': 3}}]]&gt;&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='homeTitle'&gt;Home&lt;/b:widget-setting&gt;
    &lt;/b:widget-settings&gt;
    &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;&lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;&lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
    &lt;b:if cond='data:mobile'&gt;
      &lt;select expr:id='data:widget.instanceId + &amp;quot;_select&amp;quot;'&gt;
        &lt;b:loop values='data:links' var='link'&gt;
          &lt;option b:whitespace='remove' expr:value='data:link.href'&gt;
            &lt;b:attr cond='data:link.isCurrentPage' name='selected' value='selected'/&gt;
            &lt;data:link.title/&gt;
          &lt;/option&gt;
        &lt;/b:loop&gt;
      &lt;/select&gt;
      &lt;span class='pagelist-arrow'&gt;&amp;amp;#9660;&lt;/span&gt;
    &lt;b:else/&gt;
      &lt;ul&gt;
        &lt;b:loop values='data:links' var='link'&gt;
          &lt;li&gt;
            &lt;b:class cond='data:link.isCurrentPage' name='selected'/&gt;
            &lt;a expr:href='data:link.href'&gt;&lt;data:link.title/&gt;&lt;/a&gt;
          &lt;/li&gt;
        &lt;/b:loop&gt;
      &lt;/ul&gt;
    &lt;/b:if&gt;
    &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
  &lt;/b:widget&gt;
  &lt;b:widget id='BlogArchive1' locked='false' title='Blog Archive' type='BlogArchive'&gt;
    &lt;b:widget-settings&gt;
      &lt;b:widget-setting name='showStyle'&gt;HIERARCHY&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='yearPattern'&gt;yyyy&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showWeekEnd'&gt;true&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='monthPattern'&gt;MMMM&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='dayPattern'&gt;MMM dd&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='weekPattern'&gt;MM/dd&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='chronological'&gt;false&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showPosts'&gt;true&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='frequency'&gt;MONTHLY&lt;/b:widget-setting&gt;
    &lt;/b:widget-settings&gt;
    &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div class='widget-content'&gt;
  &lt;div id='ArchiveList'&gt;
  &lt;div expr:id='data:widget.instanceId + &amp;quot;_ArchiveList&amp;quot;'&gt;
    &lt;b:include cond='data:style == &amp;quot;HIERARCHY&amp;quot;' data='data' name='interval'/&gt;
    &lt;b:include cond='data:style == &amp;quot;FLAT&amp;quot;' data='data' name='flat'/&gt;
    &lt;b:include cond='data:style == &amp;quot;MENU&amp;quot;' data='data' name='menu'/&gt;
  &lt;/div&gt;
  &lt;/div&gt;
  &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='flat' var='data'&gt;
  &lt;ul class='flat'&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;li class='archivedate'&gt;
        &lt;a expr:href='data:i.url'&gt;&lt;data:i.name/&gt;&lt;/a&gt; (&lt;data:i.post-count/&gt;)
      &lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='interval' var='intervalData'&gt;
  &lt;b:loop values='data:intervalData' var='interval'&gt;
    &lt;ul class='hierarchy'&gt;
      &lt;li expr:class='&amp;quot;archivedate &amp;quot; + data:interval.expclass'&gt;
        &lt;b:include cond='data:interval.toggleId' data='interval' name='toggle'/&gt;
        &lt;a class='post-count-link' expr:href='data:interval.url'&gt;
          &lt;data:interval.name/&gt;
        &lt;/a&gt;
        &lt;span class='post-count' dir='ltr'&gt;(&lt;data:interval.post-count/&gt;)&lt;/span&gt;
        &lt;b:include cond='data:interval.data' data='interval.data' name='interval'/&gt;
        &lt;b:include cond='data:interval.posts' data='interval.posts' name='posts'/&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/b:loop&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='menu' var='data'&gt;
  &lt;select expr:id='data:widget.instanceId + &amp;quot;_ArchiveMenu&amp;quot;'&gt;
    &lt;option value=''&gt;&lt;data:title/&gt;&lt;/option&gt;
    &lt;b:loop values='data:data' var='i'&gt;
      &lt;option expr:value='data:i.url'&gt;&lt;data:i.name/&gt; (&lt;data:i.post-count/&gt;)&lt;/option&gt;
    &lt;/b:loop&gt;
  &lt;/select&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='posts' var='posts'&gt;
  &lt;ul class='posts'&gt;
    &lt;b:loop values='data:posts' var='post'&gt;
      &lt;li&gt;&lt;a expr:href='data:post.url'&gt;&lt;data:post.title/&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/b:loop&gt;
  &lt;/ul&gt;
&lt;/b:includable&gt;
    &lt;b:includable id='toggle' var='interval'&gt;
  &lt;a class='toggle' href='javascript:void(0)'&gt;
    &lt;span expr:class='&amp;quot;zippy&amp;quot; + (data:interval.expclass == &amp;quot;expanded&amp;quot; ? &amp;quot; toggle-open&amp;quot; : &amp;quot;&amp;quot;)'&gt;
      &lt;b:if cond='data:interval.expclass == &amp;quot;expanded&amp;quot;'&gt;
        &amp;#9660;&amp;#160;
      &lt;b:elseif cond='data:blog.languageDirection == &amp;quot;rtl&amp;quot;'/&gt;
        &amp;#9668;&amp;#160;
      &lt;b:else/&gt;
        &amp;#9658;&amp;#160;
      &lt;/b:if&gt;
    &lt;/span&gt;
  &lt;/a&gt;
&lt;/b:includable&gt;
  &lt;/b:widget&gt;
  &lt;b:widget id='Navbar1' locked='true' title='Navbar' type='Navbar'&gt;
    &lt;b:includable id='main'&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
    function setAttributeOnload(object, attribute, val) {
      if(window.addEventListener) {
        window.addEventListener(&amp;#39;load&amp;#39;,
          function(){ object[attribute] = val; }, false);
      } else {
        window.attachEvent(&amp;#39;onload&amp;#39;, function(){ object[attribute] = val; });
      }
    }
  &amp;lt;/script&amp;gt;
&amp;lt;div id=&amp;quot;navbar-iframe-container&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://apis.google.com/js/plusone.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
      gapi.load(&amp;quot;gapi.iframes:gapi.iframes.style.bubble&amp;quot;, function() {
        if (gapi.iframes &amp;amp;&amp;amp; gapi.iframes.getContext) {
          gapi.iframes.getContext().openChild({
              url: &amp;#39;https://www.blogger.com/navbar.g?targetBlogID\x3d4707687462195457004\x26blogName\x3dLucid+Motions\x26publishMode\x3dPUBLISH_MODE_HOSTED\x26navbarType\x3dLIGHT\x26layoutType\x3dLAYOUTS\x26searchRoot\x3dhttp://www.lucidmotions.net/search\x26blogLocale\x3den\x26v\x3d2\x26homepageUrl\x3dhttp://www.lucidmotions.net/\x26vt\x3d5683408231905374511&amp;#39;,
              where: document.getElementById(&amp;quot;navbar-iframe-container&amp;quot;),
              id: &amp;quot;navbar-iframe&amp;quot;
          });
        }
      });
    &amp;lt;/script&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
(function() {
var script = document.createElement(&amp;#39;script&amp;#39;);
script.type = &amp;#39;text/javascript&amp;#39;;
script.src = &amp;#39;//pagead2.googlesyndication.com/pagead/js/google_top_exp.js&amp;#39;;
var head = document.getElementsByTagName(&amp;#39;head&amp;#39;)[0];
if (head) {
head.appendChild(script);
}})();
&amp;lt;/script&amp;gt;
&lt;/b:includable&gt;
  &lt;/b:widget&gt;
  &lt;b:widget id='Attribution1' locked='true' title='' type='Attribution'&gt;
    &lt;b:widget-settings&gt;
      &lt;b:widget-setting name='copyright'&gt;copyright: Lucid Motions&lt;/b:widget-setting&gt;
    &lt;/b:widget-settings&gt;
    &lt;b:includable id='main'&gt;
    &lt;div class='widget-content' style='text-align: center;'&gt;
      &lt;b:if cond='data:attribution != &amp;quot;&amp;quot;'&gt;
       &lt;data:attribution/&gt;
      &lt;/b:if&gt;
    &lt;/div&gt;

    &lt;b:include name='quickedit'/&gt;
  &lt;/b:includable&gt;
  &lt;/b:widget&gt;
  &lt;b:widget id='Label1' locked='false' title='Categories' type='Label'&gt;
    &lt;b:widget-settings&gt;
      &lt;b:widget-setting name='sorting'&gt;FREQUENCY&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='display'&gt;CLOUD&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='selectedLabelsList'/&gt;
      &lt;b:widget-setting name='showType'&gt;ALL&lt;/b:widget-setting&gt;
      &lt;b:widget-setting name='showFreqNumbers'&gt;false&lt;/b:widget-setting&gt;
    &lt;/b:widget-settings&gt;
    &lt;b:includable id='main'&gt;
  &lt;b:if cond='data:title != &amp;quot;&amp;quot;'&gt;
    &lt;h2&gt;&lt;data:title/&gt;&lt;/h2&gt;
  &lt;/b:if&gt;
  &lt;div expr:class='&amp;quot;widget-content &amp;quot; + data:display + &amp;quot;-label-widget-content&amp;quot;'&gt;
    &lt;b:if cond='data:display == &amp;quot;list&amp;quot;'&gt;
      &lt;ul&gt;
        &lt;b:loop values='data:labels' var='label'&gt;
          &lt;li&gt;
            &lt;b:if cond='data:blog.url == data:label.url'&gt;
              &lt;span expr:dir='data:blog.languageDirection'&gt;&lt;data:label.name/&gt;&lt;/span&gt;
            &lt;b:else/&gt;
              &lt;a expr:dir='data:blog.languageDirection' expr:href='data:label.url'&gt;&lt;data:label.name/&gt;&lt;/a&gt;
            &lt;/b:if&gt;
            &lt;b:if cond='data:showFreqNumbers'&gt;
              &lt;span dir='ltr'&gt;(&lt;data:label.count/&gt;)&lt;/span&gt;
            &lt;/b:if&gt;
          &lt;/li&gt;
        &lt;/b:loop&gt;
      &lt;/ul&gt;
    &lt;b:else/&gt;
      &lt;b:loop values='data:labels' var='label'&gt;
        &lt;span expr:class='&amp;quot;label-size label-size-&amp;quot; + data:label.cssSize'&gt;
          &lt;b:if cond='data:blog.url == data:label.url'&gt;
            &lt;span expr:dir='data:blog.languageDirection'&gt;&lt;data:label.name/&gt;&lt;/span&gt;
          &lt;b:else/&gt;
            &lt;a expr:dir='data:blog.languageDirection' expr:href='data:label.url'&gt;&lt;data:label.name/&gt;&lt;/a&gt;
          &lt;/b:if&gt;
          &lt;b:if cond='data:showFreqNumbers'&gt;
            &lt;span class='label-count' dir='ltr'&gt;(&lt;data:label.count/&gt;)&lt;/span&gt;
          &lt;/b:if&gt;
        &lt;/span&gt;
      &lt;/b:loop&gt;
    &lt;/b:if&gt;
    &lt;b:include name='quickedit'/&gt;
  &lt;/div&gt;
&lt;/b:includable&gt;
  &lt;/b:widget&gt;
&lt;/b:section&gt;
&lt;!-- END Sidebar Widgets Area --&gt;
&lt;/aside&gt;
&lt;!-- end aside --&gt;

&lt;/div&gt;
&lt;!-- .main_content--&gt;

&lt;/div&gt;
&lt;!-- end .mainbpart --&gt;

&lt;/div&gt;
&lt;!-- end #main-container --&gt;

&lt;!-- begin footer-container --&gt;
&lt;div class='footer-container'&gt;
&lt;footer class='wrapperbpart'&gt;
&lt;!-- social stuff --&gt;
&lt;div class='widget' id='social'&gt;
   &lt;a href='mailto:wberry@lucidmotions.net'&gt;&lt;i class='fa fa-envelope fa-2'/&gt;&lt;/a&gt;
   &lt;a href='https://twitter.com/williamberryiii'&gt;&lt;i class='fa fa-twitter fa-2'/&gt;&lt;/a&gt;
   &lt;a href='www.linkedin.com/in/williamberryiii/'&gt;&lt;i class='fa fa-linkedin fa-2'/&gt;&lt;/a&gt;
   &lt;a href='https://github.com/WilliamBerryiii'&gt;&lt;i class='fa fa-github fa-2'/&gt;&lt;/a&gt;
   &lt;a href='http://lucidmotions.net/feeds/posts/default?alt=rss'&gt;&lt;i class='fa fa-rss fa-2'/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;!-- end social stuff --&gt;
&lt;!-- begin copyright --&gt;
Copyright &amp;#169; &lt;script type='text/javascript'&gt;var creditsyear = new Date();document.write(creditsyear.getFullYear());&lt;/script&gt; &lt;a expr:href='data:blog.homepageUrl'&gt;&lt;data:blog.title/&gt;&lt;/a&gt; | Powered by &lt;a href='http://www.blogger.com/'&gt;Blogger&lt;/a&gt;
&lt;!-- end copyright --&gt;
&lt;!-- Credits--&gt;
&lt;!-- Do not edit following code, it may cause your site to stop working! --&gt;
&lt;br/&gt;Design by &lt;a href='http://www.s5themes.com/' target='_blank'&gt;Site5 WordPress Themes&lt;/a&gt; | Blogger Theme by &lt;a href='http://newbloggerthemes.com/' target='_blank' title='NewBloggerThemes.com'&gt;NewBloggerThemes.com&lt;/a&gt;
&lt;!-- end Credits--&gt;
&lt;/footer&gt;
&lt;/div&gt;
&lt;!-- end footer-container --&gt;

&lt;/body&gt;
&lt;/html&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/template/default'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/template/default'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_PUBLISHING_MODE</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of publishing done for this blog.</title><content type='text'>PUBLISH_MODE_HOSTED</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_PUBLISHING_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_PUBLISHING_MODE'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_ADMIN_PERMISSION</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of administrators' emails for the blog.</title><content type='text'>wberry@lucidmotions.net</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ADMIN_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ADMIN_PERMISSION'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_ADULT_CONTENT</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog contains adult content</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ADULT_CONTENT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ADULT_CONTENT'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_ALTERNATE_JSRENDER_ALLOWED</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether alternate JS renderings are allowed</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ALTERNATE_JSRENDER_ALLOWED'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_ANALYTICS_ACCOUNT_NUMBER</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog's Google Analytics account number</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ANALYTICS_ACCOUNT_NUMBER'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_ARCHIVE_DATE_FORMAT</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the archive index date format</title><content type='text'>9</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ARCHIVE_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ARCHIVE_DATE_FORMAT'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_ARCHIVE_FREQUENCY</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>How frequently this blog should be archived</title><content type='text'>MONTHLY</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ARCHIVE_FREQUENCY'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_ARCHIVE_FREQUENCY'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_AUTHOR_PERMISSION</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of authors' emails who have permission to publish.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_AUTHOR_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_AUTHOR_PERMISSION'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_BACKLINKS_ALLOWED</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comment backlinks on the blog</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_BACKLINKS_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_BACKLINKS_ALLOWED'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_BY_POST_ARCHIVING</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to provide an archive page for each post</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_BY_POST_ARCHIVING'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_BY_POST_ARCHIVING'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENT_ACCESS</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Who can comment</title><content type='text'>REGISTERED</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_ACCESS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_ACCESS'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENT_CAPTCHA</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to require commenters to complete a Captcha</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_CAPTCHA'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_CAPTCHA'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENT_EMAIL</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>List of e-mail addresses to send notifications of new comments to</title><content type='text'>wberry@lucidmotions.net</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_EMAIL'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENT_FEED</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_FEED'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENT_FORM_LOCATION</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment form location</title><content type='text'>EMBEDDED_IFRAME</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_FORM_LOCATION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_FORM_LOCATION'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENT_MESSAGE</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Blog comment message</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_MESSAGE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_MESSAGE'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENT_MODERATION</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to enable comment moderation</title><content type='text'>ENABLED</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_MODERATION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_MODERATION'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENT_MODERATION_DELAY</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Number of days after which new comments are subject to moderation</title><content type='text'>7</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_MODERATION_DELAY'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_MODERATION_DELAY'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENT_MODERATION_EMAIL</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Email address to send notifications of new comments needing moderation to</title><content type='text'>wberry@lucidmotions.net</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_MODERATION_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_MODERATION_EMAIL'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENT_PROFILE_IMAGES</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show profile images in comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_PROFILE_IMAGES'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENT_PROFILE_IMAGES'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENTS_ALLOWED</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show comments</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENTS_ALLOWED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENTS_ALLOWED'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_COMMENTS_TIME_STAMP_FORMAT</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comment time stamp format number</title><content type='text'>22</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_COMMENTS_TIME_STAMP_FORMAT'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_CONVERT_LINE_BREAKS</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to convert line breaks into &lt;br /&gt; tags in post editor</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_CONVERT_LINE_BREAKS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_CONVERT_LINE_BREAKS'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_CUSTOM_PAGE_NOT_FOUND</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The content served when the requested post or page is not found.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_CUSTOM_PAGE_NOT_FOUND'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_CUSTOM_ROBOTS_TXT</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The custom robots.txt content of the blog served to search engines.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_CUSTOM_ROBOTS_TXT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_CUSTOM_ROBOTS_TXT'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_CUSTOM_ROBOTS_TXT_ENABLED</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog serves custom robots.txt content to search engines.</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_CUSTOM_ROBOTS_TXT_ENABLED'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_DATE_FORMAT</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the date header format</title><content type='text'>2</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_DATE_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_DATE_FORMAT'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_DEFAULT_BACKLINKS_MODE</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default backlinks mode for posts</title><content type='text'>DEFAULT_HAVE_BACKLINKS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_DEFAULT_BACKLINKS_MODE'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_DEFAULT_COMMENTS_MODE</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Default comment mode for posts</title><content type='text'>DEFAULT_HAVE_COMMENTS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_DEFAULT_COMMENTS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_DEFAULT_COMMENTS_MODE'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_DESCRIPTION</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>A description of the blog</title><content type='text'>Rebuilding the Enterprise - Software, Hardware and Peopleware Migrations for the Systems Architect</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_DESCRIPTION'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_EMAIL_POST_LINKS</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a link for users to e-mail posts</title><content type='text'>false</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_EMAIL_POST_LINKS'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_EMAIL_POST_LINKS'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_FEED_REDIRECT_URL</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>URL to redirect post feed requests to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_FEED_REDIRECT_URL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_FEED_REDIRECT_URL'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_FLOAT_ALIGNMENT</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether float alignment is enabled for the blog</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_FLOAT_ALIGNMENT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_FLOAT_ALIGNMENT'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_LOCALE</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Language for this blog</title><content type='text'>en</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_LOCALE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_LOCALE'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_M2B_WHITELIST_EMAIL</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>List of email addresses that can post to the blog via email.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_M2B_WHITELIST_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_M2B_WHITELIST_EMAIL'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_MAX_NUM</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Maximum number of things to show on the main page"</title><content type='text'>12</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_MAX_NUM'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_MAX_NUM'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_MAX_UNIT</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Unit of things to show on the main page</title><content type='text'>POSTS</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_MAX_UNIT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_MAX_UNIT'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_META_DESCRIPTION</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The meta description of the blog served to search engines.</title><content type='text'>A blog about maturing the enterprise, through leadership, evangelism, technology, and systems architecture.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_META_DESCRIPTION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_META_DESCRIPTION'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_META_DESCRIPTION_ENABLED</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog is served with meta descriptions.</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_META_DESCRIPTION_ENABLED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_META_DESCRIPTION_ENABLED'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_NAME</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The name of the blog</title><content type='text'>Lucid Motions</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_NAME'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_NAME'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_PER_POST_FEED</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for per-post comments</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_PER_POST_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_PER_POST_FEED'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_POST_FEED</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The type of feed to provide for blog posts</title><content type='text'>FULL</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_POST_FEED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_POST_FEED'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_POST_FEED_FOOTER</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Footer to append to the end of each entry in the post feed</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_POST_FEED_FOOTER'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_POST_FEED_FOOTER'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_POST_TEMPLATE</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The template for blog posts</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_POST_TEMPLATE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_POST_TEMPLATE'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_PROMOTED</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog can be promoted on Blogger</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_PROMOTED'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_PROMOTED'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_QUICK_EDITING</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether Quick Editing is enabled</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_QUICK_EDITING'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_QUICK_EDITING'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_READ_ACCESS_MODE</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The access type for the readers of the blog.</title><content type='text'>PUBLIC</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_READ_ACCESS_MODE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_READ_ACCESS_MODE'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_READER_PERMISSION</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The list of emails for users who have permission to read the blog.</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_READER_PERMISSION'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_READER_PERMISSION'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_SEARCHABLE</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether this blog should be indexed by search engines</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_SEARCHABLE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_SEARCHABLE'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_SEND_EMAIL</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Comma separated list of emails to send new blog posts to</title><content type='text'></content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_SEND_EMAIL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_SEND_EMAIL'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_SHOW_TITLE</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show the title field</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_SHOW_TITLE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_SHOW_TITLE'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_SHOW_URL</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show a related link box in the post composer</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_SHOW_URL'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_SHOW_URL'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_TIME_STAMP_FORMAT</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The number of the time stamp format</title><content type='text'>2</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_TIME_STAMP_FORMAT'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_TIME_STAMP_FORMAT'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_TIME_ZONE</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>The time zone for this blog</title><content type='text'>America/Los_Angeles</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_TIME_ZONE'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_TIME_ZONE'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.settings.BLOG_USE_LIGHTBOX</id><published>2013-11-08T18:26:46.413-08:00</published><updated>2017-07-27T05:43:41.304-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#settings'/><title type='text'>Whether to show images in the Lightbox when clicked</title><content type='text'>true</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_USE_LIGHTBOX'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/settings/BLOG_USE_LIGHTBOX'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-6933621790343635894</id><published>2017-06-13T16:59:00.002-07:00</published><updated>2017-06-13T16:59:26.953-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Azure Iot Hub'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Containers'/><category scheme='http://www.blogger.com/atom/ns#' term='Docker'/><category scheme='http://www.blogger.com/atom/ns#' term='IoT-Edge'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure IoT Gateway SDK'/><title type='text'>Dockerize the Azure IoT-Edge Gateway</title><content type='html'>Like most developers in the IoT space, I write code that is typically destined for Linux run-times; but I spend my days typing away on a Surface Book running Windows. &amp;nbsp;In days past, when I needed to do some hacking, I'd fire up a Raspberry PI or jump over onto one of a few Ubuntu VMs running HyperV sucking up disk space, processor time and RAM. &amp;nbsp;Thankfully, technology has progressed and these days, with Docker being all the rage, I just spin up a container and get to work.&lt;br /&gt;&lt;br /&gt;One of my common tasks has been developing workflow modules for Azure IoT-Edge, our open source IoT gateway. &amp;nbsp;These modules provide functionality like data compression, aggregation, protocol translation, etc. &amp;nbsp;Easily spinning up a consistent development environment has been critical to accelerating this work, so I figured I'd share the love and show you how to get the gateway up and running in a Linux container on your Windows box using Docker.&lt;br /&gt;&lt;br /&gt;Step one is installing Docker on your Windows 10 (Anniversary edition or higher). &amp;nbsp;Docker provides great &lt;a href="https://docs.docker.com/docker-for-windows/install/"&gt;setup instructions&lt;/a&gt; that will walk you through that whole process. &amp;nbsp;Though you can switch to using "Windows Containers" in the Docker settings, let's leave it with the default "Linux Container" setting. &amp;nbsp;With Docker installed, check and make sure everything is working properly by issuing:&lt;br /&gt;&lt;br /&gt;`docker version`&lt;br /&gt;&lt;br /&gt;in an elevated Powershell prompt. &amp;nbsp;This command should return data for both the client and server. &amp;nbsp;If it doesn't ... there are a copious number of fixes blogged about across the web. &amp;nbsp;I've also found that just selecting "Restore Docker" from the Docker Settings pane to be a useful nuke option.&lt;br /&gt;&lt;br /&gt;Head over to the Azure Portal and set up a "Free" tier IoT Hub. &amp;nbsp;Use the integrated device manager to add two test devices, select 'Symetric Keys' and have them auto-generated. &amp;nbsp;Record the device names and primary keys for use in our dockerfile.&lt;br /&gt;&lt;br /&gt;Now create a folder that we can put a dockerfile into. &amp;nbsp;`mkdir iot-edge-container` sounds nice.&lt;br /&gt;&lt;br /&gt;`cd` into the directory and create a text file called `dockerfile.txt`.&lt;br /&gt;&lt;br /&gt;The first step with our dockerfile will be to declare the base OS we want to use for the image. &amp;nbsp;In this case we'll do Ubuntu:&lt;br /&gt;&lt;br /&gt;`FROM ubuntu`&lt;br /&gt;&lt;br /&gt;Boy that was super hard; glad we got it out of the way. &lt;br /&gt;&lt;br /&gt;Next we'll need to add some environment variables to the image. &amp;nbsp;There are a thousand secure ways to do this other than putting our secretes into our dockerfile; but time is of the essence, and that was a disclaimer to encourage you to do the right thing. &amp;nbsp;Please &lt;a href="https://blog.docker.com/2017/02/docker-secrets-management/"&gt;see here &lt;/a&gt;for detailed options from Docker. &amp;nbsp;So onto those env vars:&lt;br /&gt;&lt;br /&gt;```&lt;br /&gt;# ENV vars for setup&lt;br /&gt;ENV IoTHubName {iot_hub_name}&lt;br /&gt;ENV IoTHubSuffix azure-devices.net &lt;br /&gt;ENV device1 {device1_name}&lt;br /&gt;ENV device1key {device1_key}&lt;br /&gt;ENV device2 {device2_name}&lt;br /&gt;ENV device2key {device2_key}&lt;br /&gt;```&lt;br /&gt;&lt;br /&gt;With the environment variables set up, we need to now make sure that the base image is up-to-date and all the IoT-Edge project dependencies are installed. &amp;nbsp;Apt-Get will be our friend ...&lt;br /&gt;&lt;br /&gt;```&lt;br /&gt;# Update image&lt;br /&gt;RUN apt-get update&lt;br /&gt;RUN apt-get --assume-yes install curl build-essential libcurl4-openssl-dev git cmake pkg-config libssl-dev uuid-dev valgrind jq libglib2.0-dev libtool autoconf autogen vim&lt;br /&gt;```&lt;br /&gt;&lt;br /&gt;Please take note that I've intentionally started a flame war by installing vim ... I have a hard enough time exiting vim, so emacs is off the table completely. &amp;nbsp;Also note that we are installing `jq` - this will be used to dynamically populate the Gateway's simulator JSON config file.&lt;br /&gt;&lt;br /&gt;With the image all updated, we can turn our attention to cloning the IoT-Edge repository and kicking off the build:&lt;br /&gt;&lt;br /&gt;```&lt;br /&gt;# Checkout code&lt;br /&gt;WORKDIR /usr/src/app&lt;br /&gt;RUN git clone https://github.com/Azure/iot-edge.git&lt;br /&gt;&lt;br /&gt;# Build&lt;br /&gt;WORKDIR /usr/src/app/iot-edge/tools&lt;br /&gt;RUN ./build.sh --disable-native-remote-modules&lt;br /&gt;```&lt;br /&gt;&lt;br /&gt;Take note of the flag on the build script, this may or may not be necessary depending on the base OS you are using. &amp;nbsp;Since we are running on Ubuntu, this flag will keep libuv from blowing up during the build.&lt;br /&gt;&lt;br /&gt;Finally, we can turn our attention to getting the container run-time commands all ready. &amp;nbsp;The following big block of code will get us into the right directory to modify the json config file, echo the config to the console to make sure it's all correct and then kick off the Gateway. &amp;nbsp;The `ENTRYPOINT` command will ensure that the container does not exit immediately after starting. &amp;nbsp;Also note the last two `jq` commands which will set the loop time for the simulated devices ... 2 second intervals will chew through your 8K free messages quickly when you can't figure out how to kill your container :-).&lt;br /&gt;&lt;br /&gt;```&lt;br /&gt;# RUN&lt;br /&gt;WORKDIR /usr/src/app/iot-edge/build&lt;br /&gt;&lt;br /&gt;## cat config file into env var&lt;br /&gt;ENTRYPOINT J_FILE=$(cat /usr/src/app/iot-edge/samples/simulated_device_cloud_upload/src/simulated_device_cloud_upload_lin.json) \&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; # cd into sample dir&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; cd /usr/src/app/iot-edge/samples/simulated_device_cloud_upload/src/ \&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; # update settings based on env vars&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; echo "$J_FILE" \&lt;br /&gt;&amp;nbsp; &amp;nbsp; #configure iot hub&lt;br /&gt;&amp;nbsp; &amp;nbsp; | jq '.modules[0].args.IoTHubName="'$IoTHubName'"' \&lt;br /&gt;&amp;nbsp; &amp;nbsp; | jq '.modules[0].args.IoTHubSuffix="'$IoTHubSuffix'"' \&lt;br /&gt;&amp;nbsp; &amp;nbsp; | jq '.modules[0].args.Transport="AMQP"' \&lt;br /&gt;&amp;nbsp; &amp;nbsp; # configure device 1&lt;br /&gt;&amp;nbsp; &amp;nbsp; | jq '.modules[1].args[0].deviceId="'$device1'"' \&lt;br /&gt;&amp;nbsp; &amp;nbsp; | jq '.modules[1].args[0].deviceKey="'$device1key'"' \&lt;br /&gt;&amp;nbsp; &amp;nbsp; # configure device 2&lt;br /&gt;&amp;nbsp; &amp;nbsp; | jq '.modules[1].args[1].deviceId="'$device2'"' \&lt;br /&gt;&amp;nbsp; &amp;nbsp; | jq '.modules[1].args[1].deviceKey="'$device2key'"' \&lt;br /&gt;&amp;nbsp; &amp;nbsp; # set device 1 message period&lt;br /&gt;&amp;nbsp; &amp;nbsp; | jq '.modules[2].args.messagePeriod=10000' \&lt;br /&gt;&amp;nbsp; &amp;nbsp; # set device 2 message period&lt;br /&gt;&amp;nbsp; &amp;nbsp; | jq '.modules[3].args.messagePeriod=10000' \&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;gt; replaced.json \&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; # print updates&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; cat replaced.json \&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; # cd back up to build dir&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; cd /usr/src/app/iot-edge/build/ \&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; # run gateway&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; ./samples/simulated_device_cloud_upload/simulated_device_cloud_upload_sample ../samples/simulated_device_cloud_upload/src/replaced.json&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;```&lt;br /&gt;&lt;br /&gt;With the dockerfile scripted out, we can now create our complete image. &amp;nbsp;From the previously opened elevated Powershell prompt issue the following command:&lt;br /&gt;&lt;br /&gt;`Get-Content .\Dockerfile.txt | docker build -t iot-edge -`&lt;br /&gt;&lt;br /&gt;This will read the dockerfile in and pass it to the Docker build command. &amp;nbsp;Also not that the image will be tagged with 'iot-edge' for easy identification. &amp;nbsp;This command will take about 10-15 to run initially, but subsequent runs should leveraging caching and be much faster.&lt;br /&gt;&lt;br /&gt;Now for the&amp;nbsp;pièces de résistance!&lt;br /&gt;&lt;br /&gt;`docker run -ti iot-edge`&lt;br /&gt;&lt;br /&gt;The container will fire up, print out the json config file and begin sending telemetry data to Azure! &amp;nbsp;Wait a few min and refresh the portal to see your simulated data arriving in IoT Hub from your fancy containerized IoT-Edge Gateway!&lt;br /&gt;&lt;br /&gt;The complete docker file can be found at &lt;a href="https://gist.github.com/WilliamBerryiii/ee31a154d99130f9bbe472a320d49655"&gt;this gist&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Happy Coding!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/6933621790343635894/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2017/06/dockerize-azure-iot-edge-gateway.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6933621790343635894'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6933621790343635894'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2017/06/dockerize-azure-iot-edge-gateway.html' title='Dockerize the Azure IoT-Edge Gateway'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-8421420275609080370</id><published>2017-06-06T09:50:00.002-07:00</published><updated>2017-06-06T10:10:20.093-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='JavaScript'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Webtask.io'/><category scheme='http://www.blogger.com/atom/ns#' term='IoT'/><title type='text'>Getting Started with Webtask.io and IoT</title><content type='html'>I was in a very interesting workshop this past weekend on &lt;a href="http://webtask.io/"&gt;Webtask.io&lt;/a&gt;&amp;nbsp;presented by &lt;a href="https://auth0.com/"&gt;Auth0&lt;/a&gt;'s Glenn Block. &amp;nbsp;Webtask.io brings to the table a thoughtfully designed in-browser editor, a powerful CLI and impressive startup times that live up to their messaging of "run(ning) code in 30 seconds". &amp;nbsp;While the tool chain appears to favor reactive implementations akin to AWS Lambda or Azure Functions, they do offer the capability to run jobs on a cron like schedule. &amp;nbsp;What better way to explore this feature set than to implement a trivial IoT device simulator ... so let's get started.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;div&gt;Get started by installing the Webtask CLI available &lt;a href="https://webtask.io/docs/101"&gt;here&lt;/a&gt;. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Open a Powershell terminal, create a new folder in your source directory and cd into it: `mkdir webtaks; cd webtasks`&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Kick off `npm init` and set up a basic package/project scaffold.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;package name: `webtask`&lt;/li&gt;&lt;li&gt;version: `1.0.0`&lt;/li&gt;&lt;li&gt;description: `My First Webtask`&lt;/li&gt;&lt;li&gt;entry point: `main.js`&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Add the Azure IoT Device SDK for Node: `npm install azure-iot-device-amqp --save`&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Open VS Code in the project folder and create a new file called `main.js`&lt;br /&gt;&lt;br /&gt;In main.js, add a shell function for the webtask that includes a callback to indicate function completion as follows:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/b6001c23247afdbfc31e1a6f28407f09.js?file=main.js_shell"&gt;&lt;/script&gt; &lt;br /&gt;Remove the body of the above function and add the Azure IoT Device library, a connection string and create a device client. &amp;nbsp;You can follow &lt;a href="https://docs.microsoft.com/en-us/azure/iot-hub/iot-hub-node-node-getstarted"&gt;these instructions &lt;/a&gt;to learn how to create an IoT Hub, add a test device and get a device connection string.&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/b6001c23247afdbfc31e1a6f28407f09.js?file=iot_hub_data.js"&gt;&lt;/script&gt; &lt;br /&gt;We'll now define an array to hold logging data, create a simple logging method and alias the function completion callback passing it our log data.&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/b6001c23247afdbfc31e1a6f28407f09.js?file=log_complete.js"&gt;&lt;/script&gt; &lt;br /&gt;The last elements we need are a callback for the client connect function and a call for the client to open it's connection to IoT Hub.&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/b6001c23247afdbfc31e1a6f28407f09.js?file=connect.js"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Open a Powershell command prompt and create a scheduled Webtask: `wt cron schedule "*/1 * * * *" .\main.js `. &amp;nbsp;This will create a new Webtask that will send our device data to Azure IoT Hub every minute.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The newly created Webtask can then be monitored via the CLI by simply issuing `wt logs`. &amp;nbsp;Take note however that this is a feed of all Webtasks running under your account. &amp;nbsp;If everything is configured correctly you should see output similar to the following:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/b6001c23247afdbfc31e1a6f28407f09.js?file=wt_logs.txt"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;To clean up the Webtask, simply issue `wt cron rm webtask`&lt;br /&gt;&lt;br /&gt;The full demo source code is available &lt;a href="https://gist.github.com/WilliamBerryiii/b6001c23247afdbfc31e1a6f28407f09.js?file=main.js"&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Happy Coding!&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/8421420275609080370/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2017/06/getting-started-with-webtaskio-and-iot.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/8421420275609080370'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/8421420275609080370'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2017/06/getting-started-with-webtaskio-and-iot.html' title='Getting Started with Webtask.io and IoT'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-7190383067023406980</id><published>2017-03-04T09:19:00.001-08:00</published><updated>2017-03-04T09:28:44.676-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Azure Iot Hub'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure IoT Protocol Gateway'/><category scheme='http://www.blogger.com/atom/ns#' term='Powershell'/><category scheme='http://www.blogger.com/atom/ns#' term='IoT'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure CLI'/><title type='text'>Getting started with Azure CLI v2 and IoT Hub on Windows</title><content type='html'>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-Ypxy4Bugxwg/WLr5QZ2xTRI/AAAAAAAAAl4/-9pv0hgBHnI5qeX0dSVOfZe98AeXziS8wCLcB/s1600/AzureCli.PNG" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="166" src="https://3.bp.blogspot.com/-Ypxy4Bugxwg/WLr5QZ2xTRI/AAAAAAAAAl4/-9pv0hgBHnI5qeX0dSVOfZe98AeXziS8wCLcB/s320/AzureCli.PNG" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;Version 2 of the Azure CLI was released recently and with the added power of PowerShell, we can accomplish some truly amazing things!&lt;br /&gt;&lt;br /&gt;To get started download Python 3.5 and install it using the relevant platform link &lt;a href="https://www.python.org/downloads/release/python-353/"&gt;here&lt;/a&gt;. &amp;nbsp;I prefer to put python at the root of my C drive usually in a directory called C:\Python35, which is not surprisingly, right next to an installation of Python 2.7, in C:\Python27. &amp;nbsp;As you work through the installation prompts, be sure to install PIP, the python package manager, and have python added to your path.&lt;br /&gt;&lt;br /&gt;After installation, you'll likely need to upgrade PIP to the latest version which can be done by opening a PowerShell administrative terminal and issuing the following command:&lt;br /&gt;&lt;br /&gt;&amp;gt; python -m pip install --upgrade pip&lt;br /&gt;&lt;br /&gt;With PIP updated, you can now install the Azure CLI v2 using the same PowerShell terminal window by issuing the following command:&lt;br /&gt;&lt;br /&gt;&amp;gt; pip install azure-cli&lt;br /&gt;&lt;br /&gt;Once the installation completes, you can now type Azure CLI commands at the PowerShell prompt. &amp;nbsp;This command will bring up the help for the CLI:&lt;br /&gt;&lt;br /&gt;&amp;gt; az -h&lt;br /&gt;&lt;br /&gt;Let's log into our account using:&lt;br /&gt;&lt;br /&gt;&amp;gt; az login&lt;br /&gt;&lt;br /&gt;The CLI will present a token and a URL to visit to authenticate your machine. &amp;nbsp;Follow the onscreen instructions to complete the authentication procedure.&lt;br /&gt;&lt;br /&gt;Now, list all your available subscriptions:&lt;br /&gt;&lt;br /&gt;&amp;gt; az account list&lt;br /&gt;&lt;br /&gt;Set the subscription to use in creating a new IoT Hub. &amp;nbsp;I've chosen to use my Visual Studio Enterprise subscription to take advantage of the free credits:&lt;br /&gt;&lt;br /&gt;&amp;gt; az account set &amp;nbsp;--subscription "Visual Studio Enterprise"&lt;br /&gt;&lt;br /&gt;Before we can create an IoT Hub, we'll need a Resource Group to put it in, this will make for easy clean-up later. &amp;nbsp;Use the following command at the PowerShell prompt to create a new resource group:&lt;br /&gt;&lt;br /&gt;&amp;gt; az group create -l westus -n MyResourceGroupName&lt;br /&gt;&lt;br /&gt;We can now create a new free tier IoT Hub in that Resource Group:&lt;br /&gt;&lt;br /&gt;&amp;gt; az iot hub create -g MyResourceGroupName -n DemoIoTHub --sku F1&lt;br /&gt;&lt;br /&gt;We can explore all the relevant IoT Hub CLI commands with&lt;br /&gt;&lt;br /&gt;&amp;gt; az iot hub -h&lt;br /&gt;&lt;br /&gt;Let's view the iothubowner connection string:&lt;br /&gt;&lt;br /&gt;&amp;gt; az iot hub show-connection-string&lt;br /&gt;&lt;br /&gt;With only a few easy commands, we've now got ourselves a IoT Hub up and running in Azure!&lt;br /&gt;&lt;br /&gt;One added benefit to using the PowerShell terminal in this case is that we can easily mix and match CLI commands and PowerShell commands. &amp;nbsp;To prove this out, I cloned the &lt;a href="https://github.com/Azure/azure-iot-protocol-gateway"&gt;AzureIoT  Protocol Gateway&lt;/a&gt; to my machine and using the following commands, pushed my IoT Hub's connection string into a configuration file:&lt;br /&gt;&lt;br /&gt;&amp;gt; $file = (Get-Content .\FrontEnd.IotHubClient.json) | ConvertFrom-Json&lt;br /&gt;&amp;gt; $file.ConnectionString = (az iot hub show-connection-string | ConvertFrom-Json | Select-Object -first 1).connectionString&lt;br /&gt;&amp;gt; (ConvertTo-Json $file) | Out-File .\FrontEnd.IotHubClient.json -Encoding ascii&lt;br /&gt;&lt;br /&gt;Go forth and whip up some of your own Azure CLI &amp;amp; PowerShell magic!&lt;br /&gt;&lt;br /&gt;Happy Coding!</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/7190383067023406980/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2017/03/getting-started-with-azure-cli-v2-and-IoT-Hub.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7190383067023406980'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7190383067023406980'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2017/03/getting-started-with-azure-cli-v2-and-IoT-Hub.html' title='Getting started with Azure CLI v2 and IoT Hub on Windows'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://3.bp.blogspot.com/-Ypxy4Bugxwg/WLr5QZ2xTRI/AAAAAAAAAl4/-9pv0hgBHnI5qeX0dSVOfZe98AeXziS8wCLcB/s72-c/AzureCli.PNG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-5378404190286494541</id><published>2017-01-06T11:30:00.003-08:00</published><updated>2017-01-06T16:01:31.320-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure'/><category scheme='http://www.blogger.com/atom/ns#' term='Iot Security'/><category scheme='http://www.blogger.com/atom/ns#' term='IoT'/><category scheme='http://www.blogger.com/atom/ns#' term='GreenGrass'/><category scheme='http://www.blogger.com/atom/ns#' term='Weekly Update'/><title type='text'>This Week In IoT  ~January 6, 2017~</title><content type='html'>In the wake of CES, `This week in IoT` has some interesting highlights. &amp;nbsp;We saw the public announcement of Microsoft's Connected Car initiative, built from an initial partnership with a Renault-Nissan. &amp;nbsp;The Kissenger iPhone device allows you to "kiss" strangers over the internet. &amp;nbsp;And though not expressly `IoT`, it turns out that Ultrasound tracking can be used to bypass anonymity systems. &amp;nbsp;So here's this week's roll:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;In The News:&lt;/h4&gt;&lt;div&gt;&lt;a href="http://www.wsj.com/articles/states-wire-up-roads-as-cars-get-smarter-1483390782"&gt;States Wire Up Roads as Cars Get Smarter&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://techcrunch.com/2017/01/05/microsoft-launches-a-new-cloud-platform-for-connected-cars/"&gt;Microsoft launches a new cloud platform for connected cars&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;h4&gt;Product Highlight:&lt;/h4&gt;&lt;div&gt;&lt;a href="https://aws.amazon.com/greengrass/"&gt;AWS Green Grass&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Blogs:&lt;/h4&gt;&lt;div&gt;&lt;a href="http://vasters.com/blog/the-elements-of-things-systems/"&gt;The Elements of Things Systems&lt;/a&gt; - Vasters&lt;/div&gt;&lt;div&gt;&lt;a href="http://www.lucidmotions.net/2017/01/use-azure-to-viz-plant-floor-data.html"&gt;Using Azure IoT Hub to Visualize Plant Floor Data&lt;/a&gt; - Berry&lt;/div&gt;&lt;div&gt;&lt;a href="https://program-plc.blogspot.com/2015/07/learn-plc-with-logixpro-simulator-about.html"&gt;Learning PLCs with LogixPro Simulator&lt;/a&gt; - Iman&lt;/div&gt;&lt;div&gt;&lt;a href="http://blog.jongallant.com/2016/12/azure-iot-hub-routes/"&gt;Azure IoT Hub Routes&lt;/a&gt; - Gallant&lt;/div&gt;&lt;h4&gt;The Internet of Shit:&lt;/h4&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="http://www.teenvogue.com/story/kissenger-kiss-over-internet-app"&gt;Kissenger&lt;/a&gt; - kissing people over the internet with your iPhone ...&amp;nbsp;&lt;/div&gt;&lt;h4&gt;Papers:&lt;/h4&gt;&lt;div&gt;&lt;div style="font-family: Calibri; font-size: 11.0pt; margin: 0in;"&gt;&lt;a href="https://eprint.iacr.org/2017/003.pdf"&gt;The Strobe Protocol Framework&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4&gt;Security Spotlight:&lt;/h4&gt;&lt;a href="https://www.bleepingcomputer.com/news/security/ultrasound-tracking-could-be-used-to-deanonymize-tor-users/"&gt;Ultrasound Tracking Could Be Used to Deanonymize Tor Users&lt;/a&gt;&lt;br /&gt;&lt;h4&gt;Who to Follow:&lt;/h4&gt;&lt;div&gt;&lt;a href="http://sarah%20cooper/"&gt;Sarah Cooper&lt;/a&gt;&lt;/div&gt;&lt;h4&gt;Book of the Week:&lt;/h4&gt;&lt;div&gt;&lt;a href="http://www.springer.com/gp/book/9783319466064"&gt;Group Privacy&lt;/a&gt;&lt;/div&gt;&lt;div&gt;- Collects interdisciplinary and comprehensive analyses of theoretical and applied problems concerning group profiling, Big Data and predictive analyses.&lt;/div&gt;&lt;h4&gt;Humor:&lt;/h4&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-FwldWSNlcRs/WG_qQ9Ta54I/AAAAAAAAAlc/RmZuIvpdWLEDNGYfaLVpkvnJ0c6b4uURACLcB/s1600/C1VJxdPWEAAGy7e.jpg" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="562" src="https://4.bp.blogspot.com/-FwldWSNlcRs/WG_qQ9Ta54I/AAAAAAAAAlc/RmZuIvpdWLEDNGYfaLVpkvnJ0c6b4uURACLcB/s640/C1VJxdPWEAAGy7e.jpg" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/5378404190286494541/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2017/01/this-week-in-iot-january-6-2017.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5378404190286494541'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5378404190286494541'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2017/01/this-week-in-iot-january-6-2017.html' title='This Week In IoT  ~January 6, 2017~'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://4.bp.blogspot.com/-FwldWSNlcRs/WG_qQ9Ta54I/AAAAAAAAAlc/RmZuIvpdWLEDNGYfaLVpkvnJ0c6b4uURACLcB/s72-c/C1VJxdPWEAAGy7e.jpg' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-3510342245638915212</id><published>2017-01-04T15:25:00.001-08:00</published><updated>2017-01-04T15:51:18.565-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure'/><category scheme='http://www.blogger.com/atom/ns#' term='IoT'/><category scheme='http://www.blogger.com/atom/ns#' term='PowerBI'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure IoT Gateway SDK'/><title type='text'>Using Azure IoT Hub and PowerBI to Visualize Plant Floor Data</title><content type='html'>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://azure.microsoft.com/svghandler/iot-hub/?width=600&amp;amp;height=315" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="105" src="https://azure.microsoft.com/svghandler/iot-hub/?width=600&amp;amp;height=315" width="200" /&gt;&lt;/a&gt;&lt;/div&gt;In my &lt;a href="http://www.lucidmotions.net/2016/12/fast-track-azure-gateway-sdk-w-powershell.html"&gt;previous post on the Azure IoT Gateway SDK&lt;/a&gt;, we put together a Powershell quick start script for Modbus Gateway projects. &amp;nbsp;In this post we'll continue the exploration by connecting a Modbus compatible Beckhoff BK9100 to Azure IoT Hub, shape our data with Azure Stream Analytics and then visualizing the current position of a Dynapar optical encoder with Power Bi.&lt;br /&gt;&lt;br /&gt;We'll begin by opening up the Azure Portal, click on the plus icon in the upper right corner and search for `IoT Hub`. &amp;nbsp;Once the resource is located, select `Create` in the lower left corner.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-WahEkTixUxc/WG1NMXDmH-I/AAAAAAAAAi8/vBVdGDWO6tYv6pAygS0urddKD9Njww3PQCLcB/s1600/iot_hub_create.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="400" src="https://1.bp.blogspot.com/-WahEkTixUxc/WG1NMXDmH-I/AAAAAAAAAi8/vBVdGDWO6tYv6pAygS0urddKD9Njww3PQCLcB/s400/iot_hub_create.PNG" width="306" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Configure your IoT Hub with a unique name, select an appropriate scale tier, and make sure to put the hub into it's own resource group for easy clean-up later.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-PQHGyXoIgcg/WG1OI9u4UlI/AAAAAAAAAjA/LIWikFNbWzcVS-GkUHzJ26-BTohAB76nQCLcB/s1600/iot_hub_create_2.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="342" src="https://4.bp.blogspot.com/-PQHGyXoIgcg/WG1OI9u4UlI/AAAAAAAAAjA/LIWikFNbWzcVS-GkUHzJ26-BTohAB76nQCLcB/s400/iot_hub_create_2.PNG" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Navigate to the `Shared access policies` tab of the IoT Hub and paste the `Primary key` of the `service` policy into a text file.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-B3996Waiht0/WG1aZW59GGI/AAAAAAAAAjc/6QblxSwZyJANgTfgAvvJoGGhnm27NcrcwCLcB/s1600/service-policy.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="332" src="https://1.bp.blogspot.com/-B3996Waiht0/WG1aZW59GGI/AAAAAAAAAjc/6QblxSwZyJANgTfgAvvJoGGhnm27NcrcwCLcB/s400/service-policy.PNG" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Back in the Hub's primary blade, select the `Endpoints` tab under messaging. In the new blade select the `Events` entry under `Built-in endpoints`. &amp;nbsp;Once the new blade opens, copy the `Event Hub-compatible name` value and the first segment of the `Event Hub-compatible endpoint` value (e.g. `ihsuprodbyres043dednamespace`) into your text file. &amp;nbsp;We'll use these values in a moment to hook up our Azure Stream Analytics Job.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-2ERdeJpdEkQ/WG1b0aByl_I/AAAAAAAAAjk/pNOfZDrlzBYukcyrjMREQ1oiPjnYt2N1QCLcB/s1600/endpoints.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="272" src="https://4.bp.blogspot.com/-2ERdeJpdEkQ/WG1b0aByl_I/AAAAAAAAAjk/pNOfZDrlzBYukcyrjMREQ1oiPjnYt2N1QCLcB/s400/endpoints.PNG" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Next, we'll need an Azure Stream Analytics(ASA) Job to perform some data scaling on the path toward PowerBI. &amp;nbsp;While this operation could be performed in the gateway, ASA provides us an opportunity to sniff/validate our data and opens the door to easy persistence, should we so choose. &amp;nbsp;Again click the plus (+) icon in the upper left corner and search for `Stream Analytics`. Once the resource is located, select `Create` in the blade's lower left corner.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-_E_3DZpsXo4/WG1XrR_SmjI/AAAAAAAAAjQ/licXsye8pVkXmGXzgf6xIvHe9wlVLCNIwCEw/s1600/asa.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="400" src="https://4.bp.blogspot.com/-_E_3DZpsXo4/WG1XrR_SmjI/AAAAAAAAAjQ/licXsye8pVkXmGXzgf6xIvHe9wlVLCNIwCEw/s400/asa.PNG" width="310" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&amp;nbsp;Configure the ASA job with a unique name and place it in the same resource group as the IoT Hub.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-OoVRsb93GAY/WG1XrU7bH3I/AAAAAAAAAjU/rveyKrhzkiIAyuGVtypmzWqY10RI0u2ygCEw/s1600/asa-create.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="400" src="https://1.bp.blogspot.com/-OoVRsb93GAY/WG1XrU7bH3I/AAAAAAAAAjU/rveyKrhzkiIAyuGVtypmzWqY10RI0u2ygCEw/s400/asa-create.PNG" width="180" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;We now need to patch the IoT Hub as the input for the ASA Job. In the overview pane, select the input section under `Job Topology`, and press add at the top of the new blade. &amp;nbsp;Enter an alias that will be used to reference the input in the ASA query. &amp;nbsp;Make sure that the `Source Type` is set to `Data Stream` and the `Source` is marked as `Event hub`. &amp;nbsp;Unfortunately, the Event Hub input blade will not automatically recognize the IoT Hub's Event Hub endpoints, so we'll need to set the `Subscription` field to `Provide event hub settings manually`. &amp;nbsp;Paste in the `Service bus namespace`, the 'Event hub name' and the `Event hub policy key` from your text file. Finish up by setting the `Event up policy name` to `service` and press `Create`. &amp;nbsp;There is no need to define a non-default consumer group and the data will be JSON formatted, encoded as UTF-8&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-qumzzhxT-s8/WG1fmndoivI/AAAAAAAAAjw/h4JBw2VCcfk-k8vH-S-hOjnncFVXMDtEwCLcB/s1600/asa-input2.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="400" src="https://3.bp.blogspot.com/-qumzzhxT-s8/WG1fmndoivI/AAAAAAAAAjw/h4JBw2VCcfk-k8vH-S-hOjnncFVXMDtEwCLcB/s400/asa-input2.PNG" width="376" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Before we define our ASA query we should set up the output hook to PowerBI. &amp;nbsp;Back under the ASA Job's overview tab on the main blade, Select the `Output` section under `Job Topology` and press `Add` at the top. &amp;nbsp;Enter `power-bi` as your `Output alias`, set the `Sink` to `Power BI` and press authorize. &amp;nbsp;You'll be asked to enter your Power BI credentials at the login. &amp;nbsp;If you don't already have a Power BI account, you can sign up for one &lt;a href="https://powerbi.microsoft.com/en-us/get-started/"&gt;here&lt;/a&gt;. &amp;nbsp;Once the prompt completes login, enter in a `Dataset Name` and target `Table Name`.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-ZYGvf3-UZcQ/WG1j0yoIwFI/AAAAAAAAAj8/MQKmZn5azzADf43KApZINkfBWorFLSgmACLcB/s1600/asa-powerbi-auth.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="268" src="https://2.bp.blogspot.com/-ZYGvf3-UZcQ/WG1j0yoIwFI/AAAAAAAAAj8/MQKmZn5azzADf43KApZINkfBWorFLSgmACLcB/s400/asa-powerbi-auth.PNG" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The last bit of ASA configuration we need to handle is setting up the query. &amp;nbsp;For now, we'll build the query based on values that might end up being slightly different when you wire up your device. &lt;br /&gt;&lt;br /&gt;Navigate the the `Query` section under `Job Topology` and select it. &amp;nbsp;A new blade will open up that will list the Input and Output alias previously defined and a code editor to enter the ASA query. &amp;nbsp;We'll start by selecting the observation time stamp and the device type value. &amp;nbsp;As I noted earlier, we need to do some maths to range our encoder value to get the data in shape for PowerBI visualization. &amp;nbsp;To range the encoder value, cast the string to a float, devide by the ranges max count (in this case 65535) and multiply by 100 to push to percentage. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/c3d6e4e87d4507ffe02cb6327eb31ab3.js?file=query.sql"&gt;&lt;/script&gt;&lt;br /&gt;&lt;br /&gt;Once the query is entered, select `Save` at the top and back on the ASA home blade, press `Start` to kick off the job.&lt;br /&gt;&lt;br /&gt;We can now turn our attention back to our Modbus device and complete the wiring of it to the gateway. &amp;nbsp;As I noted earlier, I'm using a Beckhoff BK9100, Modbus capable, bus coupler along with a pretty standard Dynapar 2 channel optical incremental encoder (no Z full rev. channel). &amp;nbsp;The Process Image for the coupler includes 8 channels of DIO in front of the mapping space for the encoder module, leaving our counter value located at the second word of the process image. &amp;nbsp;For the astute, the coupler is also confiugred for IPAddres assignment using BootP via Beckhoff's TCBootP application.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-S5T_SM_f_bo/WG1utD2Fw-I/AAAAAAAAAkQ/zPDZjSXhwTAxQzK3YQUMbd5oqRft8TFIwCLcB/s1600/IMG_3692.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="300" src="https://4.bp.blogspot.com/-S5T_SM_f_bo/WG1utD2Fw-I/AAAAAAAAAkQ/zPDZjSXhwTAxQzK3YQUMbd5oqRft8TFIwCLcB/s400/IMG_3692.JPG" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The next step in the process is to register our device with the IoT Hub. While there are a number of ways to accomplish this, I suggest you check out our `iot-samples` repository on GitHub. &amp;nbsp;Begin by either cloning the repo, or just download the code directly. &amp;nbsp;Navigate to Device Management -&amp;gt; csharp and open the solution file in Visual Studio (Note, you might also want to checkout my &lt;a href="http://www.lucidmotions.net/2016/11/introduction-to-azure-iot-with-fsharp.html"&gt;Introduction to Azure IoT with Fsharp&lt;/a&gt; post too!). &amp;nbsp;With the solution open, set the `Create Device Identity` project as the startup project. &amp;nbsp;In the config folder, copy the `config.default.yaml` file to `config.yaml`. &amp;nbsp;Enter the Host Name for your IoT Hub, and the `iothubowner`'s primary key connection string, which can be found under the IoT Hub's `Shared Access policies` tab. &amp;nbsp; Finish up by modifying the `Nickname` and `DeviceId` values in the config file, they can be any value you want. &amp;nbsp;After you run the project, your device will be registered and a device key will be populated in the config file, we'll need that value shortly.&lt;br /&gt;&lt;br /&gt;Open the script from my&amp;nbsp;&lt;a href="http://www.lucidmotions.net/2016/12/fast-track-azure-gateway-sdk-w-powershell.html"&gt;previous blog post&lt;/a&gt;&amp;nbsp;in an Administrative PowerShell ISE session. &amp;nbsp;You'll need to set at least the following values:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;rootProjectPath&lt;/li&gt;&lt;li&gt;iotHubName&lt;/li&gt;&lt;li&gt;deviceName - same as the "deviceId" you registered earlier&lt;/li&gt;&lt;li&gt;deviceKey - the value from the config file in the Device Management Project&lt;/li&gt;&lt;li&gt;deviceMac - the mac address of your modbus device&lt;/li&gt;&lt;li&gt;modbusServerIp - the IP Address of your bus coupler/plc/IO device&lt;/li&gt;&lt;li&gt;modbusPollingInterval - the number of milliseconds between device polls&lt;/li&gt;&lt;li&gt;modbusDeviceType - this is the value that is plumbed to ASA&lt;/li&gt;&lt;li&gt;modbus * - note in the sample script, I'm reading unit 0, with function code 4 (read input registers), reading starting at register 2 (1 based), and only reading 1 word of data ... you can see more about Modbus function codes on page 22 of &lt;a href="http://modbus.org/docs/PI_MBUS_300.pdf"&gt;the protocol spec&lt;/a&gt;.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Once you fill out your data and run the script, navigate to {projectRootPath} -&amp;gt; azure-iot-gateway-sdk -&amp;gt; build -&amp;gt; samples -&amp;gt; modbus -&amp;gt; Debug. &amp;nbsp;Open the `modbus_win.json` file in a text editor and double check that the document looks well formed.&lt;br /&gt;&lt;br /&gt;You can now open a PowerShell command prompt in the same folder and issue the following command to begin reading from the device and sending data to Azure&lt;br /&gt;&amp;gt; .\ modbus_sample.exe .\modbus_win.json&lt;br /&gt;You should see output similar to the following:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-v7lowFrKa0M/WG134K5Se-I/AAAAAAAAAkg/yZpAV1ltTkUNjBnG-_3nwp611K8up4uGACLcB/s1600/gateway-run.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="172" src="https://1.bp.blogspot.com/-v7lowFrKa0M/WG134K5Se-I/AAAAAAAAAkg/yZpAV1ltTkUNjBnG-_3nwp611K8up4uGACLcB/s640/gateway-run.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Assuming you've set your polling to something reasonable, like 2000 (2 seconds), you should be able to run the application for a few hours on a day's allowance for the IoT Hub free scaling tier.&lt;br /&gt;&lt;br /&gt;With data flowing to the IoT Hub and onto ASA, log in to Power BI. &amp;nbsp;Though it can take some time to finally show up, the ASA dataset should be visible in `Datasets` group. &lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-MpL0rG_D450/WG15EUj1DfI/AAAAAAAAAks/QtPMiV8rRNssETOzZGm8X1W9Efl_KI0EACLcB/s1600/pbi-dataset.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="https://4.bp.blogspot.com/-MpL0rG_D450/WG15EUj1DfI/AAAAAAAAAks/QtPMiV8rRNssETOzZGm8X1W9Efl_KI0EACLcB/s320/pbi-dataset.PNG" width="139" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Select the Modbus dataset, and expand Visualization and Fields from the toggles on the right of the display.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-xo78fHYf-vA/WG15ueB7TzI/AAAAAAAAAkw/vBe0H3wRPaomO7hMZI6QMiaEeb6tzfoFACLcB/s1600/pbi-dataset-start.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="288" src="https://4.bp.blogspot.com/-xo78fHYf-vA/WG15ueB7TzI/AAAAAAAAAkw/vBe0H3wRPaomO7hMZI6QMiaEeb6tzfoFACLcB/s640/pbi-dataset-start.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Add a `Line Chart` to the page and set the following values:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Axis - datetimestamp&lt;/li&gt;&lt;li&gt;Legend - device-type&lt;/li&gt;&lt;li&gt;Values - cnt&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-VFbsTrm9TeU/WG16gfYz12I/AAAAAAAAAk4/CmXHfQBuPKkIr40eJ2w7sj97FWIM8m6ZgCLcB/s1600/graph-settings.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="400" src="https://3.bp.blogspot.com/-VFbsTrm9TeU/WG16gfYz12I/AAAAAAAAAk4/CmXHfQBuPKkIr40eJ2w7sj97FWIM8m6ZgCLcB/s400/graph-settings.PNG" width="185" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In the Filters menu for the chart, select the datetimestamp field and set the filter type to `Top N` and show the last 20 items. &amp;nbsp;This will produce a realtime graph of data streaming from the device. &amp;nbsp;The default polling interval should be around 3-4 seconds. &amp;nbsp;The resulting data will look like this!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-C2MBM0RpndE/WG2ECXVDFYI/AAAAAAAAAlE/wHAIE-mB4YoKae1V7EoNGKs0oQe-eC9gwCLcB/s1600/report.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="211" src="https://4.bp.blogspot.com/-C2MBM0RpndE/WG2ECXVDFYI/AAAAAAAAAlE/wHAIE-mB4YoKae1V7EoNGKs0oQe-eC9gwCLcB/s320/report.PNG" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Happy Coding!&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/3510342245638915212/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2017/01/use-azure-to-viz-plant-floor-data.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3510342245638915212'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3510342245638915212'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2017/01/use-azure-to-viz-plant-floor-data.html' title='Using Azure IoT Hub and PowerBI to Visualize Plant Floor Data'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://1.bp.blogspot.com/-WahEkTixUxc/WG1NMXDmH-I/AAAAAAAAAi8/vBVdGDWO6tYv6pAygS0urddKD9Njww3PQCLcB/s72-c/iot_hub_create.PNG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-6093041137058051481</id><published>2016-12-30T13:15:00.000-08:00</published><updated>2016-12-30T18:07:00.549-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure'/><category scheme='http://www.blogger.com/atom/ns#' term='Modbus'/><category scheme='http://www.blogger.com/atom/ns#' term='Powershell'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure IoT Gateway SDK'/><title type='text'>Using PowerShell to Fast Track Azure IoT Gateway SDK Projects</title><content type='html'>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://upload.wikimedia.org/wikipedia/commons/2/2f/PowerShell_5.0_icon.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="200" src="https://upload.wikimedia.org/wikipedia/commons/2/2f/PowerShell_5.0_icon.png" width="200" /&gt;&lt;/a&gt;&lt;/div&gt;I've been working with the &lt;a href="https://github.com/Azure/azure-iot-gateway-sdk"&gt;Azure IoT Gateway SDK&lt;/a&gt; quite a bit lately and the project setup experience is not only repetitive, but also somewhat error prone. &amp;nbsp;Make a dozen settings changes here. Forget a setting there. Edit a few CmakeLists files.\Watch the build explode. Fix. Build AGAIN. Rinse and repeat.&lt;br /&gt;&lt;br /&gt;I figure it was time to not only document the whole process, but encode it with PowerShell; 'cause "infrastructure as code" and if computers do anything well, it's to at least make the same mistakes in a repeatable fashion. &amp;nbsp;So let's whip up a script that will perform the following tasks:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Create a new project directory&lt;/li&gt;&lt;li&gt;Clone the Azure IoT Gateway SDK from GitHub&lt;/li&gt;&lt;li&gt;Clone the Modbus sample module for the Gateway from GitHub&lt;/li&gt;&lt;li&gt;Edit the relevant CMake files to include the sample Modbus module&lt;/li&gt;&lt;li&gt;Build the SDK&lt;/li&gt;&lt;li&gt;Create a Modbus module configuration file with all the correct settings to just `work`&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;While this example is tuned to building the Gateway SDK's &lt;a href="https://github.com/Azure/iot-gateway-modbus"&gt;Modbus Sample module&lt;/a&gt;, it could quite easily be adapted to build and configure any of the SDK's &lt;a href="https://github.com/Azure/azure-iot-gateway-sdk/tree/master/samples"&gt;included samples&lt;/a&gt; or other add-on sample modules like the &lt;a href="https://github.com/Azure/iot-gateway-opc-ua"&gt;OPC-UA Client&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I'm a fan of constrained and declarative input so let's start by defining an Enum with the allowable transports for the IoT Hub. &amp;nbsp;The available options are 'AMQP', 'HTTP' and 'MQTT'.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/90d233de838bfd0d24f9c23cb0f314dc.js?file=transport_enum.ps1"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We can then sett up all the pieces of configuration for the project, the IoT Hub, the device mapping and the Modbus Read module.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/90d233de838bfd0d24f9c23cb0f314dc.js?file=settings.ps1"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;After some troubles getting the environmental variable set up for the SDK's build script, I turned to Stack Overflow for some assistance and was we well rewarded. &amp;nbsp;Bill Stewart stepped up with a few functions to make the process easier; &lt;a href="http://stackoverflow.com/a/41399983/1276028"&gt;his reply to my question&lt;/a&gt; includes his great Windows IT Pro blog post on the topic of PowerShell environment variable imports ... well worth a read. &amp;nbsp;For the sake of simplicity we'll just add them directly to the script.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/90d233de838bfd0d24f9c23cb0f314dc.js?file=helper-funcs.ps1"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Next, we'll create the project directory and use `git` to clone the relevant repositories there. &amp;nbsp;Note that git uses stderr output for some output that is not really an error and the use of the `--quiet` or `-q` option for `clone` does not truly silence the stderr output. &amp;nbsp;There are some details in &lt;a href="https://github.com/dahlbyk/posh-git/issues/109"&gt;this Posh-Git issue&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/90d233de838bfd0d24f9c23cb0f314dc.js?file=git.ps1"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We can now move the Modbus module and associated sample into the SDK repository and amend the relevant CMake files to have them built when we build the SDK.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/90d233de838bfd0d24f9c23cb0f314dc.js?file=pre-build.ps1"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Let's move into the SDK directory and copy the current state of the session's environment variables for restore after the build.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/90d233de838bfd0d24f9c23cb0f314dc.js?file=env.ps1"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To build the SDK on Windows, the documentation notes that we need to run from a Visual Studio Command Prompt. &amp;nbsp;Behind the scenes, this special command prompt calls a batch file that sets up IDE options and tooling for building, debugging and deploying. &amp;nbsp;If you right click and check the properties for the shortcuts you'll find a call that looks like this:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;`%comspec% /k ""C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat"" amd64_x86`&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The operational gist here is to open a command prompt and keep it open, using the `/k` switch, after running the `vcvarsall` batch script with, in this case, the x64/x86 argument. &amp;nbsp;We'll leverage the functions I noted earlier to call this batch file directly, adding the environmental variables to our current PowerShell session, and the call the SDK's build script. &amp;nbsp;Note that we'll skip running the SDK's unit tests and finish by restoring the environmental variables to their original state.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/90d233de838bfd0d24f9c23cb0f314dc.js?file=build.ps1"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As of the writing of this post, the build will complete with a few warning from the compiler as noted in this &lt;a href="https://github.com/Azure/iot-gateway-modbus/issues/4"&gt;Modbus module issue&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We can now turn our attention to setting up the gateway's configuration file for execution. &amp;nbsp;We'll want to reference the template configuration file for the Modbus gateway module and read it into a PowerShell object. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/90d233de838bfd0d24f9c23cb0f314dc.js?file=config-template.ps1"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;From here, we can pick out the various parts of the configuration file settings that need values and can conclude by serializing the configuration to a file in the SDK's build directory. &amp;nbsp;Take note that the parsing library that supports the gateway can only parse ASCII and UTF-8 encoded configuration files. &amp;nbsp;PowerShell's default encoding for the Out-File function is Unicode and without specifying the encoding the gateway will blowup with a non-descriptive error at run-time. &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/90d233de838bfd0d24f9c23cb0f314dc.js?file=settings.ps1"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You can now navigate to the compiled Modbus sample (`cd .\build\samples\modbus\Debug`) and run the compiled Modbus gateway sample with the following command:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;` &amp;nbsp;.\modbus_sample.exe .\modbus_win.json`&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The complete script can be found here. &amp;nbsp;Open up an Administrator PowerShell ISE session, paste the code, modify the various settings for your demo project and run.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/90d233de838bfd0d24f9c23cb0f314dc.js?file=script.ps1"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Happy Coding!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/6093041137058051481/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2016/12/fast-track-azure-gateway-sdk-w-powershell.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6093041137058051481'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6093041137058051481'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/12/fast-track-azure-gateway-sdk-w-powershell.html' title='Using PowerShell to Fast Track Azure IoT Gateway SDK Projects'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-1852038307453785067</id><published>2016-11-28T16:33:00.001-08:00</published><updated>2016-12-03T16:45:39.299-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure Stream Analytics'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure Functions'/><category scheme='http://www.blogger.com/atom/ns#' term='IoT'/><category scheme='http://www.blogger.com/atom/ns#' term='PowerBI'/><category scheme='http://www.blogger.com/atom/ns#' term='F#'/><title type='text'>Introduction to Azure IoT with Fsharp</title><content type='html'>&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://fsharp.org/img/logo/fsharp128.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" src="http://fsharp.org/img/logo/fsharp128.png" /&gt;&lt;/a&gt;&lt;/div&gt;Requirements:&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;IDE/Editor with Fsharp capabilities, e.g. Visual Studio or VS Code with Ionide plugin.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Azure Subscription.&lt;/li&gt;&lt;li&gt;Nuget or Paket&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Estimated Completion Time: 2-3 hours&lt;/h4&gt;&lt;h3&gt;A Brief Introduction&amp;nbsp;&lt;/h3&gt;Beating the drum of strongly typed function programming in the land of IoT is the textbook definition of counterculture. &amp;nbsp;Embedded systems have been written in "high-level" languages like C/C++ forever. &amp;nbsp;New players to the IoT market yearn for broad-based adoption and think the only way to drive developer adoption is to JavaScript All The Things! While precedent and low barrier to entry are certainly compelling, neither are helping us build better, more robust, provably secure or correct systems. &amp;nbsp;As such, I think there is a very strong case for languages like F#, especially when leveraging opensource cross-platform run-times and sdks like .Net Core.&lt;br /&gt;&lt;br /&gt;The goal of this introductory tutorial will be to show how F# fits into the world of IoT while simultaneously providing a broad architectural overview of an Azure IoT solution. &lt;br /&gt;&lt;br /&gt;Happy Coding,&lt;br /&gt;Bill&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Other Azure F# Resources&lt;/h3&gt;Since this guide primarily covers the use of F# with Azure resources, you might find the following link helpful:&lt;br /&gt;&lt;br /&gt;&lt;a href="http://fsharp.org/guides/cloud/"&gt;Guide - Cloud Data, Compute and Messaging with F#&lt;/a&gt;&amp;nbsp;- from FSharp.org&lt;br /&gt;&lt;a href="https://docs.microsoft.com/en-us/dotnet/articles/fsharp/using-fsharp-on-azure/"&gt;Using F# on Azure&lt;/a&gt;&amp;nbsp;- from Microsoft&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Data Simulation &amp;nbsp;&lt;/h3&gt;For this tutorial, we'll be simulating wind speed measurements taken from an array of devices. &amp;nbsp;The data will include nested objects like geo-coordinates and observation times. &amp;nbsp;We'll transmit this data from a device simulator that will act as a field gateway device and publish the data to an Azure IoT Hub. &amp;nbsp;Further post-processing steps will leverage an array of Azure PaaS offerings and harness the power and simplicity of F# all the way through to data visualization.&lt;br /&gt;&lt;br /&gt;Though we will be hand rolling the data generators, one could just as easily leverage community libraries like &lt;a href="https://fscheck.github.io/FsCheck/"&gt;FsCheck&lt;/a&gt;, which include wonderful APIs for randomized data generation.&lt;br /&gt;&lt;h3&gt;Project Scaffold&lt;/h3&gt;To complete this tutorial, we'll need two (2) empty projects created in a Visual Studio Solution. &amp;nbsp;The solution name is up to you; but, I would suggest the following names for the projects as they align with &lt;a href="https://github.com/Microsoft/iot-samples"&gt;Microsoft's iot-samples library&lt;/a&gt;.&lt;br /&gt;&lt;ul&gt;&lt;li&gt;`RegisterDevices` - the project that will be used to register simulated devices with our Azure IoT Hub.&lt;/li&gt;&lt;li&gt;`DeviceSimulator` - the application that will simulate our IoT device(s) field gateway.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Configuration&amp;nbsp;&lt;/h3&gt;To save ourselves from hard coding connection strings and keys, let's build a configuration file that can be used across all the applications, and have fun with an F# Type Provider while we are at it.&lt;br /&gt;&lt;br /&gt;In your solution add a folder call `config` and create a new file in that folder called `config.yaml`. &amp;nbsp;We'll need two primary groups of configuration information, one group for our Azure Cloud settings and one group for the simulated device(s). &amp;nbsp;The cloud settings section will need to store the URI of our IoT Hub, the IoT Hub's Event Hub compatible endpoint for reading device to cloud messages and a connection string to the IoT Hub, which will be used for device registration and other tasks. &amp;nbsp;I should note at this point that you can obviously build up the connection string from it's elements, removing the copy pasta, but that will be left as an exercise for you.&lt;br /&gt;&lt;br /&gt;The following text can be pasted into your config.yaml file, replacing the `{foo}` parts with your IoT Hub's settings which we'll collect in the next section. &amp;nbsp;Also, don't worry about the Device `Key` yet, we'll get that filled in via registration code in a subsequent section. &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=config.yaml"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Creating an Azure IoT Hub&lt;/h3&gt;Log into the Azure Portal, if you don't have an account you can sign up for a free one &lt;a href="https://azure.microsoft.com/en-us/free/"&gt;here&lt;/a&gt;&amp;nbsp;that will supply you with $200 of free credit. &amp;nbsp;This demo solution is very light on Azure resources, so don't worry about draining your free credits, even if you leave it running for a few days. &lt;br /&gt;&lt;br /&gt;Once you are logged into the portal select the `+` icon in the top left corner of the screen and search for `IoT Hub`.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-u3COsNP0zc8/WDnCatDRReI/AAAAAAAAAdo/f8FpAYxhu3MeXtgrVLIkY3zZwLLYpPMYgCLcB/s1600/Create.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="640" src="https://4.bp.blogspot.com/-u3COsNP0zc8/WDnCatDRReI/AAAAAAAAAdo/f8FpAYxhu3MeXtgrVLIkY3zZwLLYpPMYgCLcB/s640/Create.PNG" width="460" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;After selecting the resource press `Create` in the lower left corner of the newly presented blade.&lt;br /&gt;&lt;br /&gt;You'll be subsequently prompted to enter configuration information for the IoT Hub. &amp;nbsp;There are only a few settings here worth mentioning:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;In the `Pricing and Scale Tier` menu, be sure to click into it and select the `Free` tier. &amp;nbsp;This will provide you with more than enough of a daily messaging rate to complete this tutorial and continue exploring on your own.&lt;/li&gt;&lt;li&gt;Select one (1) IoT Hub Units, if it's not already populated.&lt;/li&gt;&lt;li&gt;Change the `Device to Cloud Partitions` count to two (2). &amp;nbsp;This setting helps with scale out for the Hub and having fewer partitions will ease experimentation with reading Device to Cloud messages later. &amp;nbsp;For further reading, check out &lt;a href="https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-overview"&gt;this introductory article on Event Hubs&lt;/a&gt;&amp;nbsp;to understand the mechanics behind partitions. &amp;nbsp;&lt;/li&gt;&lt;li&gt;Make sure to select `create new` for the Resource Group setting, this will allow for easy resource clean up later.&lt;/li&gt;&lt;li&gt;&amp;nbsp;Select an available region that is within your legal jurisdiction and/or close to your geographic local. &amp;nbsp;Please note that data generated by your IoT solutions such as latitude/longitude, city/state/province, postal code, occupancy or facility egress, and/or other pieces of end user information, may be considered Personally Identifiable Information (PII). &amp;nbsp;As such, many countries govern where this data can be transmitted and where and how it can be persisted, even temporarily. &amp;nbsp;It is up to you, the developer, to maintain compliance with these regulations - consult legal aid if you do not fully understand these requirements. &amp;nbsp;&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-VXTZ-ymsCWs/WDnDFrCXRtI/AAAAAAAAAds/I0wr52lzzM8YHtXCMOtPjNAsd7nIAFtjQCLcB/s1600/Initialize.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="576" src="https://3.bp.blogspot.com/-VXTZ-ymsCWs/WDnDFrCXRtI/AAAAAAAAAds/I0wr52lzzM8YHtXCMOtPjNAsd7nIAFtjQCLcB/s640/Initialize.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;After entering the IoT Hub configuration information, press `Create` - you will be returned to the your Portal Dashboard while Azure sets up the Hub. &amp;nbsp;Now would be a great time for an espresso!&lt;br /&gt;&lt;br /&gt;(a few minutes later)&lt;br /&gt;&lt;br /&gt;With an espresso in hand, navigate to the newly created IoT Hub. &amp;nbsp;While it's worth exploring all the good information presented in the Hub's main portal blade, we'll need to make note of a few specific things before writing the application code.&lt;br /&gt;&lt;br /&gt;In the section labeled `Overview`, copy the IoT Hub's `host name` value into the config.yaml file's `IoTHubUri` setting. &amp;nbsp;My IoTHubUri value will be `iot-fsharp-hub.azure-devices.net`.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-LfCCiOKJCbM/WDnNoCFK9oI/AAAAAAAAAeI/C67oKO--HygzfYff0FnHdxyVjz9mH91TgCLcB/s1600/Overview.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="226" src="https://3.bp.blogspot.com/-LfCCiOKJCbM/WDnNoCFK9oI/AAAAAAAAAeI/C67oKO--HygzfYff0FnHdxyVjz9mH91TgCLcB/s640/Overview.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Scroll down the list of sections until you find the `Shared access policies` entry and click on it. &amp;nbsp;The blade will be extended with access accounts - select the `iothubowner` account. &amp;nbsp;Please note that for anything beyond toy solutions, fine tuned access controls that restrict user and subsystem permissions is imperative. Giving an application or other user the `iothubower` permission level is a recipe for a security disaster!&lt;br /&gt;&lt;br /&gt;Once the `iothubowner` entry is selected, a new blade will be presented with security information. &amp;nbsp;Copy the `Connection string - primary key` value into the config.yaml file's 'ConnectionString` setting.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-haPclwIbVyw/WDnMfUt6IXI/AAAAAAAAAeE/9W_47fDrfxMuZ7rDEGJplvd4gu4RZeqsgCLcB/s1600/Security.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="448" src="https://2.bp.blogspot.com/-haPclwIbVyw/WDnMfUt6IXI/AAAAAAAAAeE/9W_47fDrfxMuZ7rDEGJplvd4gu4RZeqsgCLcB/s640/Security.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Continuing with the laundry list of disclaimers ... note that the portal has provided you with two (2) keys and two (2) corrosponding connection strings which include those keys in their bodies. &amp;nbsp;All applications that connect to the IoT Hub should have the capability to fail over between theses keys to ensure application up-time. &amp;nbsp;Also note that you'll want to develop a method for key rotation that meets your security requirements. &amp;nbsp;Though the posts are a bit old (2012), I suggest reviewing Bruce Kyle's awesome &lt;a href="https://blogs.msdn.microsoft.com/usisvde/2012/03/07/windows-azure-security-best-practices-part-1-the-challenges-defense-in-depth/"&gt;Windows Azure Security Best Practices&lt;/a&gt; series, to help your develop a cloud security mindset. &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;With our configuration set up, let's get to writing some F#!&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Device Registration&amp;nbsp;&lt;/h3&gt;The next step along this IoT journey will be to write a small application that registers the simulated device with the IoT Hub; this process will generate a key that will subsequently be stored in the config.yaml file.&lt;br /&gt;&lt;br /&gt;With the solution open in Visual Studio open the Package Manager Console - Tools &amp;gt; Nuget Package Manager &amp;gt; Package Manager Console -&amp;gt; Select the `DeviceIdentity` project and run the following commands to install the application's dependencies:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Install-Package Fsharp.Configuration&lt;/li&gt;&lt;li&gt;Install Package Microsoft.Azure.Devices&lt;/li&gt;&lt;/ul&gt;We are pulling in the Fsharp.Configuration package because it includes a YAML type provider that we'll use to easily parse the config.yaml file.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The application code will start simply by opening the dependent libraries, creating a `Config` type using the YAML Type Provider and then printing out to the console the Hub's connection string.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=RegisterDevices-Program.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;With the shell of the registration application reading from the config file, we now need code to create an IoT Hub Registry Manager, add devices, upgrade our key printing capabilities and persist the Azure generated Device Key to the config.yaml file. &amp;nbsp;So in that order:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=RegisterDevices-Additional.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The above code should replace the existing `printfn` call in the `Program.fs` file. &amp;nbsp;Notice that we've also run the `addDevice` function to kick the whole process off. &lt;br /&gt;&lt;br /&gt;Now baring compilation errors, set the DeviceIdentity project as the default startup project, and run the application; the config.yaml file will be updated with the Azure generated Device Key. &amp;nbsp;But, we have a problem ... running the application a second time will result in a runtime `DeviceAlreadyExistsException`; so lets handle that.  We'll start with adding a function that can `Get` a device's configuration from the IoT Hub based on it's Device Id in the event that it already exists in the device registry. &amp;nbsp;Additionally, we'll enhance the `addDevice` function to properly handle the already exists exception.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=RegisterDevices-Enhanced.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This code uses the simple `try ... with` expression to attempt the `addDevice` call, falling back to the new `getDevice` function in the event that the application encounters the aforementioned already exists exception. &amp;nbsp;Deleting the Device Key in the config.yaml file and a re-run should now properly demonstrate our intended behavior. &amp;nbsp;Oh, and congratulations - you've successfully added a device to your Azure IoT Hub using your cunning wits, some copy pasta and a bit of friendly F#!&lt;/div&gt;&lt;h3&gt;Device Simulator&amp;nbsp;&lt;/h3&gt;The next step in the process will be to create a simulated device. &amp;nbsp;For this tutorial, we are going to simulate a field gateway device collecting wind speed sensors that have been placed at random geographic intervals in the area surrounding the Microsoft campus in Redmond, WA.&lt;br /&gt;&lt;br /&gt;We'll need to initialize the project by installing the required dependencies. &amp;nbsp;Run the following commands in the package manager console after selecting the `DeviceSimulator` project in the console's project drop-down:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Install-Package Fsharp.Configuration&amp;nbsp;&lt;/li&gt;&lt;li&gt;Install-Package Microsoft.Azure.Devices.Client&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;The device simulator application layout should be familiar after coding up the registration application. &amp;nbsp;It begins simply enough by opening the required dependencies, again creating the configuration type using the YAML Type Provider (though this time we'll set the ReadOnly flag to `true` to prevent accidental changes), extracting some config data and building a device client for the IoT Hub. &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=DeviceSimulator-Initial.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Though occasionally controversial in some circles, I am a strong advocate for pulling out data as types and there is a prime opportunity for that with the data simulator. &amp;nbsp;We are in need of a record type that can express a simulated wind-speed measurement. &amp;nbsp;This record type should include not only the measurement information but also the unique Device Id, some geo-coordinate data and an observation time that we can use further down the line for monitoring or graphing. &amp;nbsp;Let's add this new record type to our Device Simulator's `Program.fs` file just after the config type definition.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=DeviceSimulator-DataType.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;With the measurement type defined we'll need some functions to assist with mocking the field array. &amp;nbsp;I prefer to work these types of development tasks from the top down, effectively starting with the result and refining the functionality at progressively lower levels. &amp;nbsp;So let's give that a shot here and look over our requirements:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Send a stream of measurement events to the IoT Hub. &amp;nbsp;&lt;/li&gt;&lt;li&gt;Events/measurements should have some temporal spacing between them, i.e. we'll take measurements every N seconds.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Model several devices producing data and concatenate their results such that the simulator application functions more as a field gateway than single measurement device. &amp;nbsp;&lt;/li&gt;&lt;li&gt;Sample data stream should be be effectively infinite.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Communicate with IoT Hub in an asynchronous way.&lt;/li&gt;&lt;/ul&gt;So how are we going to accomplish this? &amp;nbsp;Let's begin by saying that we'll have an infinite sequence of strings, that are themselves delimited measurements, that we'll pass to some function that will transmit the string to the IoT Hub on 5 second intervals. Breaking the problem in half, let's define two further functions, one that creates an infinite sequence of measurement data and another function that takes a string and sends it to IoT Hub.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=DeviceSimulator-DataStreamOrig.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The data send task is rather straightforward. &amp;nbsp;We'll create a new Message based off the conversion of the string data to a byte array and then pass that message onto the Device Client for transmission to the IoT Hub. &amp;nbsp;The function will finish with a side effect, by printing the transmitted message to the console.&lt;br /&gt;&lt;br /&gt;Creating the (nearly) infinite stream of data is equally as trivial thanks to a few helper functions that F# brings to the table. &amp;nbsp;If you are coming from C# and are familiar with Linq, then the F# Sequence should be familiar territory as it's mental model maps nicely onto IEnumerable ... a (potentially) infinite series of elements that are lazily evaluated.&lt;br /&gt;&lt;br /&gt;F# makes data generation a non-issue as we can create an infinite sequence of elements using `Seq.initInfinite`. &amp;nbsp;`Seq.initInfinite` must be passed a function with the signature (int -&amp;gt; 'T) that is used to generate a sequence elements &amp;lt;`T&amp;gt; for each `int` that is passed in. The astute reader will notice that it is possible to run out of integers, so we wont technically have an "infinite" sequence. &amp;nbsp;But given that we are spacing our data out in 5 second increments, the simulator should be able to run for roughly 340 years before the sequence runs out of elements.&lt;br /&gt;&lt;br /&gt;In this case, we'll pass `Seq.initiInfinite` a concatenated string of randomized wind-speed measurements based on an array of pre-initialized sites by using:&lt;br /&gt;&lt;br /&gt;`msftSites |&amp;gt; Array.mapi (fun idx site -&amp;gt; windSpeedMessage site idx)`&lt;br /&gt;&lt;br /&gt;Mapping the windsSpeedMessage function over the collection of `msftSites` along with an indexer, using Array.mapi will allow us to randomize the site data and ultimately generate an Array of `telemetryDataPoint` records.  To generate our list of sites, let's do a naive port of this &lt;a href="http://gis.stackexchange.com/a/68275"&gt;Stack Overflow code&lt;/a&gt; over to F# and initialize an Array of 10 `GeoCoordinates`, priming the computation with the Lat/Long for Microsoft Way in Redmond, WA. &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=DeviceSimulator-Sites.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Similarly, we can create a wind-speed message function that will return a `telemetryDataPoint` record built up from the randomized site data, and a randomized wind-speed centering on 10 (units, could be mph). &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=DeviceSimulator-WindSpeed.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;And here is all of our code put together:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=DeviceSimulator-Program.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Message Compression&lt;/h3&gt;If there is anything we can count on, it's that requirements change. &amp;nbsp;Unfortunately for us, our Partner has an additional constraint around message size. &amp;nbsp;They would like to compress the data we send to the IoT Hub to save on gateway to cloud bandwidth. &amp;nbsp;Low bandwidth situations often call for data compression in one form or another, so let'e revisit the Device Simulator and enhance it with the ability to perform data compression.&lt;br /&gt;&lt;br /&gt;The functional nature of the Simulator application makes adding additional behavior, particularly additional data processing, a snap!&lt;br /&gt;&lt;br /&gt;Open the Program.fs file of the Device Simulator project and add the following open:&lt;br /&gt;&lt;br /&gt;`open System.IO.Compression`&lt;br /&gt;&lt;br /&gt;Now we'll do a naive port of Mads Kristensen's gzip compression blog post, to F#. &amp;nbsp;We'll also need to update the `dataSendTask` to compress the delimited string of measurements and decompress the compressed string for a console print - just to prove that we have compression &amp;amp; decompression working!&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=DeviceSimulator-Compression.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Moving Data with Azure Event Hubs&lt;/h3&gt;Given the change in requirements that added compression, we'll need to enhance our solution architecture to not only shred the delimited measurement data, but also to decompress the messages. &amp;nbsp;There a are a handful of ways to accomplish this in Azure and given that Functions recently entered General Availability, let's give that path a shot.&lt;br /&gt;&lt;br /&gt;While IoT Hubs are a distinctly different service from Event Hubs, they do provide an Event Hub compatible interface. &amp;nbsp;We'll leverage the IoT Hub's Event Hub interface to wire up an Azure Function that will decompress our messages, split them on the `|` delimiter and forward them onto a new Event Hub for further processing on our way toward PowerBI visualization.&lt;br /&gt;&lt;br /&gt;Let's begin by building an Event up that we'll target from our Azure Function. Log into the Azure Portal and search for `Event Hubs`. &amp;nbsp;The selection you are making is for the service to which we'll need to add an Event Hub to for the project.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-XueXElTlcbw/WDxW4T82trI/AAAAAAAAAek/Ooi5gldkU1IyFkbtZsIqDB6-Nl0pSofEwCLcB/s1600/EventHubsCreatePNG.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="354" src="https://2.bp.blogspot.com/-XueXElTlcbw/WDxW4T82trI/AAAAAAAAAek/Ooi5gldkU1IyFkbtZsIqDB6-Nl0pSofEwCLcB/s640/EventHubsCreatePNG.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;After pressing `Create`, you'll see the main overview panel for the Event Hub Service. &amp;nbsp;Scroll down to `Event Hubs`, press the `+ Event Hub` tab and enter in a name for the new Event Hub. &amp;nbsp;All the other settings can be left defaulted. &amp;nbsp;Note that this process will automatically add a storage account with a name that is part hub name and part GUID.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-5Ul6AhhHNeU/WDxXpFxOKMI/AAAAAAAAAeo/ojd89_gEsccOYi7V7kOXfgD5Sp56rAoQgCLcB/s1600/CreateEHub.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="352" src="https://3.bp.blogspot.com/-5Ul6AhhHNeU/WDxXpFxOKMI/AAAAAAAAAeo/ojd89_gEsccOYi7V7kOXfgD5Sp56rAoQgCLcB/s640/CreateEHub.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The new event hub will take a few minutes to deploy and will show up in the center pane of the image above. &amp;nbsp;Once the event hub is displayed, select it and scroll down to `Shared access policies`. &amp;nbsp;A new pane will open, select `+ Add` and create a new policy with `Manage` claims. &amp;nbsp;The blade should now refresh and present primary and secondary tokens as well as connection strings for those tokens. Select the primary connection string and paste it into a text editor - we'll need to modify it slightly before using it in our application. &lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-H9T7QC-8TnA/WDxaL6cz5zI/AAAAAAAAAe8/Nz5Q3qJ7RJM7w3Um5-XdTcvbhM8GABZtACLcB/s1600/eventhub-sas.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="264" src="https://1.bp.blogspot.com/-H9T7QC-8TnA/WDxaL6cz5zI/AAAAAAAAAe8/Nz5Q3qJ7RJM7w3Um5-XdTcvbhM8GABZtACLcB/s640/eventhub-sas.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The connection string should look like this:&lt;br /&gt;&lt;br /&gt;`Endpoint=sb://{hub_service_name}.servicebus.windows.net/;SharedAccessKeyName=default;SharedAccessKey={key};EntityPath={hub_name}`&lt;br /&gt;&lt;br /&gt;Split the string at the last semi-color (`;EntityPath=...`) and place it on a second line for later use.&lt;br /&gt;&lt;br /&gt;While we are gathering connection string data, let's pull the IoT Hub's Event Hub interface connection information. &amp;nbsp;Navigate back to the Portal Dashboard and select the IoT Hub. &amp;nbsp;Scroll down to `Messaging` which will open a second pane containing the Event Hub interface information for the IoT Hub. &amp;nbsp;Copy both the `Event Hub-compatible name` and the `Event Hub-compatible endpoint` strings and save them off to the aforementioned text file.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-wYmmd778mvc/WDxg1Zjt_zI/AAAAAAAAAfk/rRRnvL1GNnUMFFQifFxVvgZ3qro2BpzfwCLcB/s1600/IoTHub-Messaging.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="640" src="https://3.bp.blogspot.com/-wYmmd778mvc/WDxg1Zjt_zI/AAAAAAAAAfk/rRRnvL1GNnUMFFQifFxVvgZ3qro2BpzfwCLcB/s640/IoTHub-Messaging.PNG" width="460" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Navigate back to `Shared access policies`, select the `iothubowner` policy and copy the `Primary key` value into the text file.&lt;br /&gt;&lt;h3&gt;Azure Function&amp;nbsp;&lt;/h3&gt;With batched and compressed data flowing from the device simulator to IoT Hub, we now need an Azure Function that can decompress the message, shred the concatenated sensor data and re-post each individual message onto the new event hub we created in the previous section. &amp;nbsp;While Azure Functions are relatively straightforward, there are a number of steps to this process and many features are marked as being in `Preview` and/or `Experimental` - keep in mind that some things may be slightly different than shown below.&lt;br /&gt;&lt;br /&gt;In the Portal, select the `+` icon in the top left and search for `Function App`. &lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-KFl2ApZZXqs/WDxc95j9NYI/AAAAAAAAAfM/O_1VgSwbLywc2ucwClTBMVeNMAWeHh2_wCLcB/s1600/Function-App-Select.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="352" src="https://2.bp.blogspot.com/-KFl2ApZZXqs/WDxc95j9NYI/AAAAAAAAAfM/O_1VgSwbLywc2ucwClTBMVeNMAWeHh2_wCLcB/s640/Function-App-Select.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Press `Create` to kick off the deployment - the app should only take a few moments to create.&lt;br /&gt;&lt;br /&gt;Once the Function App is deployed, a quick-start blade will present options to create C# and JavaScript functions. &amp;nbsp;Use the `+ New Function` tab in the upper left corner to reveal the full template list. &amp;nbsp;Using the language drop-down, filter for only F# templates and select the `EventHubTrigger-FSharp` template. &lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-Pv98-oqpgWw/WDxds6qmfZI/AAAAAAAAAfQ/eTMYgC3xPEkMXqCfkb30X32eyWDxOeRowCLcB/s1600/Function-Template.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="408" src="https://3.bp.blogspot.com/-Pv98-oqpgWw/WDxds6qmfZI/AAAAAAAAAfQ/eTMYgC3xPEkMXqCfkb30X32eyWDxOeRowCLcB/s640/Function-Template.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;With the `EventHubTrigger-FSharp` template selected, a pane will show up below the templates prompting for input data. &lt;br /&gt;&lt;br /&gt;Give the function a name. &amp;nbsp;In the text box for `Event Hub name`, enter the `Event Hub-compatible name` from the IoT Hub that was saved off to your text file in the previous section. Continue by pressing the `new` button next to the `Event Hub connection` text box. &amp;nbsp;This will present a new blade where we'll enter the connection string for the Event Hub interface of the IoT Hub.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-Vy4YLDzM8jw/WDxiElPgbFI/AAAAAAAAAfs/T_NVq6EguYMaAxQhP0edImQ8UZ5IuMrMQCLcB/s1600/Function-ConnectionString.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="308" src="https://1.bp.blogspot.com/-Vy4YLDzM8jw/WDxiElPgbFI/AAAAAAAAAfs/T_NVq6EguYMaAxQhP0edImQ8UZ5IuMrMQCLcB/s640/Function-ConnectionString.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;In the text file paste this template connection string and add the values saved off earlier:&lt;br /&gt;&lt;br /&gt;`Endpoint={Event Hub-compatible endpoint};SharedAccessKeyName=iothubowner;SharedAccessKey={iothubowner_primary_key}`&lt;br /&gt;&lt;br /&gt;The result should look like this:&lt;br /&gt;&lt;br /&gt;`Endpoint=sb://ihsuprodbyres001dednamespace.servicebus.windows.net;SharedAccessKeyName=iothubowner;SharedAccessKey=NWpfd9yzCX/qj1+tKGdMAsXa+7KZEJYVQ9Z9vZDAiBo=`&lt;br /&gt;&lt;br /&gt;Paste the connection string into the `Connection string` field and press `OK`.&lt;br /&gt;&lt;br /&gt;Back in the template pane, press the `Create` button at the bottom of the blade. &amp;nbsp;The portal will present a run.fsx file, and likely some error messages that can safely be ignored for now. &lt;br /&gt;&lt;br /&gt;Select the `Integrate` tab under the Function and update the `Event parameter name` to `input` and press `Save`. &lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-b9UPaxgqKyU/WDxsifgX0TI/AAAAAAAAAgI/2bY2JwPt4z49_3UnC09BY8gcu4Fgs-XdACLcB/s1600/Function-input.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="308" src="https://2.bp.blogspot.com/-b9UPaxgqKyU/WDxsifgX0TI/AAAAAAAAAgI/2bY2JwPt4z49_3UnC09BY8gcu4Fgs-XdACLcB/s640/Function-input.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Click back to the `Develop` tab and update the Run function's first parameter name, as well as it's use in the log statement, to `input`. &amp;nbsp;Press `Save and run`. &amp;nbsp;The Function should compile and execute.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-bETeVMO3YIo/WDxtd14xT-I/AAAAAAAAAgM/6mKY5hXZeQc7fun-5R7MXNWrc6SuYEZ5wCLcB/s1600/Function-input-updatePNG.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="134" src="https://3.bp.blogspot.com/-bETeVMO3YIo/WDxtd14xT-I/AAAAAAAAAgM/6mKY5hXZeQc7fun-5R7MXNWrc6SuYEZ5wCLcB/s640/Function-input-updatePNG.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;In order to post the shredded messages to our Event Hub, we'll need the WindowsAzure.ServiceBus Nuget package. &amp;nbsp;Thankfully, the Functions service provides an easy mechanism to add dependencies. &amp;nbsp;In the upper right corner of the Function work-space, select `View Files` and press `+Add` at the bottom of the newly presented pane. &amp;nbsp;Enter `project.json` and press `enter`&lt;enter&gt;. &amp;nbsp;Much like the ASPNET CORE projects, we can add project metadata, and dependencies, to the Function app using the project.json file. &amp;nbsp;The text below can be pasted into the project.json file, edited and saved, which will kick off the Nuget package restore process.&amp;nbsp;&lt;/enter&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=Function-project.json"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Flip back to the run.fsx file and let's get working on the code for decompressing, shredding and re-posting of the simulated sensor data. &lt;br /&gt;&lt;br /&gt;Delete the existing contents of the `run.fsx` file and add in our reference directives and open expressions:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=Function-open.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Bind two identifiers that will hold the target Event Hub name and connection string information from the previous section (the connection string we split on `EntityPath`).&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=Function-connectionstring.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Add in the `decompress` function we used in the `RegisterDevices` project and start the binding for the Functions `Run` function like so:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=Function-decompress.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The `Run` function needs to create an Event Hub client, decompress the input string, shred the batched sensor data and re-post each sensor measurement using the Event Hub client. &amp;nbsp;We can easily bind the decompressed data to an identifier in the run function and create the Event Hub client like so:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=Function-run-initial.fs"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The last thing we need to do is split the grouped data on the `|` delimiter, iterate over the array result of that operation and ask the eventHubClient to `Send` each JSON payload.  Here is the complete function code including the split and re-post. &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=Function-run.fsx"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;Notice the added debug log statement that we can now use to test our function. &amp;nbsp;In the upper right corner of the Function page press `Test` to reveal a test pane. &amp;nbsp;Paste the following text into the `Request body` and press `Save and run`. &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=Function-test-data.txt"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The function app will re-compile and execute on the test data, producing a log output like so:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-SvDl75fap_g/WDxyzCR7igI/AAAAAAAAAgk/1QeAaby-NiAokJVeLTYMg-SIEt65p22GACLcB/s1600/Function-output.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="226" src="https://3.bp.blogspot.com/-SvDl75fap_g/WDxyzCR7igI/AAAAAAAAAgk/1QeAaby-NiAokJVeLTYMg-SIEt65p22GACLcB/s320/Function-output.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Azure Stream Analytics&amp;nbsp;&lt;/h3&gt;With the Azure Function properly decompressing and shredding the IoT Hub data, and posting the results to our Event Hub, we can now focus on aiming our sensor data at PowerBI for display. &amp;nbsp;The easiest way to set up a properly shaped streaming dataset for PowerBI is to pass the Event Hub events through an Azure Stream Analytics Job (ASA).&lt;br /&gt;&lt;br /&gt;Back in the Portal, select the `+` icon in the upper left corner and Search for `Stream Analytics`. &amp;nbsp;Select `Stream Analytics Job` and press `Create` in the new blade.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-iydmH9RQhCs/WDx1QLRJpZI/AAAAAAAAAgw/UHd7XuSdoXMbL-dyLvd9FmRZJrY0X0WxQCLcB/s1600/ASA-init.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="344" src="https://4.bp.blogspot.com/-iydmH9RQhCs/WDx1QLRJpZI/AAAAAAAAAgw/UHd7XuSdoXMbL-dyLvd9FmRZJrY0X0WxQCLcB/s640/ASA-init.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;The Portal will present a new configuration blade that requires a `Job name`; be sure to add the job to the existing resource group for cleanup later. Press `Create` to kick off the deployment of the Stream Analytics Job.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-wccysSSvLes/WDx1z-7z8II/AAAAAAAAAg0/JbkT_nITRlUePfizNWRepm2h1R3FW1FwACLcB/s1600/ASA-create.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="640" src="https://3.bp.blogspot.com/-wccysSSvLes/WDx1z-7z8II/AAAAAAAAAg0/JbkT_nITRlUePfizNWRepm2h1R3FW1FwACLcB/s640/ASA-create.PNG" width="260" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Once the deployment completes, select the `Inputs` tab of the ASA job. &amp;nbsp;Press the `+ Add` button at the top of the new pane and enter the following information:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&amp;nbsp;Input Alias - this will be the value we reference in the `from` field of the ASA query&lt;/li&gt;&lt;li&gt;Source Type - set to `Data Stream`&lt;/li&gt;&lt;li&gt;Source - select `Event Hub` from the drop down&lt;/li&gt;&lt;li&gt;Subscription - select `Use event hub from current subscription`&lt;/li&gt;&lt;li&gt;Service bus name - select the event hub service name created a few sections ago&lt;/li&gt;&lt;li&gt;Event hub name - select the event hub name created in the previous event hub service&lt;/li&gt;&lt;li&gt;Event hub policy name - select the policy that maps to the `Manage` policy&amp;nbsp;&lt;/li&gt;&lt;li&gt;Event hub consumer group - leave blank to default to the `$Default` consumer group&lt;/li&gt;&lt;li&gt;Event serialization format - select JSON from the dropdown&lt;/li&gt;&lt;li&gt;Encoding - leave it set to `UTF-8`&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-vC0bhvNE2zc/WDx3zQMhC6I/AAAAAAAAAg8/2F8t9b6T7TI2XLooA5AiaeXKWQEEOcXeACLcB/s1600/ASA-input.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="430" src="https://4.bp.blogspot.com/-vC0bhvNE2zc/WDx3zQMhC6I/AAAAAAAAAg8/2F8t9b6T7TI2XLooA5AiaeXKWQEEOcXeACLcB/s640/ASA-input.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Press `Create` to complete the input definition.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Select the `Outputs` tab and press the `+ Add` button at the top of the pane. &amp;nbsp;Give the output alias a name and set the Sink to `Power BI`. &amp;nbsp;The portal will ask for Authorization to wire itself up to a PowerBi subscription. &amp;nbsp;If you don't already have a PowerBI account you can create one for free on the &lt;a href="https://powerbi.microsoft.com/en-us/get-started/"&gt;PowerBI Getting Started page&lt;/a&gt;. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-ST3Ps9_32fU/WDx4-VHfomI/AAAAAAAAAhI/Cs1rhdEwv8MIfRrlxPGWNdJDloEW115oQCLcB/s1600/asa-powerbi-out.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="428" src="https://1.bp.blogspot.com/-ST3Ps9_32fU/WDx4-VHfomI/AAAAAAAAAhI/Cs1rhdEwv8MIfRrlxPGWNdJDloEW115oQCLcB/s640/asa-powerbi-out.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;`Authorize` the Portal to connect to PowerBI which will re-direct you to an MSA login screen. &amp;nbsp;Once the login process is completed, the Portal will redirect you to complete wiring up the ASA job output. &amp;nbsp;For the `Group Workspace` drop-down select `My Workspace` and enter new names for the `DataSet Name` and `Table Name` fields.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-gvZaMzkdE1Q/WDx4-dUerTI/AAAAAAAAAhM/otIR2lrYeiIFlqn2OCaBFr0cu3VWYjMVwCEw/s1600/ASA-post-auth.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="640" src="https://4.bp.blogspot.com/-gvZaMzkdE1Q/WDx4-dUerTI/AAAAAAAAAhM/otIR2lrYeiIFlqn2OCaBFr0cu3VWYjMVwCEw/s640/ASA-post-auth.PNG" width="260" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;With the output defined we can complete the ASA job set up by building the query that will shape our data for PowerBI consumption. &amp;nbsp;Remember that our JSON sensor data is a complex data structure with the GeoCoordinate sub-type that will need to be flattened for PowerBI consumption. Select the `Query` tab of the ASA Job which will open a new pane with some default SQL'ish code. &amp;nbsp;Delete the existing query and enter the following:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ccd6231d6ac1952e6b072d39fda23c19.js?file=ASA-query.sql"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This query will &amp;nbsp;create a new data object that flattens the location data, extracting just the Latitude and Longitude values along with the top level DeviceId, Wind Speed, and Observation Time values.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Navigate back to the ASA `Overview` tab and press `Start` at the top of the overview pane. &amp;nbsp;Note that ASA jobs are notoriously slow to start and stop ... be patient, it will eventually start. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Flip back to Visual Studio, set the Device Simulator as the startup application and run it. &amp;nbsp;After a few minutes you should start to see Monitoring Events on the ASA overview page.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-jCRPaLd9BXk/WDyL7kwLNiI/AAAAAAAAAhY/PZN7SYIhfY0r8TNNiwe6spKyGCg799NSgCLcB/s1600/ASA-running.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="640" src="https://2.bp.blogspot.com/-jCRPaLd9BXk/WDyL7kwLNiI/AAAAAAAAAhY/PZN7SYIhfY0r8TNNiwe6spKyGCg799NSgCLcB/s640/ASA-running.PNG" width="554" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Power BI&lt;/h3&gt;The final step in out F# &amp;amp; IoT exploration is to visualize our sensor data. &amp;nbsp;We'll leverage PowerBI to display geographic information and a historical line chart for the simulated sensors.&lt;br /&gt;&lt;br /&gt;Log into PowerBI and in the left pane scroll down to `Datasets`, further selecting `Streaming datasets`. &amp;nbsp;This will bring up a menu of the available streaming dataset, one of which should be the output of the ASA job.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-th0tZ2Uk5KE/WDyNsojdnCI/AAAAAAAAAhg/PoqMTpDqbRY7SZ_0qdVreWQqCZNy6Mv8QCLcB/s1600/PBI-SDS.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="188" src="https://1.bp.blogspot.com/-th0tZ2Uk5KE/WDyNsojdnCI/AAAAAAAAAhg/PoqMTpDqbRY7SZ_0qdVreWQqCZNy6Mv8QCLcB/s640/PBI-SDS.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;On the far right on the IoT dataset, press the `Create Report` icon. &amp;nbsp;You will be redirected to a new blank report. &amp;nbsp;From the Visualizations fly-out on the right, select the regular "Map" visualization.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-Kp41JyU_Qyk/WDyO3DlA12I/AAAAAAAAAhw/vhgPzAJMZB0RRxqJpdSQVyLwI16tn-8pgCLcB/s1600/PBI-map.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="162" src="https://2.bp.blogspot.com/-Kp41JyU_Qyk/WDyO3DlA12I/AAAAAAAAAhw/vhgPzAJMZB0RRxqJpdSQVyLwI16tn-8pgCLcB/s640/PBI-map.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;To create the geographic map:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Drag the `deviceId` Field into the Legend of the visualization&lt;/li&gt;&lt;li&gt;Drag latitude to Latitude&lt;/li&gt;&lt;li&gt;Drag longitude to Longitude&lt;/li&gt;&lt;li&gt;Drag windspeed to Size, select the twill and set the value to the `Average`&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;The resulting graph will look like this:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-uDplBUgCm8k/WDyUkJQPzDI/AAAAAAAAAiM/g24Jqqb0lC0Bs_rm7rkVOa4hrVnAB860wCLcB/s1600/geo-graph.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="334" src="https://3.bp.blogspot.com/-uDplBUgCm8k/WDyUkJQPzDI/AAAAAAAAAiM/g24Jqqb0lC0Bs_rm7rkVOa4hrVnAB860wCLcB/s640/geo-graph.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;To generate the historical speed chart, add a line chart to the report and set the following values:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Axis - osbTime&lt;/li&gt;&lt;li&gt;Legend - deviceId&lt;/li&gt;&lt;li&gt;Values - Average of windSpeed&lt;/li&gt;&lt;/ul&gt;With a bit of filtering you'll end up with a report like so:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-6oAqxslxZSI/WDyXPvBkWFI/AAAAAAAAAic/UoaRaUJLYJ0RP6OaPnfQOqXIOT-dUIXXwCLcB/s1600/Full-pbi.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="384" src="https://3.bp.blogspot.com/-6oAqxslxZSI/WDyXPvBkWFI/AAAAAAAAAic/UoaRaUJLYJ0RP6OaPnfQOqXIOT-dUIXXwCLcB/s640/Full-pbi.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;h3&gt;Conclusion &amp;nbsp;&amp;nbsp;&lt;/h3&gt;I hope this tutorial has illuminated some of the ways that F# fits nicely into the world of IoT, especially in the context of Cloud solutions. We've gone from data generation, through transmission; onto data post-processing and through visualization. &amp;nbsp;At each one of these steps are opportunities where F# and the community's F# tooling can play a deeper and more meaningful role. &amp;nbsp;And the best part of all this? ... Our community is only getting started. &amp;nbsp;We still have so much to say about topics like application correctness, developer productivity, and nearly every aspect of security. &lt;br /&gt;&lt;br /&gt;My final call to action, equally for those new and old to the language alike, is to stay involved, come listen to people speak or speak yourself, try out the libraries, unit test your C# code with F#, build pet projects, build complex systems, hell build the next Jet; but most of all, remember to enjoy writing code. &amp;nbsp;We write F# because it makes coding fun again, it pushes us to be better, it enables us to be better engineers/coders/developers. &amp;nbsp; &amp;nbsp; &lt;br /&gt;&lt;h3&gt;Further Exercises&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Create functions across the demo applications that will build the connection string from its elements.&lt;/li&gt;&lt;li&gt;Use Fable to create a custom PowerBI Visual.&lt;/li&gt;&lt;li&gt;Create a simulator application and run on Raspbian on a Raspberry Pi&lt;/li&gt;&lt;li&gt;Explore the Azure IoT Gateway SDK and compile a series of F# modules to run in the Gateway on Windows IoT Core&lt;/li&gt;&lt;li&gt;Create and app that will tap the IoT Hub Event Hub interface and pull off a sampling of messages using EventProcessorHost&amp;nbsp;&lt;/li&gt;&lt;li&gt;Test out the Cloud to Device Messaging, Device Management and Device Twin features of the Azure IoT SDK.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/1852038307453785067/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2016/11/introduction-to-azure-iot-with-fsharp.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1852038307453785067'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1852038307453785067'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/11/introduction-to-azure-iot-with-fsharp.html' title='Introduction to Azure IoT with Fsharp'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://4.bp.blogspot.com/-u3COsNP0zc8/WDnCatDRReI/AAAAAAAAAdo/f8FpAYxhu3MeXtgrVLIkY3zZwLLYpPMYgCLcB/s72-c/Create.PNG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-4884324456457166601</id><published>2016-09-08T09:04:00.000-07:00</published><updated>2016-09-08T09:04:06.936-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Azure'/><category scheme='http://www.blogger.com/atom/ns#' term='Gateway'/><category scheme='http://www.blogger.com/atom/ns#' term='CMake'/><category scheme='http://www.blogger.com/atom/ns#' term='IoT'/><title type='text'>Azure IoT Gateway SDK Build Problems</title><content type='html'>I've had the opportunity to start exploring the Azure IoT product suite lately and over all first impressions are very positive. &amp;nbsp;I've rolled a few F# solutions for device management and simulation with good success. &amp;nbsp;The next step of this project has lead me to the Azure IoT Gateway SDK in an attempt to implement a custom filtering/batching/grouping/compression gateway for a field array. &amp;nbsp;Unfortunately, after adding the C++ options to Visual Studio, installing CMake a few times and adding it to my path, I was stuck. &amp;nbsp;Running the included `build.cmd` or CMake by hand lead to a string of errors like:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/33f9b7e28a8d34e87c621e38890a6414.js"&gt;&lt;/script&gt; After some lamenting that this happens every time someone lets me near C code I checked the &lt;a href="https://github.com/Azure/azure-iot-gateway-sdk/issues/3#issuecomment-245637619"&gt;issues list&lt;/a&gt; and found that I cannot follow directions. &amp;nbsp;Aside from making sure that your path to the checked out repo is under 20 characters, because `Windows`, you need to make sure to include the recursive flag in the clone from GitHub. &amp;nbsp;Here is the command for the lazy:&lt;br /&gt;&lt;br /&gt;`git clone --recursive https://github.com/Azure/azure-iot-gateway-sdk.git`&lt;br /&gt;&lt;br /&gt;Happy coding!&lt;br /&gt;&lt;span style="font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-size: x-small;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="font-size: x-small;"&gt;Friendly Disclaimer: I now work for Microsoft in DX&amp;nbsp;&lt;/span&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/4884324456457166601/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2016/09/azure-iot-gateway-sdk-build-problems.html#comment-form' title='3 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4884324456457166601'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4884324456457166601'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/09/azure-iot-gateway-sdk-build-problems.html' title='Azure IoT Gateway SDK Build Problems'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>3</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-8323820745582513056</id><published>2016-04-21T23:00:00.001-07:00</published><updated>2016-04-21T23:00:15.586-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='RabbitMq'/><category scheme='http://www.blogger.com/atom/ns#' term='F#'/><category scheme='http://www.blogger.com/atom/ns#' term='EasyNetQ'/><title type='text'>EasyNetQ Advanced Bus from F#</title><content type='html'>I've been working lately on our company's first production F# application, a simple logging application that spans between our transaction processing system and our Hadoop Cluster. &amp;nbsp;Initially we'll be logging some simple transaction meta data for internal reporting applications, but hope to expand it to other types of logging/audit data, eventually. &amp;nbsp;Given that application could be reactive in nature, I thought it would be fun to play with both the MailboxProcessor and the .Net Reactive Extensions library in this implementation.&lt;br /&gt;&lt;br /&gt;The basic architecture of the application uses EasyNetQ to consume a RabbitMq queue, an async recursive function to push data to HBase and an Rx Subject backed by a ConcurrentQueue to span the producer and consumers.&lt;br /&gt;&lt;br /&gt;I initially wrote an async recursive function to process the rabbit queue using the RabbitMq .Net client library. &amp;nbsp;I quickly realized however, that the yak shaving required to do everything other than consume the queue was generally a waste of my time, SO ... EasyNetQ. &amp;nbsp;The nice thing about EasyNetQ is that it wraps up the whole process nicely in a C# library. &amp;nbsp;The flip side is that it's a tried-and-true C# library and as such, is not as idomatic as one would like to use from F#.&lt;br /&gt;&lt;br /&gt;Since I am new to the F# world, I struggled a bit to get the type signatures together to implement the Advanced Bus from the EasyNetQ library. &amp;nbsp;The following gist is an example of setting up a synchronous message handler that bypasses the built in message de/serializer, instantiating a queue and then wrapping the Advanced Bus in a async block that we can kick off in the main body of our service. See &lt;a href="https://github.com/EasyNetQ/EasyNetQ/wiki/the-advanced-api"&gt;here&lt;/a&gt;&amp;nbsp;for details on the advanced API of RabbitMq.&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/132d7dc6c0571b5907ea0a9f6ad6949b.js"&gt;&lt;/script&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/8323820745582513056/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2016/04/easynetq-advanced-bus-from-f.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/8323820745582513056'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/8323820745582513056'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/04/easynetq-advanced-bus-from-f.html' title='EasyNetQ Advanced Bus from F#'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-7645760908505450903</id><published>2016-04-20T23:33:00.001-07:00</published><updated>2016-04-20T23:33:46.524-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Maker'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Swing'/><category scheme='http://www.blogger.com/atom/ns#' term='Sensory'/><category scheme='http://www.blogger.com/atom/ns#' term='Autism'/><title type='text'>Making a Sensory Swing</title><content type='html'>In a bit of a departure from tech, here's some instructions on making a slick sensory swing for your sensory starved little one.&lt;br /&gt;&lt;br /&gt;Start with a pull-up bar, preferably a bolt together one like &lt;a href="http://www.dickssportinggoods.com/product/index.jsp?productId=13243144"&gt;this one&lt;/a&gt; from Dicks:&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://www.dickssportinggoods.com/graphics/product_images/pDSP1-13472770dt.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://www.dickssportinggoods.com/graphics/product_images/pDSP1-13472770dt.jpg" height="200" width="200" /&gt;&lt;/a&gt;&lt;/div&gt;We'll take advantage of the extensive number of bolts used to assemble this bar to provide hanging points for the swing. &lt;br /&gt;&lt;br /&gt;The hardware shopping list is pretty straightforward:&lt;br /&gt;&lt;br /&gt;(2) 3/16" quick links&lt;br /&gt;(2) 1/4" x 2" fully threaded eye bolts (prefer welded or forged)&lt;br /&gt;(2) 1/4" nylon nuts (nylocks)&lt;br /&gt;(4) 1/4" washers&lt;br /&gt;(2) 1/4" lock washers&lt;br /&gt;(2) 32lbs long, automotive extension springs&lt;br /&gt;(1) 15' x 1" nylon (or similar) truck strap&lt;br /&gt;&lt;br /&gt;Begin assembly by removing the forward and inside carriage bolts from the pull-up bar. &amp;nbsp;Pre-assemble the eye bolts by running a nut up the threads to the seat. &amp;nbsp;Add the lock washer and then one of the flat washers. &lt;br /&gt;&lt;br /&gt;Push the eye bolt through the empty hole from the bottom, drop the second washer and then the nylock. &amp;nbsp;To tighten things up, stick a screwdriver through the eye bolt and run the nylock down until there is a thread or two of the eye bolt past the nylon. &amp;nbsp;Follow-up by running the necked nut back the other direction until the lock washer fully closes.&lt;br /&gt;&lt;br /&gt;Using a quick link, attach the spring to the eye bolt, and then hang the swing from the spring. &amp;nbsp;Unfurl the truck strap, cut off the hook and seal the fray with a lighter. &amp;nbsp;Fold the webbing in half and cut and seal the midpoint, making (2) 7' runs of webbing. &amp;nbsp;With both straps in hand, step into the swing and press the bucket to the floor. &amp;nbsp;From the top, slide a length of the webbing down the center of the spring and pull through. &amp;nbsp;Take the tail of the webbing at the top and tie a simple clove hitch with a locking half hitch to the pull-up bar. &amp;nbsp;Now step out of the swing, you look like an idiot ;-)&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Load up your little one and watch the magic unfold; don't forget to show them how to use the webbing to pull themselves up for more bouncy fun.&lt;br /&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-mqZneG6G8EA/Vxhu2LCf72I/AAAAAAAAAc8/sHy3nz2twVI8fIe2AOXsXlIhubib5D0AQCKgB/s1600/IMG_2605.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="320" src="https://4.bp.blogspot.com/-mqZneG6G8EA/Vxhu2LCf72I/AAAAAAAAAc8/sHy3nz2twVI8fIe2AOXsXlIhubib5D0AQCKgB/s320/IMG_2605.JPG" width="240" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Assembled Eye Bolt&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-gaFrWD1CeOI/Vxhu11zj08I/AAAAAAAAAdA/XF5qvqFrlD4WuOddUt62YymKjQJrE7ZsACKgB/s1600/IMG_2607.JPG" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="320" src="https://1.bp.blogspot.com/-gaFrWD1CeOI/Vxhu11zj08I/AAAAAAAAAdA/XF5qvqFrlD4WuOddUt62YymKjQJrE7ZsACKgB/s320/IMG_2607.JPG" width="240" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Tightening the Nylock&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-pszcoF5MugE/VxhutANLAjI/AAAAAAAAAcw/7oydp386k_sJDMeeCT1-Is_VXUJqIXYEgCKgB/s1600/IMG_2610.JPG" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="320" src="https://2.bp.blogspot.com/-pszcoF5MugE/VxhutANLAjI/AAAAAAAAAcw/7oydp386k_sJDMeeCT1-Is_VXUJqIXYEgCKgB/s320/IMG_2610.JPG" width="240" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Seat the Nylock a thread or two&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;br /&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: right; margin-left: 1em; text-align: right;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-0T99Ad9oGgk/VxhutD-MrzI/AAAAAAAAAcs/yZ6TdoXMGFgv0MZJsMAiY7dbGGIkxZ99QCKgB/s1600/IMG_2612.JPG" imageanchor="1" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="320" src="https://3.bp.blogspot.com/-0T99Ad9oGgk/VxhutD-MrzI/AAAAAAAAAcs/yZ6TdoXMGFgv0MZJsMAiY7dbGGIkxZ99QCKgB/s320/IMG_2612.JPG" width="240" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Webbing exiting spring&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; margin-right: 1em; text-align: left;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-qtlVp1lxGLk/VxhutJmEloI/AAAAAAAAAco/ueih2doenn4vXolzDlD3ZRY5MYkA-wznACKgB/s1600/IMG_2611.JPG" imageanchor="1" style="clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="320" src="https://2.bp.blogspot.com/-qtlVp1lxGLk/VxhutJmEloI/AAAAAAAAAco/ueih2doenn4vXolzDlD3ZRY5MYkA-wznACKgB/s320/IMG_2611.JPG" width="240" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;Webbing tied off &amp;amp; fished through spring&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto; text-align: center;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-P6_cb8Flwl8/VxhuvC9SlJI/AAAAAAAAAc0/o4rY8dLZuJ0yuugcbyUy-uFJXPQKR2KcACKgB/s1600/IMG_2613.JPG" imageanchor="1" style="margin-left: auto; margin-right: auto;"&gt;&lt;img border="0" height="320" src="https://2.bp.blogspot.com/-P6_cb8Flwl8/VxhuvC9SlJI/AAAAAAAAAc0/o4rY8dLZuJ0yuugcbyUy-uFJXPQKR2KcACKgB/s320/IMG_2613.JPG" width="240" /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class="tr-caption" style="text-align: center;"&gt;The swing fully assembled&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/7645760908505450903/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2016/04/making-sensory-swing.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7645760908505450903'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7645760908505450903'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/04/making-sensory-swing.html' title='Making a Sensory Swing'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://4.bp.blogspot.com/-mqZneG6G8EA/Vxhu2LCf72I/AAAAAAAAAc8/sHy3nz2twVI8fIe2AOXsXlIhubib5D0AQCKgB/s72-c/IMG_2605.JPG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-5109362814848878754</id><published>2016-04-19T23:25:00.001-07:00</published><updated>2016-04-19T23:25:28.593-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='NAnt'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Build Pipeline'/><category scheme='http://www.blogger.com/atom/ns#' term='Jenkins'/><category scheme='http://www.blogger.com/atom/ns#' term='NUnit'/><title type='text'>Integrating Jenkins and NUnit3</title><content type='html'>I've long been a fan of the deep integration of JUnit into the Jenkins CI ecosystem. &amp;nbsp;Unfortunately, because most of what we build with our CI server are .Net applications, we are very dependent on a number of plugins to shim between our .Net world and the more Java orientation of Jenkins. &amp;nbsp;One such plugin, that I've grown quite fond of, is the &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/NUnit+Plugin"&gt;NUnit Plugin&lt;/a&gt; that does transforms between NUnit's test result output and the JUnit format that is used for the built in Test Result Trend Graphs.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;After adding NUnit3 to our build server and wiring up our NAnt scripts, my test builds began to fail with 'No NUnit test report files were found.' &amp;nbsp;Browsing the target folder for the artifacts did show a result file that at first blush looked good, but after a bit of research, I came across &lt;a href="https://issues.jenkins-ci.org/browse/JENKINS-27906"&gt;this thread&lt;/a&gt; which gives a pretty good hint about the issue at hand. While that thread proposes implementing a custom xslt transform, there is a much easier solution ... NUnit command line has options that include formatting output,&amp;nbsp;&lt;a href="https://github.com/nunit/dev/wiki/Command-Line-Options#output-specification-format"&gt;see here&lt;/a&gt;. So with a simple modification to our NAnt script we can call the NUnit console specifying an output file and the NUnit2 result file format as follows:&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/64706aa2e98b6d0b7d304546ca63d927.js"&gt;&lt;/script&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/5109362814848878754/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2016/04/integrating-jenkins-and-nunit3.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5109362814848878754'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5109362814848878754'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/04/integrating-jenkins-and-nunit3.html' title='Integrating Jenkins and NUnit3'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-3490424615220546230</id><published>2016-03-29T11:13:00.001-07:00</published><updated>2016-04-05T21:29:57.750-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Pizza Dough!</title><content type='html'>Since no one asked ... A recipe for Pizza Dough!&lt;br /&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;You'll need some hardware to make the process a bit easier:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Large mixing bowl&lt;/div&gt;&lt;div&gt;Kitchen Scale (like &lt;a href="http://www.amazon.com/Ozeri-Professional-Digital-Kitchen-Tempered/dp/B006N0OIIG/ref=sr_1_10?s=kitchen&amp;amp;ie=UTF8&amp;amp;qid=1427176128&amp;amp;sr=1-10&amp;amp;keywords=glass+digital+kitchen+scale+1+gram"&gt;this&lt;/a&gt;)&lt;/div&gt;&lt;div&gt;Bowl Scraper (like &lt;a href="http://www.amazon.com/Ateco-1303-Bowl-Scraper/dp/B000KEUKO2/ref=sr_1_1?s=home-garden&amp;amp;ie=UTF8&amp;amp;qid=1427176203&amp;amp;sr=1-1&amp;amp;keywords=bread+scraper"&gt;this&lt;/a&gt;)&lt;/div&gt;&lt;div&gt;Large plastic food storage bin (like &lt;a href="http://www.amazon.com/Ultra-Seal-8-1-Food-Storage-Bowl/dp/B0042FLXKA/ref=sr_1_10?s=kitchen&amp;amp;ie=UTF8&amp;amp;qid=1427177375&amp;amp;sr=1-10&amp;amp;keywords=sterilite+ultra+seal"&gt;this&lt;/a&gt;)&lt;/div&gt;&lt;div&gt;&lt;div&gt;Pizza Stone (like &lt;a href="http://www.amazon.com/Old-Stone-Oven-4467-14-Inch/dp/B0000E1FDA/ref=sr_1_1?s=home-garden&amp;amp;ie=UTF8&amp;amp;qid=1427177706&amp;amp;sr=1-1&amp;amp;keywords=pizza+stone"&gt;this&lt;/a&gt;)&lt;/div&gt;&lt;div&gt;Pizza Peel (like &lt;a href="http://www.amazon.com/Winco-22-Inch-Wooden-12-Inch-14-Inch/dp/B001VZ6MTQ/ref=sr_1_78?s=kitchen&amp;amp;ie=UTF8&amp;amp;qid=1427178004&amp;amp;sr=1-78&amp;amp;keywords=pizza+peel"&gt;this&lt;/a&gt;)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The hardware is not compulsory, but will make the whole process of making an baking pizzas a more enjoyable and efficient endeavor.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;600 grams King Arthur Bread Flour&lt;/div&gt;&lt;div&gt;250 grams King Arthur All Purpose Flour&lt;/div&gt;&lt;div&gt;500 grams fridge temp filtered water&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Mix and sift flour together and pour the water over. &amp;nbsp;Cover the bowl with a tea towel and let rest for ideally 2 hours ... could be as short as 20 min or as long as 4 hours.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Fold in to your shaggy dough the salt:&lt;br /&gt;&lt;br /&gt;18 grams Kosher salt&lt;br /&gt;&lt;br /&gt;Feed the beasties ius simple ... in a microwave save bowl, bring the water to 130 deg. and add the oil, salt and sugar. Mix gently.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;150 grams of water&lt;/div&gt;&lt;div&gt;2 tsp. extra virgin olive oil&amp;nbsp;&lt;/div&gt;&lt;div&gt;10 grams sugar&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Gently stir into this potent yeast concoction &lt;br /&gt;&lt;br /&gt;2 tsp. Active Yeast (his is most of a packet of dry active yeast)&lt;br /&gt;&lt;br /&gt;Let the yeast bloom for a few minutes. &amp;nbsp;They will start bubbling and gurgling in drunken happiness. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Pour the yeastie-beasties over your shaggy dough and begin to combine with your hand; the dough will be very tacky at first. &amp;nbsp;Once the dough begins to peel away from the side of the bowl slightly, turn it out on to a clean working surface ... I just use the counter top. &amp;nbsp;The following video shows a good kneading technique:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe allowfullscreen="" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/PvdtUR-XTG0/0.jpg" frameborder="0" height="266" src="https://www.youtube.com/embed/PvdtUR-XTG0?feature=player_embedded" width="320"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Our dough will not be as dry as the one in the video, in fact we actually want a very wet dough 80% hydration. &amp;nbsp;Once I've kneaded enough to form a tacky mess, about 15 minutes, I'll begin dipping my hands in water as I continue to knead for 5 more minutes, to increase the over all hydration of the dough. &amp;nbsp;I'll typically consider the dough finished when its an oozing mass that stops spreading when it's about an inch thick at the center.&lt;br /&gt;&lt;br /&gt;Taste the dough. &amp;nbsp;You'll be surprised that it tasks nothing like the raw flour, water and yeast that it is.&lt;br /&gt;&lt;br /&gt;From here I'll turn the dough into a plastic bowl and cover for bulk fermentation on the counter for a few hours. &amp;nbsp;Once the dough shows significant signs of strong fermentation, bubbling, gurgling, and overall looks like a sponge, I'll turn the dough out on to a floured counter and partition into 6 lumps.&lt;br /&gt;&lt;br /&gt;I use a stretch and fold technique along with a cupping roll to pull some tension into the surface of the dough before dropping them into oiled tupperware. &amp;nbsp;Place the dough balls into the refrigerator for at lease 24-48 hours to continue their rise. &lt;br /&gt;&lt;br /&gt;Happy pizza making!&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/3490424615220546230/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2016/03/pizza-dough.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3490424615220546230'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3490424615220546230'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/03/pizza-dough.html' title='Pizza Dough!'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://i.ytimg.com/vi/PvdtUR-XTG0/0.jpg' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-9025030965134232123</id><published>2016-02-05T23:54:00.001-08:00</published><updated>2016-02-06T10:25:14.105-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Talk'/><title type='text'>Papers We Love Talk on Fred Brooks' Paper ~No Silver Bullet~</title><content type='html'>My talk from Jan '16 Papers We Love(LA) is up on the YouTubes. &amp;nbsp;Sadly, the abstract was a lie and my talk was about as meandering as Brooks' original paper. &amp;nbsp;Anyhow, here it is ... would love some feed back!&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Video:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe allowfullscreen="" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/qEuv6O9kSuw/0.jpg" frameborder="0" height="266" src="https://www.youtube.com/embed/qEuv6O9kSuw?feature=player_embedded" width="320"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Slides:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="http://williamberryiii.github.io/NoSilverBullet/#/"&gt;http://williamberryiii.github.io/NoSilverBullet/#/&lt;/a&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/9025030965134232123/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2016/02/papers-we-love-talk-on-fred-brooks.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/9025030965134232123'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/9025030965134232123'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/02/papers-we-love-talk-on-fred-brooks.html' title='Papers We Love Talk on Fred Brooks&apos; Paper ~No Silver Bullet~'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://i.ytimg.com/vi/qEuv6O9kSuw/0.jpg' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-3777398030264230064</id><published>2016-01-20T00:08:00.001-08:00</published><updated>2016-01-20T10:46:50.675-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='No Silver Bullet'/><category scheme='http://www.blogger.com/atom/ns#' term='Brooks'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Specifications'/><category scheme='http://www.blogger.com/atom/ns#' term='Interfaces'/><title type='text'>Inherent Complexity of Interface Specfication</title><content type='html'>In Brook's 'No Silver Bullet' paper he argues, impotently, that "much complexity [in software] comes from conformation to other interfaces". &amp;nbsp;The whole argument, which can be found in the "Conformity" section reduces to:&lt;br /&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Software needs to interact with the world and the world is complex, therefore software is complex, and/or&lt;/li&gt;&lt;li&gt;Software is easy to change and thus must be the element which changes, therefore software is still complex.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;To phrase it another way ... water is wet.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Throughout his paper Brooks paints a likable characterization of the software engineering process, one that plays to the ego, to the self-centered. &amp;nbsp;I fell for it. &amp;nbsp;I drank up the Koolaid like so many a hapless lead engineer or inexperienced manager. &amp;nbsp;It behooves us to. &amp;nbsp;We are compelled. &amp;nbsp;The argument makes us feel important. Unfortunately, the thought, which appears so palatable, is nominally vacuous. &amp;nbsp;A conversation of the complexity introduced by interfaces, encompassing Brooks' comment that re-engineering cannot eliminate the complexities of consuming interfaces, is implicit in the design process and is thus hardly worth mentioning in such isolated terms. &amp;nbsp;Brooks misses the underpinnings of interface complexity completely with his hand-waving. &amp;nbsp;Let me explain ...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If we are to believe point one where the world's man made interfaces are muddy, fully captured devices born of human flaw then one would suppose that the natural driving instinct of all system architects would be to shutter protocols capturing volumes of complexity fast inside components. &amp;nbsp;This would have the immediate result of reducing the number, and likely complexity, of interfaces and necessitates the creation of a few large functional units where domain complexity is captured internally to those units.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Running somewhere between completely counter and moderately orthogonal to Brooks' first point is his second. &amp;nbsp;For the sake of re-iteration - because software is easy to change, it must be the element to change and conforming to extrinsic pressure drives complexity. &amp;nbsp;Intuition says that Brooks is correct. &amp;nbsp;We enhance the changeability of our software by increasing the the count, and possibly the complexity of, the interfaces of a system. &amp;nbsp;This concept may be exacted at different levels of abstraction, equally workable at the method level and all the way up to intra-system communications.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In either case however, capturing the notion of complexity arising from conforming to or confirming an interface is unimportant, and I would go so far as to say that holds true even nestled in conversation of essential vs accidental complexity. &amp;nbsp;Let's enumerate again the design options that arise from Brooks' argument:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;We make large functional units that aptly capture domain complexity but resist change&lt;/li&gt;&lt;li&gt;We make small functional units which enhance change, capture domain complexity but bring additional protocol complexity to bear.&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Each point makes assumptions, alluding to the presence of external motivators. &amp;nbsp;Point one subsumes that our software is in need of future change. Point two suggests that the addition of protocol complexity is somehow burdensome and therefore must be avoided. &amp;nbsp;What's missing in Brooks' argument, underpinning the entire conversation about interfaces, are financial considerations and enabling options for the future. &amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For point one where we assume that changeability is a requirement it means that we have not only good faith but predictive financial assessments dictating that: 1) the system will require future modification and 2) that optimizing for those costs is necessary burden that must be undertaken now. &amp;nbsp;In the absence of either data point, the so called Majestic Monolith rises as a clear path forward. &amp;nbsp;Though future engineers and managers will likely damn the decision, it will have been made with the best of intentions, fully informed.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For point two we must tackle the notion that the complexity wrought by a multitude of interfaces is, in fact, burdensome. &amp;nbsp;In this decision path the additional complexity is inherent, unavoidable in the requirements, the financial burden is therefore implicit. &amp;nbsp;The decision left on the table is to implement custom protocols or to leverage pre-established protocols to optimize the situation. &amp;nbsp;In some cases the financial burden of custom protocols will be warranted, in others that will be the case (that discussion is beyond the scope of this paper). &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;div&gt;In either case though, the complexity of capturing the domain persists and remains the core consideration of interface design, irrespective of the architectural/design choices made through implementation which are, for all intents and purposes, purely financial decisions, by products of requirements. &amp;nbsp;Furthermore, even in the consideration of &amp;nbsp;capturing someone else's poorly designed API through abstraction is a financial relief in terms of avoiding implementing the captured behavior yourself.&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Brooks rightly captured the dimensions of interface specification, though he was hardly the first. &amp;nbsp;Unfortunately he identifies merely the canopy of the conversation missing wholly the financial motivators and underpinnings of interface specification. &amp;nbsp;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/3777398030264230064/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2016/01/inherent-complexity-of-interface.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3777398030264230064'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3777398030264230064'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/01/inherent-complexity-of-interface.html' title='Inherent Complexity of Interface Specfication'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-3120196264169624405</id><published>2016-01-07T14:20:00.001-08:00</published><updated>2016-01-28T09:41:49.052-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Powershell'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><category scheme='http://www.blogger.com/atom/ns#' term='UpGuard'/><title type='text'>Using UpGuard &amp; Powershell Queries to Monitor your NIC Speed</title><content type='html'>One of the sweetest features of UpGuard is the ability to add custom queries for node scans. &amp;nbsp;Though the standard battery of queries that the product provides is very through and well selected, it does have some blind spots. &amp;nbsp;Previously, I've written about using&amp;nbsp;UpGuard&amp;nbsp;to &lt;a href="http://www.lucidmotions.net/2015/10/simple-disk-space-check-w-scriptrock.html"&gt;monitor Disk Space&lt;/a&gt; on server drives and to &lt;a href="http://www.lucidmotions.net/2015/12/scan-active-directory-users-groups-with-powershell.html"&gt;track changes to Active Directory&lt;/a&gt;. &amp;nbsp;In this post we are going to look at a more nefarious problem that we ran into lately and leverage&amp;nbsp;UpGuard&amp;nbsp;to help monitor for changes.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The other day, our ETL pump began to experience SQL connection timeouts with one of our database servers. &amp;nbsp;As we dug deeper into the issue, we discovered that a primary NIC on that cluster node was running at 100% utilization and the jump to discover that the NIC had reset itself from its originally configured 1GB speed to 100MB, was short. &amp;nbsp;Under normal loads this would not have posed much of an issue since most SQL connections are small payloads over short duration connections. In this case a large log shipping job was running in the background putting additional pressure on the pipe. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Whether or not this issue had historical relevancy, which it does, I would still turn to&amp;nbsp;UpGuard&amp;nbsp;to at least get a&amp;nbsp;daily heads up that something might be wrong. &amp;nbsp;Since the NIC resets tend to occur after server restarts, I moved all our database machines to their own environment and set the scan time to kick off in the last minute of our standard maintenance window, increasing the chance that the daily scan would catch the drift. &amp;nbsp;The last piece of the puzzle is the actual query...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Since most all the Powershell to do this stuff has been written before I turned to Google for a little help. &amp;nbsp;A simple query of 'Get NIC speed with Powershell' turned up &lt;a href="http://stackoverflow.com/a/3002568/1276028"&gt;this StackOverflow answer&lt;/a&gt; that has a great place to jump off from. The code simply gets all the network adapter data, filtering on a non-null speed and MAC address setting and then dumps four properties to a table, a'la&lt;/div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/bbcb2f2ad902c9f38cdd.js"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;Unfortunately,&amp;nbsp;UpGuard&amp;nbsp;won't be too happy with the formatted table of results so we need to modify the script&amp;nbsp;slightly to shape the data correctly. &lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/f8e1ad9ef6fa15e42676.js"&gt;&lt;/script&gt; Here we have simply replaced the call to 'Format-Table' with a 'Select-Object -Property' call with the same property list. &lt;br /&gt;&lt;br /&gt;The last step is to add this script to our custom query section and set a Key Name to NetConnectionID so that each eligible NIC is listed under it common name.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-G8_LRFAf7F0/Vo7ivMl7tmI/AAAAAAAAAcA/fMAmDdEjqOA/s1600/NetworkAdapters.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="156" src="http://2.bp.blogspot.com/-G8_LRFAf7F0/Vo7ivMl7tmI/AAAAAAAAAcA/fMAmDdEjqOA/s640/NetworkAdapters.PNG" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;With our query configured, our next scan will produce the output below.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-MZtqNEX6jW4/Vo7jJKgJj0I/AAAAAAAAAcI/d4x6k3NH3_I/s1600/NetworkAdapters2.PNG" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="80" src="http://4.bp.blogspot.com/-MZtqNEX6jW4/Vo7jJKgJj0I/AAAAAAAAAcI/d4x6k3NH3_I/s200/NetworkAdapters2.PNG" width="200" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;With that we are done, Happy&amp;nbsp;UpGuard'in&amp;nbsp;!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;PS. &amp;nbsp;I wanted to post a quick update to show the use of a calculated property for link speed. &amp;nbsp;So here you go:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/0ef15deda29d462b7f34.js"&gt;&lt;/script&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/3120196264169624405/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2016/01/using-upguard-to-query-nic-speed.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3120196264169624405'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3120196264169624405'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/01/using-upguard-to-query-nic-speed.html' title='Using UpGuard &amp; Powershell Queries to Monitor your NIC Speed'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-G8_LRFAf7F0/Vo7ivMl7tmI/AAAAAAAAAcA/fMAmDdEjqOA/s72-c/NetworkAdapters.PNG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-542702324569412003</id><published>2016-01-05T23:44:00.002-08:00</published><updated>2016-01-05T23:44:58.885-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Powershell'/><title type='text'>Creating Directories w/Powershell for Developers</title><content type='html'>I was recently converting one of my open source projects from Nuget to Paket and encountered a classic headache for Windows developers ... adding a ".foo" directory to a project folder. &amp;nbsp;The leading period is a historical *nix technique employed to prevent the 'ls' command from showing the directory when not using the -a flag. &amp;nbsp;E.G. a folder structured like:&lt;br /&gt;&lt;br /&gt;- projectDirectory&lt;br /&gt;&amp;nbsp; &amp;nbsp; | - .vs&lt;br /&gt;&amp;nbsp; &amp;nbsp; | - .paket&lt;br /&gt;&amp;nbsp; &amp;nbsp; | - Jenkins-FSharp&lt;br /&gt;&lt;br /&gt;The 'ls -a' command would display the following results:&lt;br /&gt;&lt;br /&gt;drwxr-----. root root {size} {date} .vs&lt;br /&gt;drwxr-----. root root {size} {date} .paket&lt;br /&gt;drwxr-----. root root {size} {date} Jenkins-FSharp&lt;br /&gt;&lt;br /&gt;and this using just the 'ls' command without the '-a' option:&lt;br /&gt;&lt;br /&gt;drwxr-----. root root {size} {date} Jenkins-FSharp&lt;br /&gt;&lt;br /&gt;For those of us in the Windows world, the use of a period as a prefix to a folder or a file is a nominal headache that needs to be consistently overcome. &amp;nbsp;The reason? Windows Explorer. &amp;nbsp;Unfortunately, Windows Explorer will not allow you to create a folder with a '.' prefix from the UI. &amp;nbsp;I am sure there are great reasons for this that are beyond both my pay grade and comprehension; either way, we are stuck with workarounds to accomplish our task.&lt;br /&gt;&lt;br /&gt;The old standby, which is short and succinct, is to open a cmd prompt in the current folder and issue the command 'mkdir .foo'. &lt;br /&gt;&lt;br /&gt;Conversely, for those like myself that live with a Powershell terminal window open, we have an even more succinct command - 'md .foo'. &amp;nbsp;'md' is an alias for the mkdir cmdlet which leverages the New-Item cmdlet to create your directory. &lt;br /&gt;&lt;br /&gt;In a similar fashion, you could use the more verbose method of calling the New-Item cmdlet directly using the '-Name' and '-ItemType' arguments. &amp;nbsp;The command looks like 'New-Item -Name {folderName} -ItemType directory'.&lt;br /&gt;&lt;br /&gt;With our new folder created - Happy Codin' &amp;amp; Powershell'in!</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/542702324569412003/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2016/01/creating-directories-wpowershell.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/542702324569412003'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/542702324569412003'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/01/creating-directories-wpowershell.html' title='Creating Directories w/Powershell for Developers'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-1181517595692896575</id><published>2015-12-18T00:03:00.000-08:00</published><updated>2015-12-18T00:11:07.518-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><category scheme='http://www.blogger.com/atom/ns#' term='Functional Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Cloud'/><category scheme='http://www.blogger.com/atom/ns#' term='Talk'/><title type='text'>Papers We Love - January Talk Proposal - Fred Brooks' 'No Silver Bullet'</title><content type='html'>&lt;div class="MsoNormal"&gt;Some thirty years after Turing Award winner Fred Brooks’ seminal work 'No Silver Bullet' was published, the industry has paved over his enthusiastic skepticism, with an air of pessimism and apathy.&amp;nbsp; After tearing down the failed software development methodologies of our predecessors, I will leverage Brooks’ work to frame a critique of current industry themes such as DevOps, Microservices, and Cloud Computing.&amp;nbsp; Lest however, you be consumed by an unshakable hopelessness that, as an industry, we are bound to Santayana’s Sisyphean prophesy (‘those who don’t learn from history are bound to repeat it’), I will show that Brooks’ theories are alive, well and in fact thriving in niche communities paving our way forward.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;--&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="MsoNormal"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;In a previous life, Bill (@williamberryiii) crafted scenery for Broadway, a la Pirates of Penzance, but now crafts software for the enterprise, a la Pirates of Silicon Valley. In his roles as Technical Lead and Application Architect for The Retail Equation, Bill has lead service integrations with Fortune 500 retailers, curated DevOps initiatives and always enjoys building high performance, multi-tenant distributed data APIs. As a deeply curious engineer, he enjoys pairing complex problems with simple and elegant solutions. Striving for meaningful change, Bill believes that cultural and technical progress is best made through evolution and not revolution.&amp;nbsp;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/1181517595692896575/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/12/papers-we-love-january-talk-proposal.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1181517595692896575'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1181517595692896575'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/12/papers-we-love-january-talk-proposal.html' title='Papers We Love - January Talk Proposal - Fred Brooks&apos; &apos;No Silver Bullet&apos;'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-2176731761040825375</id><published>2015-12-03T22:27:00.001-08:00</published><updated>2015-12-03T22:27:28.737-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Automation'/><category scheme='http://www.blogger.com/atom/ns#' term='Deployment'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Powershell'/><title type='text'>A Developer's Guide to Powershell Deployment Automation</title><content type='html'>&lt;div&gt;&lt;u&gt;PART I&lt;/u&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;*Scene notes*&lt;/div&gt;It's Sunday night. &amp;nbsp;9:30 pm to be exact. The kids are finally asleep. The hiss of the record needle stings Bill from across the room as a Jawbone wafts Mancini. &amp;nbsp;One rock gently spins, melting in a finger of Scotch. &amp;nbsp;It's clearly deployment time. &amp;nbsp;Bill wonders where his RSA key is as he rifles through his tattered Ted Baker bag (clearly a prized possession). &amp;nbsp;He sighs heavily and begins muttering&amp;nbsp;"The VPN is acting up AGAIN. &amp;nbsp;Go figure. &lt;i&gt;pause&lt;/i&gt;&amp;nbsp; I'm in. &amp;nbsp;&lt;i&gt;pause&lt;/i&gt; Where's IT? Late again ..." The chat window opens.&amp;nbsp;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Br: &amp;nbsp; &amp;nbsp; Hey Bill, you here?&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;Yeah man, sup?&lt;/div&gt;&lt;div&gt;Br: &amp;nbsp; &amp;nbsp; Ready?&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;As I'll ever be,&amp;nbsp;I suppose.&lt;/div&gt;&lt;div&gt;Br: &amp;nbsp; &amp;nbsp; Stopping the service on TUBES.&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;OK.&lt;/div&gt;&lt;div&gt;Br: &amp;nbsp; &amp;nbsp; Copying the files over.&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;Ok ... just ping me when it's done and I'll test.&lt;/div&gt;&lt;div&gt;...&lt;/div&gt;&lt;div&gt;Br: &amp;nbsp; &amp;nbsp; The copy failed. &amp;nbsp;Let me try this again.&lt;/div&gt;&lt;div&gt;...&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp; K.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;(5 min. later)&lt;/div&gt;&lt;div&gt;Br: &amp;nbsp; &amp;nbsp; Ok TUBES is done. &amp;nbsp;Moving onto SOCKETS&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;Testing.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;(45 min. later)&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;Can you just stop the service on all of them and deploy the backups?&lt;/div&gt;&lt;div&gt;Br: &amp;nbsp; &amp;nbsp; Where are they?&amp;nbsp;&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;The services or the backup files?&lt;/div&gt;&lt;div&gt;Br: &amp;nbsp; &amp;nbsp; The backup files.&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;Um, where ever you put them? &amp;nbsp;Is this a trick question?&lt;/div&gt;&lt;div&gt;Br: &amp;nbsp; &amp;nbsp; I didn't copy them anywhere, was I supposed to?&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;It's the second step in the word doc dude ...&amp;nbsp;&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;Brb. &amp;nbsp;Need more whiskey.&amp;nbsp;&lt;/div&gt;&lt;div&gt;Br: &amp;nbsp; &amp;nbsp; K&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;i&gt;*cries pierce through the jawbone now playing Ed Thigpen*&lt;/i&gt;&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;Little one is up again. &amp;nbsp;Look can you just get the files from last Sunday's deployment off the share and copy them back over onto all the servers? &amp;nbsp;I'll be right back.&lt;/div&gt;&lt;div&gt;Br: &amp;nbsp; &amp;nbsp; Ok, but do I have to stop the service if it's running?&lt;/div&gt;&lt;div&gt;B: &amp;nbsp; &amp;nbsp; &amp;nbsp;FOLLOW THE BACKOUT INSTRUCTION IN THE WORD DOC ... I'll brb.&lt;/div&gt;&lt;div&gt;(scene)&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Let me start by saying, I get it. &amp;nbsp;I know where you are. &amp;nbsp;I've been there. &amp;nbsp;It's not pretty, but it works. &amp;nbsp; This is how it has to work sometimes. &amp;nbsp;But ... it can be better. &amp;nbsp;And getting there is not dramatic or scary. &amp;nbsp;It's not their fault. &amp;nbsp;It's not IT's fault. &amp;nbsp;You're the developer. &amp;nbsp;You need to get in there and get this straightened out. &amp;nbsp;And we can do it. &amp;nbsp;We can do it together.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/2176731761040825375/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/12/devs-guide-to-ps-deployment-pt1.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2176731761040825375'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2176731761040825375'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/12/devs-guide-to-ps-deployment-pt1.html' title='A Developer&apos;s Guide to Powershell Deployment Automation'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-8611533975147082980</id><published>2015-12-01T12:18:00.000-08:00</published><updated>2016-01-28T09:41:32.957-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Active Directory'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='UpGuard'/><title type='text'>Simple Active Directory Users &amp; Groups Scan w/Powershell v2 and UpGuard</title><content type='html'>The feature of&amp;nbsp;UpGuard&amp;nbsp;I enjoy the most is the ability to write and run custom Powershell queries to monitor&amp;nbsp;my Windows nodes. &amp;nbsp;Recently one of our system administrators came to me and asked about using&amp;nbsp;UpGuard&amp;nbsp;to monitor for changes on our active directory nodes. &amp;nbsp;Never backing down form a chance to use&amp;nbsp;some Powershell to Automate a process I figured I would give the project a go!&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;NOTE: This is a Tier 1 monitoring solution and is only good for alerting your users of very course changes to AD Users and Groups. &amp;nbsp;I would not rely on this as your only form of monitoring AD User and Group Changes!!!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There are effectively two things we want to monitor. &amp;nbsp;First, we want to look for changes in the Active Directory Schema. &amp;nbsp;That can be easily accomplished with an already posted&amp;nbsp;UpGuard&amp;nbsp;article, &lt;a href="https://support.scriptrock.com/hc/en-us/articles/204779790-Scan-Options-Scanning-for-changes-in-Active-Directory-schema"&gt;see here&lt;/a&gt;.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The next piece is monitoring users and their group memberships. &amp;nbsp;For that we will use Powershell's built in Active Directory Module that should be installed with the Active Directory role on the target server. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Form a configuration and isolation perspective, I have set up a dedicated environment for the monitored AD nodes to be in. &amp;nbsp;This will allow for custom email settings and prevent the AD changes from being mixed into the other daily environment reports. &amp;nbsp;Additionally, I set up a node group for all Active Directory nodes where the custom Powershell queries will go.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;While the schema script above from&amp;nbsp;UpGuard&amp;nbsp;creates a single file like element, I have opted to break out each&amp;nbsp;user into its own "object" so that identifying expected changes across scans is a bit easier to parse.&lt;/div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/40138d8dd7034e10c32d.js"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;The script starts out with a simple Try/Catch to make sure that the module can be imported. &amp;nbsp;It then pulls the host name to ensure that for each AD command that will be issued, it is querying the targeted host. &amp;nbsp;Lastly we read all the users into a local variable and iterate across them building a custom object that represents the user's distinguished name, sam account name, enabled status, email address, the whenCreated and whenChanged properties along with a flattened list of group memberships.&lt;br /&gt;&lt;br /&gt;Optionally, if you had lots of users (we only have a few hundred per domain) you could flatten out the users collection similar to how the schema script noted above does. &amp;nbsp;That would look something like this:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/6b022ea6533942e9497e.js"&gt;&lt;/script&gt; &lt;br /&gt;EDIT: One quick note about the use of whenChanged ... this property is updated any time the user object is written. See here for more details on &lt;a href="http://www.morgantechspace.com/2014/12/Active-Directory-whenChanged-vs-usnChanged.html"&gt;when 'whenChanged' changes&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Happy&amp;nbsp;UpGuardin'&amp;nbsp;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/8611533975147082980/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/12/scan-active-directory-users-groups-with-powershell.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/8611533975147082980'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/8611533975147082980'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/12/scan-active-directory-users-groups-with-powershell.html' title='Simple Active Directory Users &amp; Groups Scan w/Powershell v2 and UpGuard'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-3084838673192011850</id><published>2015-10-28T00:25:00.001-07:00</published><updated>2015-10-28T03:07:08.450-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Free Writing'/><category scheme='http://www.blogger.com/atom/ns#' term='Autism'/><title type='text'>Autism.</title><content type='html'>There is little that I can add to the conversation that has not been written before with far better prose. &amp;nbsp;In fact, my assessment of the situation and the events that lead up to this morning is, at best, naive and more likely, out right rejection of the plain truth.&lt;br /&gt;&lt;br /&gt;My oldest daughter, of 3 years, has Autism.&lt;br /&gt;&lt;br /&gt;Well, I'm so new to this that I don't know what I'm even supposed to say... &lt;br /&gt;&lt;br /&gt;Does she have Autism?&lt;br /&gt;&lt;br /&gt;Is she is Autistic?&lt;br /&gt;&lt;br /&gt;"On the spectrum" seems rather pejorative.&lt;br /&gt;&lt;br /&gt;If I say my daughter has a learning disability that's somewhat misleading since it does nothing to address the missed social cues, difficulties with communication or negative behavioral traits.&lt;br /&gt;&lt;br /&gt;She doesn't have Autism. &amp;nbsp;That should be reserved for kids stemming in the corner of the room.&lt;br /&gt;&lt;br /&gt;There I go. Falling into the trap of us vs. them. &amp;nbsp;As if somehow THEY are different. &amp;nbsp;Somehow they are only the sum of the labels we put on them. &amp;nbsp;Those people, the ones with Autism. &amp;nbsp;Will you see my daughter that way? &amp;nbsp;Will I awake tomorrow and see her that way? &amp;nbsp; See her for a disease, a label and not a bright, talented, creative young girl? &lt;br /&gt;&lt;br /&gt;We played at the park tonight. &amp;nbsp;My pain was stamped down by fake smiles and words of encouragement, she knew it too. &amp;nbsp;But she played along. &amp;nbsp;When Mom came around we showed off how well we can climb now. &lt;br /&gt;&lt;br /&gt;She can't tell us what she wants yet. &lt;br /&gt;&lt;br /&gt;I am a bad parent. Everything I've done before. &amp;nbsp;The times I've yelled. &amp;nbsp;The times I've hauled her off to her room for pushing her sister. &amp;nbsp;The times I've held her tight to keep her from slamming her head on the ground as she threw a massive tantrum. &amp;nbsp;She's been telling me the whole time that she couldn't tell me. &amp;nbsp;I never bothered to listen. &lt;br /&gt;&lt;br /&gt;I am ashamed.&lt;br /&gt;&lt;br /&gt;I should have pushed sooner. &amp;nbsp;She's normal. &amp;nbsp;Just a bit delayed. &amp;nbsp;"This is all about the speech" I would say as I dismissed my wife's concerns. &lt;br /&gt;&lt;br /&gt;The doctor told us he was disappointed in them, the pediatrician, the speech therapists, for not getting us to a behavioral therapist sooner. &amp;nbsp;I'll tell you how that came off ... he was disappointed in US. &amp;nbsp;We didn't know better. &amp;nbsp;We still don't. &lt;br /&gt;&lt;br /&gt;He just sat there and said the words that we came to him to hear. &amp;nbsp;The words we paid good money to hear him say. &amp;nbsp;"My diagnosis" he began .... "is Autism". &lt;br /&gt;&lt;br /&gt;I keep coming back to knowing the truth. &amp;nbsp;We've known all along that things did not feel right. &amp;nbsp;The panic she exhibited at her first birthday party when everyone sang Happy Birthday. &amp;nbsp;Things were wrong then. &amp;nbsp;Well not "wrong" ... every time I say that I put her and everyone that's ever been diagnosed in a box with a giant fucking sticker on it that reads "AUTISM".&lt;br /&gt;&lt;br /&gt;I'm mad. &amp;nbsp;She's worried. &amp;nbsp;She knows though that I am writing about this. &amp;nbsp;The scotch that has been knocking the edges off this sharp pain is working for me. &amp;nbsp;I'm sorry I'm hitting the keys so hard. &amp;nbsp;I'll type softer. &amp;nbsp;Please don't worry. &amp;nbsp;Our daughter will be OK. &amp;nbsp;She is safe. &amp;nbsp;We know now. &lt;br /&gt;&lt;br /&gt;Actually, we don't know a fucking thing. &amp;nbsp;The only thing we have is an open door. &amp;nbsp;We have options, and treatments, and 20 hours of school, and behavioral therapy and I'm typing loud again. &amp;nbsp;I'm sorry.&lt;br /&gt;&lt;br /&gt;What about #2. &amp;nbsp;The other daughter. &amp;nbsp;The one who's birthday is going to come and go without celebration because we will be sleep depriving the one with Autism so she can get an EEG on the first birthday of #2. &lt;br /&gt;&lt;br /&gt;The second one, she is strong. &amp;nbsp;She knows it. &amp;nbsp;She doesn't understand how much she will be helping her older sister learn. &amp;nbsp;But I can tell you she will be strong. &amp;nbsp;She is strong. &amp;nbsp;But this can't be her burden. &amp;nbsp;She can't take a back seat to her older sister's AUTISM.&lt;br /&gt;&lt;br /&gt;That word. &amp;nbsp;Have you read it enough?&lt;br /&gt;&lt;br /&gt;AUTISM&lt;br /&gt;AUTISM&lt;br /&gt;AUTISM&lt;br /&gt;AUTISM&lt;br /&gt;AUTISM&lt;br /&gt;AUTISM ...&lt;br /&gt;&lt;br /&gt;Where's my scotch. &amp;nbsp;Maybe some more single malt will cut out this cancerous sore. &lt;br /&gt;&lt;br /&gt;I just wanted normal kids. &amp;nbsp;I said it. &amp;nbsp;I don't get it. &amp;nbsp;I don't get what I wanted here. &amp;nbsp;I want to blame someone. &amp;nbsp;This has to be someone's fault.&lt;br /&gt;&lt;br /&gt;I breathe.&lt;br /&gt;&lt;br /&gt;Each breathe, slowly bobbing the laptop up and down. &amp;nbsp;My keystrokes are softer. &amp;nbsp;The feverish hammering subsides.&lt;br /&gt;&lt;br /&gt;I'm sorry. &amp;nbsp;I was not supposed to be a bad parent. &amp;nbsp;I don't know how to do this. &amp;nbsp;I don't know how to keep people from feeling sorry for her. &amp;nbsp;Want to pity her. &amp;nbsp;Fuck them and fuck you. &amp;nbsp;I'm sorry. I don't mean that. &amp;nbsp;I do ... Fuck Me, actually. &amp;nbsp;For every time I've put them in a box. &amp;nbsp;The disease and the person are not the same thing. &amp;nbsp;"The person is so much more than the disease" they say. &amp;nbsp;I guess so. &amp;nbsp;My little girl, she's the one with the disease now. &amp;nbsp;The label.&lt;br /&gt;&lt;br /&gt;Part of me hopes. &amp;nbsp;You know, she can decide later if she wants to wear that label. &amp;nbsp;For now we'll keep it cause it will let us get you help little girl. It will let us get us help. &amp;nbsp;We need help.&lt;br /&gt;&lt;br /&gt;Help. &lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/3084838673192011850/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/10/autism.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3084838673192011850'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3084838673192011850'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/10/autism.html' title='Autism.'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-5748231254014322672</id><published>2015-10-22T13:47:00.002-07:00</published><updated>2016-01-28T09:42:27.487-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><category scheme='http://www.blogger.com/atom/ns#' term='UpGuard'/><title type='text'>Simple Disk Space Check on Scan w/ UpGuard </title><content type='html'>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://i.imgur.com/9VM9qDd.gif" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" src="http://i.imgur.com/9VM9qDd.gif" /&gt;&lt;/a&gt;&lt;/div&gt;One of the few joys I have at work right now is that IT has given me carte blanche with respect to managing our engineering environment - they keep the power on and the network functioning. &amp;nbsp;One of the few things I detest is that IT has given me carte blanche with respect to managing our engineering environment - the only thing they do is keep the power on and the network functioning. &amp;nbsp;This un/fortunate position I find myself in means keeping the infrastructure for 8 devs and QA running smoothly, which is frankly no small feat. &lt;br /&gt;&lt;br /&gt;Given that I find my time rather precious, automating tasks is usually top of my list whenever infrastructure is involved. &amp;nbsp;Lately our packaging server has been running out of space as the CI system has made it so painless to rebuild and repackage software. &amp;nbsp;The task of cleaning out old builds and archiving *could* be automated except that we occasionally have long running projects that should not get auto-archived, and frankly manual review before archiving is not a horrible waste of time anyway. &amp;nbsp;So rather than lean on the Task Scheduler to help me watch for disk space consumption, I've turned to my trusty installation of&amp;nbsp;UpGuard&amp;nbsp;for a helping hand.&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/6d91620b8a2ce54614f9.js"&gt;&lt;/script&gt; The above Powershell simply checks the amount and percentage of free space available on all mounted drives that have a size value. &amp;nbsp;It returns a bool since&amp;nbsp;UpGuard&amp;nbsp;does not currently allow actions on&amp;nbsp;policy failure. &amp;nbsp;Ideally you would configure this script as a policy and on policy failure it would email select parties the details of space allocation per drive and signal them to address it, or perhaps auto add comments to the created task; but for now, this is the best what we can do.&lt;br /&gt;&lt;br /&gt;Setting up the script to run on a group of nodes is quite simple:&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Create a new node group that represents all of the systems that should have this space scan applied.&lt;/li&gt;&lt;li&gt;Press the gear icon next to the node group to bring up the scan options.&lt;/li&gt;&lt;li&gt;Under 'Powershell Queries' create a new query.&lt;/li&gt;&lt;li&gt;Enter the name for the query, enter 'DeviceId' as the Key Name, paste the Powershell into the Query section and accept the change.&lt;/li&gt;&lt;li&gt;Scroll to the bottom of the scan option pane and press 'Save'.&lt;/li&gt;&lt;/ol&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://1.bp.blogspot.com/-TjeZaJCKtcI/VilHDFkbPvI/AAAAAAAAAbk/xuIHtdElh0o/s1600/DiskSpace.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="322" src="http://1.bp.blogspot.com/-TjeZaJCKtcI/VilHDFkbPvI/AAAAAAAAAbk/xuIHtdElh0o/s640/DiskSpace.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;On the next scan of your environment,&amp;nbsp;UpGuard&amp;nbsp;will pickup the baseline for this value and on subsequent scans&amp;nbsp;tasks will be created if the value changes. &amp;nbsp;When/If policies come back with finer grained control, optional scan schedules or policy failure integrations, then moving this check from a scan option to a policy will be more helpful.&lt;br /&gt;&lt;br /&gt;Happy&amp;nbsp;UpGuardin'</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/5748231254014322672/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/10/simple-disk-space-check-w-UpGuard.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5748231254014322672'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5748231254014322672'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/10/simple-disk-space-check-w-UpGuard.html' title='Simple Disk Space Check on Scan w/ UpGuard '/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-TjeZaJCKtcI/VilHDFkbPvI/AAAAAAAAAbk/xuIHtdElh0o/s72-c/DiskSpace.png' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-5074276985536072095</id><published>2015-09-29T00:23:00.000-07:00</published><updated>2015-09-29T00:23:00.906-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Moq'/><category scheme='http://www.blogger.com/atom/ns#' term='Testing'/><title type='text'>Testing Stored Procedure Return Code Control Flow in C# with Moq</title><content type='html'>When modifying legacy code, one of our bigger challenges can be getting tests and test harness worked into the existing structures. &amp;nbsp;As I noted in my last post on &lt;a href="http://www.lucidmotions.net/2015/09/timing-method-execution-in-csharp.html"&gt;Timing Method Execution in C#&lt;/a&gt;,&amp;nbsp;I've been spending quite a bit of time in our repository layer, and part of that work has been adding unit tests to old sections of the code base in preparation for some upcoming refactoring. &amp;nbsp;Obviously, or maybe not so obviously, there is an art to adding unit tests to code that was not originally designed to be tested, and the older portions of our repository layer are no exception.&lt;br /&gt;&lt;br /&gt;Think what you will of the approach, our data access is done nearly 100% through stored procedure calls, yielding two distinct challenges when attempting to test the code. &lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Challenge 1&amp;nbsp;&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;The repository makes heavy use of return codes from the stored procedures to drive control flow after a database call. &amp;nbsp;The return codes are occasionally passed back in ancillary tables, but more often than not they come back as output parameters supplied with the original call to the database, meaning setting the return code value to put post database call control flow under test is difficult at best. &lt;br /&gt;&lt;br /&gt;&lt;u&gt;&lt;b&gt;Challenge 2&lt;/b&gt;&lt;/u&gt;&lt;br /&gt;Again, and not unsurprisingly, the parameter lists for the stored procedure calls are built within the methods that need to be tested. &amp;nbsp;Each method includes logic to determine whether or not to include a parameter, if so what should the value be, etc., etc. &amp;nbsp;This is not as challenging as the return code issue, but it's not insignificant in and of itself.&lt;br /&gt;&lt;br /&gt;Enter &lt;a href="https://github.com/Moq"&gt;Moq&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Moq is a wonderful testing framework for .Net that makes both mocking and stubbing a breeze. &amp;nbsp;The library does have a steep initial learning curve and will likely be frustrating to those who are less familiar with lambdas, funcs and actions; but it's power and ubiquity is worth the time investment to learn. &amp;nbsp;The framework has been essential in helping me get my repository code under test without having to modify the original code base. &amp;nbsp;So let's look at a simple example:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/3c1eb22fc963cffe6cbf.js"&gt;&lt;/script&gt; Starting off the test are a few local consts that will be helpful to have as a single point of change, a dictionary to store our parameter list and our mock executor defined against the ISqlExecutor interface. &amp;nbsp;Note that the ISqlExecutor interface simply does some lite wrapping of the SqlHelper Data Block from Microsoft to make things more consistent and simpler.&lt;br /&gt;&lt;br /&gt;After mocking the interface we encounter a call to Setup for our mock sql executor. &amp;nbsp;The setup method will provide a basic implementation of the interface method that is to be mocked, in this case the ExecuteNonQuery method. &amp;nbsp;What we are basically doing here is registering a method, on our mock object called ExecuteNonQuery and telling the Moq framework that the method will be called with 3 parameters - two strings and a dictionary. &amp;nbsp;For a lot of typical testing needs, particularly where you are just checking if a method was called, you would stop here appending only the Verifyable() method after the call to Setup; but in our case we need some more functionality.&lt;br /&gt;&lt;br /&gt;Following the Setup method is a call to Callback, the block of code in this method is an Action() that can be taken when the mock method is called. &amp;nbsp;You'll notice that the delegate signature mirrors that of the mock method and in this case we'll use it to suck out the parameter list and store it locally for our following asserts, covering our needs in 'Challenge 2'. &amp;nbsp;Additionally, after copying out the parameter list from the call, we can inject a return code into the parameter dictionary allowing us to further test our post call control flow, exceptions and such from 'Challenge 1'.&lt;br /&gt;&lt;br /&gt;With the Setup and Callback put together we can then call the method under test and begin our stack of assertions - like the final line where we check that the return code meets expectations.&lt;br /&gt;&lt;br /&gt;Lastly, this whole approach could also be mixed with the &lt;a href="http://www.nunit.org/index.php?p=testCase&amp;amp;r=2.5"&gt;NUnit TestCase&lt;/a&gt;&amp;nbsp;feature to put the method through its paces, exceptions and all.&lt;br /&gt;&lt;br /&gt;Happy Coding!&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/5074276985536072095/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/09/testing-stored-procedure-return-code.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5074276985536072095'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5074276985536072095'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/09/testing-stored-procedure-return-code.html' title='Testing Stored Procedure Return Code Control Flow in C# with Moq'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-7239784770276903771</id><published>2015-09-27T22:47:00.001-07:00</published><updated>2015-09-27T22:53:21.326-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Performance Monitoring'/><category scheme='http://www.blogger.com/atom/ns#' term='C#'/><title type='text'>Timing Method Execution in C#</title><content type='html'>An awesome tweet from Jessica Kerr rolled by this morning in quite a timely fashion.&lt;br /&gt;&lt;br /&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;To scale the rate of feature development, you have to constantly be working on your monitoring and automation.&amp;#10;&lt;a href="https://twitter.com/skamille"&gt;@skamille&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/strangeloop?src=hash"&gt;#strangeloop&lt;/a&gt;&lt;/p&gt;&amp;mdash; Jessica Kerr (@jessitron) &lt;a href="https://twitter.com/jessitron/status/647787930442932224"&gt;September 26, 2015&lt;/a&gt;&lt;/blockquote&gt;&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;br /&gt;I've been working hard for the last few days to really dial up the instrumentation and telemetry data collection in our primary transaction processing application. &amp;nbsp;We've always had a sufficient view into the operational characteristics of the application, but like the tweet above notes, the faster we want to move, the more data we need to collect. &lt;br /&gt;&lt;br /&gt;Given that instrumenting a mature application can be difficult at best and resisting the urge to perform a heavy refactoring is even harder, I've struggled to keep the surface area of change as small as possible. &lt;br /&gt;&lt;br /&gt;Throughout this work, the Siren's Call of rip and rewrite has been the most powerful in our data access code. &amp;nbsp;Like most n-tier apps, we have a flat layer of code that's wedged &amp;nbsp;between the business logic for transaction processing and the database, with all interactions flowing through just a handful of objects. &amp;nbsp;Though this architectural approach has fallen out of favor with me and begs to be changed, we must sometimes take the short road to higher ground and clean things up after building some space for reflection. &lt;br /&gt;&lt;br /&gt;My primary objective with this segment of the project was to add timing code around all the stored procedure calls. &amp;nbsp;Some of this timing data will be sent to windows performance counters, others bulk logged into HBase on our Hadoop cluster and others still, aggregated and recorded in our SQL Server logging tables, which record at the transaction level. &lt;br /&gt;&lt;br /&gt;The approach here is oriented around triage and batch analytics. &amp;nbsp;With performance counters we can quickly see, in near real-time, how sections of db calls are behaving. &amp;nbsp;We can then turn to SQL server to collect transaction profiles exhibiting higher latency and debug them in our development environment. &amp;nbsp;Lastly, we can get both audit functionality and custom performance analysis by writing analytics jobs on the cluster that encompass longer time frames. &lt;br /&gt;&lt;br /&gt;The following Gist is a simple example repository. &amp;nbsp;The repository has a small wrapper class which helps deal with SqlHelper exceptions and a connection string which are injected to improve testability. &amp;nbsp;Additionally, we have a simple method which will return a 'thingy' from the database given a thingy_id. &lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/a01da8b9f53732bad4b4.js"&gt;&lt;/script&gt; As I noted above, the goal is to instrument this method, timing the length of the stored procedure call. &amp;nbsp;The easy way out would be some local state in the class and a standard .Net stopwatch. &amp;nbsp;I don't have any particular problem with that approach, in fact it's where I started, but the main drawback is the verbosity. &amp;nbsp;Every method would end up looking like this:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/b99e6aceb25f31a380f8.js"&gt;&lt;/script&gt; Again the approach is not bad, per se, but it is verbose and repetitive if every method needs this change, which in this case we do. &lt;br /&gt;&lt;br /&gt;At the other extreme, we could use Aspect Oriented Programming with attributing and IL weaving to inject our instrumentation code around our methods. &amp;nbsp;The .Net library exemplar for this is &lt;a href="https://www.postsharp.net/aspects"&gt;PostSharp&lt;/a&gt; with it's compile time AOP capabilities. &amp;nbsp;Amazing technology, but given that we are still trying to figure out what we really need from all this, I'd prefer a happy medium. &lt;br /&gt;&lt;br /&gt;So what I ended up with was the following:&lt;br /&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/d444f262444eb8e05249.js"&gt;&lt;/script&gt;&lt;br /&gt;I've added a public property with a backing field that will be used to extract the timing data from our repository class - nothing special there. &amp;nbsp;Skipping over our data access method for a moment there is a new method at the bottom of the repository that will do our timing. &lt;br /&gt;&lt;br /&gt;The timing method takes two parameters, a func that returns a DataSet and a ref to our timing field. &amp;nbsp;Since we are pre-filling our method parameters, the timer function leverages the func(TResult) signature, getting some nice flexibility from the type system. &amp;nbsp;The ref timing field will be incremented using the Interlocked API so that we can handle some modest concurrency in the repository. &amp;nbsp;Otherwise, the method looks like an extract of the "simple" approach with a stopwatch. &lt;br /&gt;&lt;br /&gt;Back up in the data access method the Sql Executioner, wrapped in a lambda, and the timing field are passed to the Timer method and the remainder of the method is left nominally unchanged.&lt;br /&gt;&lt;br /&gt;This simple approach to timing method calls can be used with a fair amount of flexibility throughout an application. &amp;nbsp;Consider overloading the timer with an action delegate too, for even more flexibility ... happy coding!&lt;br /&gt;&amp;nbsp; &amp;nbsp; &lt;br /&gt;P.S. the following link goes to an interesting set of answers to this very problem on Stack Overflow: &lt;a href="http://stackoverflow.com/questions/232848/wrapping-stopwatch-timing-with-a-delegate-or-lambda"&gt;wrapping stopwatch timing with a delegate or lambda&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/7239784770276903771/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/09/timing-method-execution-in-csharp.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7239784770276903771'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7239784770276903771'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/09/timing-method-execution-in-csharp.html' title='Timing Method Execution in C#'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-2331553374815552900</id><published>2015-09-21T00:44:00.000-07:00</published><updated>2015-09-21T00:44:40.168-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Proposal'/><category scheme='http://www.blogger.com/atom/ns#' term='Talk'/><title type='text'>FluentConf Talk Proposal 2016.</title><content type='html'>&lt;h4&gt;Title:&lt;/h4&gt;&lt;div class="MsoNormal"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;The Great Decoupling: Rewiring Brownfield Enterprise WebApps with Microservices&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Description:&lt;/h4&gt;&lt;div class="MsoNormal"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;A case study of migrating a legacy web application onto microservices.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Abstract:&lt;/h4&gt;&lt;div class="MsoNormal"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;We’ve heard plenty about microservice architectures and the benefits they can bring to the table, shortened development cycles, better overall system modularity, independently deployable units of work, etc.&amp;nbsp; So what’s an architect or developer on a legacy application to do with all that green grass on the other side of the fence?&amp;nbsp; How can we breathe new life into our classically architected monoliths? &lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;In this session, we’ll skip the big re-write and investigate strategic approaches to lifting a real life brownfield enterprise webapp up onto microservices.&amp;nbsp; Specifically, we’ll cover development and testing challenges, the teasing apart of complex dependencies and approaches to refreshing a domain model.&amp;nbsp; Along the way, we’ll look at tips for deploying into existing infrastructures, maintaining project momentum and planning for the future. &lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;&lt;br /&gt;&lt;/div&gt;&lt;h4&gt;Takeaway:&lt;/h4&gt;&lt;div class="MsoNormal"&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class="MsoNormal"&gt;The audience should leave inspired and confident of the core topics &amp;amp; thinking required to migrate a legacy asset to microservices. &amp;nbsp;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/2331553374815552900/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/09/fluentconf-talk-proposal-2016.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2331553374815552900'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2331553374815552900'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/09/fluentconf-talk-proposal-2016.html' title='FluentConf Talk Proposal 2016.'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-5733041626795895948</id><published>2015-09-17T23:34:00.001-07:00</published><updated>2016-01-28T09:43:37.721-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Automation'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='APIs'/><category scheme='http://www.blogger.com/atom/ns#' term='Powershell'/><category scheme='http://www.blogger.com/atom/ns#' term='UpGuard'/><title type='text'>Personalizing the UpGuard Timeline with Powershell</title><content type='html'>The are few things more awesome then that sense of hacking some&amp;nbsp;personalization&amp;nbsp;into a product. &amp;nbsp;Whether it was huge gaudy epaulettes on my schweet Night Elf Druid or flames in the vacuform chain guards for my automation winches, I love adding that geeky special touch. &amp;nbsp;So when I encountered one of the more underrated features of&amp;nbsp;UpGuard&amp;nbsp;and found that you can personalize it, my inner&amp;nbsp;(and outer) geek sprung into action. &amp;nbsp;"What feature?" you ask. &amp;nbsp;Why the Timeline! &lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;Hiding out under the Report tab is this awesome little feature, the Timeline. &amp;nbsp;While clearly one of those things waiting for its breakout moment, I see plenty of potential in this feature's current incarnation; especially considering that the API allows you to post events into the timeline, meaning you can record metadata about infrastructure events (think deployments, windows updates, etc.) &amp;nbsp;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;As part of the first tier of your&amp;nbsp;UpGuard&amp;nbsp;journey, you will need to come to terms with the Time element of your&amp;nbsp;infrastructure; i.e. Change is inevitable, Change is a function of time, and capturing events throughout time helps orient and give perspective to Change. &amp;nbsp;So plan on exploring this feature and folding it into your automation early in your integration journey.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;What we are going to accomplish is the following:&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-PcgEWAAoGq0/VfurDRagyPI/AAAAAAAAAY0/zEV-EwywIYE/s1600/ScriptrockTimeline.PNG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="400" src="http://3.bp.blogspot.com/-PcgEWAAoGq0/VfurDRagyPI/AAAAAAAAAY0/zEV-EwywIYE/s400/ScriptrockTimeline.PNG" width="300" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;See that sweet logo in both the timeline and the popup? &amp;nbsp;Well that's harvested from my employer's favicon and the hack is super simple. &amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;In the script below we have a few different things that need to be accomplished. &amp;nbsp;First we'll set up some variables to hold information about our corporate website, the&amp;nbsp;UpGuard&amp;nbsp;Appliance, and the event we want&amp;nbsp;to post. &amp;nbsp;Then, using the powerful HTML parsing built into Powershell, we can harvest all the link tags, filter for the 'Shortcut Icon' and grab its HREF. &amp;nbsp;The remainder of the code is just about building the event and posting it to the timeline, where the only tricky bit is escaping the body's double quotes. &amp;nbsp;Doing the backtick escaping allows us to post a properly formatted JSON object while still enabling Powershell to do variable replacement for us, a win-win.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;The API reference page can be found&lt;a href="https://support.scriptrock.com/hc/en-us/articles/204138480-Events"&gt; here&lt;/a&gt; and the Powershell to make the magic happen is below:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/ca9113053b4f6ef7831c.js"&gt;&lt;/script&gt; &lt;div class="separator" style="clear: both; text-align: left;"&gt;Happy Scripting!&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/5733041626795895948/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/09/upguard-events-with-corporate-favicon.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5733041626795895948'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5733041626795895948'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/09/upguard-events-with-corporate-favicon.html' title='Personalizing the UpGuard Timeline with Powershell'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-PcgEWAAoGq0/VfurDRagyPI/AAAAAAAAAY0/zEV-EwywIYE/s72-c/ScriptrockTimeline.PNG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-6680207448700637856</id><published>2015-09-15T23:31:00.001-07:00</published><updated>2016-01-28T09:49:42.480-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Automation'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='APIs'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><category scheme='http://www.blogger.com/atom/ns#' term='UpGuard'/><title type='text'>Preventing Scans of UpGuard Nodes During Deployments w/Powershell v3.0+</title><content type='html'>As we move our&amp;nbsp;UpGuard&amp;nbsp;installation into production I have a few security issues to contend with. &amp;nbsp;The most&amp;nbsp;significant concern is preventing a&amp;nbsp;UpGuard&amp;nbsp;scan from pulling down unencrypted configuration data&amp;nbsp;during a deployment. &amp;nbsp;In theory if a scan were to be triggered while secure data was being migrated from an old web.config to a new config, the scan could pick up IT eyes only data making it available to non-IT analysts with accounts on the appliance. &amp;nbsp;Currently the Scriptrock API does not support a "disable scans" toggle for a node, so lets go hacking!&lt;br /&gt;&lt;div style="text-align: center;"&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;In the script below we are going to leverage the fact that we do not currently have any Agent based nodes configured on the appliance, everything thus far is SSH or WinRM. &amp;nbsp;So for the node being deployed to, the simple fix is to temporarily change the Medium Type to 'Agent' while the automation runs. &amp;nbsp;The script below can be converted into a function that takes a lambda that represents the body of your deployment script, thereby effectively "wrapping" your deployment scripts with this toggle.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/5bf63a2601341ac49b63.js"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;h4&gt;UPDATE:&amp;nbsp;&lt;/h4&gt;Alan Sharp-Paul from&amp;nbsp;UpGuard&amp;nbsp;, sent me a tweet to let me know about a feature of the API that can perform a&amp;nbsp;similar function as noted above, that being the &lt;a href="https://support.scriptrock.com/hc/en-us/articles/204586534-Scheduled-Jobs"&gt;Scheduled Jobs&lt;/a&gt; endpoint. &amp;nbsp;Depending on how you have set up your environments set up this may work quite well for you. &amp;nbsp;In our case, we have nodes in an environment that span functionality, so a deployment may not cut across all of them. &amp;nbsp;Given that, I see it as advantageous to disable the node as noted above, record the deployment event and then restore the node, allowing the other machines in that environment to be scanned if we run over in to the scheduled job. &amp;nbsp;One alternative could be to check if the job is running, if so kill it, run the deployment and update the next scheduled run time to be shortly in the future (expect a post on this in the near future). &lt;br /&gt;&lt;br /&gt;Happy Scripting!&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/6680207448700637856/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/09/preventing-scans-of-upguard-nodes.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6680207448700637856'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6680207448700637856'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/09/preventing-scans-of-upguard-nodes.html' title='Preventing Scans of UpGuard Nodes During Deployments w/Powershell v3.0+'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-3918349347779295670</id><published>2015-09-15T00:04:00.000-07:00</published><updated>2015-09-17T23:38:24.027-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='APIs'/><category scheme='http://www.blogger.com/atom/ns#' term='Powershell'/><category scheme='http://www.blogger.com/atom/ns#' term='Scriptrock'/><title type='text'>Updating the Connection Manager for a list of Scriptrock Nodes using Powershell v3.0+</title><content type='html'>In my last &lt;a href="http://www.lucidmotions.net/2015/09/getting-node-list-from-scriptrock.html"&gt;post&lt;/a&gt;, we looked at how to get our list of nodes from our Scriptrock appliance. &amp;nbsp;Now let's take our collection of nodes, and using Powershell's list filtering and selecting capabilities, we can put that data to good work. &amp;nbsp;Here is the original node select script:&lt;br /&gt;&lt;div style="text-align: center;"&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/7dc2c9004647c4e486a4.js"&gt;&lt;/script&gt; &lt;div style="text-align: left;"&gt;In the following simple example we will iterate the list of nodes, filter for operating_system_family_id and then update each node's connection_manager_group_id:&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/9a35f1ff85620012475f.js"&gt;&lt;/script&gt; &lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/3918349347779295670/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/09/updating-connection-manager-for-scriptrock-nodes.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3918349347779295670'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3918349347779295670'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/09/updating-connection-manager-for-scriptrock-nodes.html' title='Updating the Connection Manager for a list of Scriptrock Nodes using Powershell v3.0+'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-5057004279118242246</id><published>2015-09-13T14:51:00.002-07:00</published><updated>2016-01-28T09:51:54.697-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Powershell'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><category scheme='http://www.blogger.com/atom/ns#' term='UpGuard'/><title type='text'>Getting Node List from UpGuard using Powershell v3.0+</title><content type='html'>I'm completely perplexed by people who dislike Powershell. &amp;nbsp;As someone who has built 1,000+ line Powershell deployment scripts, the scripting language can be a bit like bacon flavored chocolate; you'll try it, some folks swear by it, but for the most part my conclusion is ... "meh". &amp;nbsp;That said, Powershell as a SHELL is outstanding. &amp;nbsp;Frankly it smokes any experience I've ever had on the Unix/Linux side of the fence and it's got everything to do with direct access to .Net. &amp;nbsp;So let's put the scripting language aside and look at some things you can do with the shell and my new favorite tool&amp;nbsp;UpGuard.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;Connecting to&amp;nbsp;UpGuard&amp;nbsp;from Powershell and pulling down the node list is very straight forward. &amp;nbsp;Though you'll&amp;nbsp;find some Powershell 2.0 examples in the &lt;a href="https://support.upguard.com/hc/en-us/sections/200706424-API-Reference"&gt;API section of the UpGuard site&lt;/a&gt;, the following is an approach using the Powershell v3.0+ Cmdlet &lt;a href="https://technet.microsoft.com/en-us/library/hh849971(v=wps.630).aspx"&gt;Invoke-RestMethod&lt;/a&gt; which will automatically deserialize the JSON response into objects - super cool!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;script src="https://gist.github.com/WilliamBerryiii/7dc2c9004647c4e486a4.js"&gt;&lt;/script&gt; &lt;br /&gt;&lt;div&gt;&lt;br /&gt;The&amp;nbsp;UpGuard&amp;nbsp;API rightly enforces pagination, so the above script uses a while loop to pull out the nodes from&amp;nbsp;each Cmdlet response and adds them to a master array, breaking when there are no further nodes in the response.&lt;br /&gt;&lt;br /&gt;Happy Scripting!&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/5057004279118242246/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/09/getting-node-list-from-upguard.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5057004279118242246'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5057004279118242246'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/09/getting-node-list-from-upguard.html' title='Getting Node List from UpGuard using Powershell v3.0+'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-2355472645784616376</id><published>2015-09-07T15:54:00.003-07:00</published><updated>2015-09-07T16:12:00.077-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Change'/><category scheme='http://www.blogger.com/atom/ns#' term='Management'/><category scheme='http://www.blogger.com/atom/ns#' term='Evolution'/><category scheme='http://www.blogger.com/atom/ns#' term='Business Metrics'/><title type='text'>On Evolutionary Thinking</title><content type='html'>As is not uncommon, I went on a pretty hard Twitter rant the other night. Aimed at the industry in general, I hit squarely on a few of the trappings of current software/technology business practices. The problem was that my approach was overwhelmingly negative, and while negativity serves to provoke and stir up controversy, it more often exacerbates the problems at hand as the targets of criticism simply entrench themselves deeper. Additionally, I was missing heaps of context that, in hindsight, makes my point complete. So, the series of blog posts that follow are simply a flushing out of my prior rant. For the sake of accountability I will start each post with my original thought, tear it down and then reshape it into the proper thesis it should have been.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: left;"&gt;Controversial statement:&amp;nbsp;&lt;/div&gt;&lt;div style="text-align: left;"&gt;"You don't understand that change is best executed through evolution not revolution."&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;What I should have said:&lt;/div&gt;&lt;div style="text-align: left;"&gt;"Evolutionary thinking leads to a culture of sustainable, perpetual and effective change."&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;All organizations are multidimensional. &amp;nbsp;As an agent of change, it's critical to consider the sum of an organization's vectors. &amp;nbsp;Given that it's entirely possible overt pressure applied to any one dimension of the business can be adequately countered by another, it is reasonable that change leaves an organization nominally on it's original trajectory. &amp;nbsp;This IS the reason why organizational change is so difficult. &amp;nbsp;Reinvigorate customer service without coaxing IT and Engineering to enhance the software that customer service uses to communicate and things quickly falls back to their old ways, even in the face of substantial leadership or process change(read revolution).&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;Much of today's software business chatter continues to drone on about being Agile or Lean or Scrum'ing and the whole space is completely awash with crap. &amp;nbsp;The basic premise is that we pay someone to come into our organization, teach us a prescriptive approach (or proscribe current practices) to creating value or optimizing or innovating and suddenly we'll just be there - efficient, optimized and innovated. &lt;br /&gt;&lt;br /&gt;At a sufficiently large scale, using a prescriptive approach like today's "Agile" will lesson overall organizational risk; however, it deeply concerns me to see small and medium business, investing wholesale and blindly in all the ceremony of Agile/Scrum methodologies. &amp;nbsp;The reality is that at the SMB scale, bespoke and evolutionary approaches to process innovation are capable of yielding much better results.&lt;br /&gt;&lt;br /&gt;While I'd love to offer a simple "throw the baby out with the bathwater" approach (then the inanity of prescribing a fix for prescribed "fixes" would go totally Meta), things just aren't that simple. &amp;nbsp;The crux if the issue is how to get back to what agile was (before it became "Agile") and iterate differently on those original concepts.&lt;br /&gt;&lt;br /&gt;In the beginning of agile, it was about people and process and valuing the former over the latter. &amp;nbsp;Then the consultants, trying to sell finish lines and succinct capsules of product (because that's what businesses want to buy) came along and converted culture into recipe. &amp;nbsp;With recipes in hand, cultures are disrupted, processes standardized and like so many a suburb, the loss of organic individuality and creativity is vacuumed out of our organizations for the sake of stand-ups, points and burn-down charts ... which are simply a projection of agile using phase-gate goggles.&lt;br /&gt;&lt;br /&gt;How then do we teach our organizations to think for themselves? &amp;nbsp;How do we get our peers thinking about capturing the essence of change and not its outcomes? How do we build a system of metrics that change as the business changes and become glaringly irrelevant as their usefulness wanes? &amp;nbsp;How do we stop looking to copy the success of other organizations in place of finding our own? &amp;nbsp;If you are thinking at this level then you are probably well on your way ...&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;In case you missed the beginning, you can find Part 1 here:&amp;nbsp;&lt;a href="http://www.lucidmotions.net/2015/08/value-your-developers.html"&gt;Valuing Developers Over Intellectual Property&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/2355472645784616376/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/09/evolution-not-revolution.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2355472645784616376'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2355472645784616376'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/09/evolution-not-revolution.html' title='On Evolutionary Thinking'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-3959660379000889032</id><published>2015-08-19T21:24:00.005-07:00</published><updated>2015-08-19T21:24:57.692-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Papers We Love Talk on Butler Lampson's 'Hints for Computer System Design'</title><content type='html'>&lt;h4&gt;&lt;span style="background-color: white; color: #333333; font-family: Roboto, arial, sans-serif; font-size: 13px; line-height: 17px;"&gt;Abstract:&lt;/span&gt;&lt;/h4&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="background-color: white; color: #333333; font-family: Roboto, arial, sans-serif; font-size: 13px; line-height: 17px;"&gt;While technologies, methodologies and abstractions have waxed and waned over the years, Butler Lampson’s ‘Hints for Computer Systems Design’ remains relevant to the current challenges faced in software and hardware systems engineering. Drawing against the backdrop of current development practices, we will discuss how Lampson’s hints can still be used, some thirty years later, to implement functionally accurate, high-performing fault-tolerant software systems.&lt;/span&gt;&lt;/div&gt;&lt;h4&gt;&lt;span style="background-color: white; color: #333333; font-family: Roboto, arial, sans-serif; font-size: 13px; line-height: 17px;"&gt;Presentation:&lt;/span&gt;&lt;/h4&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;span style="background-color: white; color: #333333; font-family: Roboto, arial, sans-serif; font-size: 13px; line-height: 17px;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe width="320" height="266" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/2Z-NVsZLd5Q/0.jpg" src="https://www.youtube.com/embed/2Z-NVsZLd5Q?feature=player_embedded" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;h4&gt;Slides:&lt;/h4&gt;http://williamberryiii.github.io/Hints4CSD/#/&lt;br /&gt;&lt;h4&gt;Presentation Materials:&amp;nbsp;&lt;/h4&gt;&lt;div&gt;https://github.com/WilliamBerryiii/Hints4CSD&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/3959660379000889032/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/08/papers-we-love-talk-on-butler-lampsons.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3959660379000889032'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3959660379000889032'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/08/papers-we-love-talk-on-butler-lampsons.html' title='Papers We Love Talk on Butler Lampson&apos;s &apos;Hints for Computer System Design&apos;'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://i.ytimg.com/vi/2Z-NVsZLd5Q/0.jpg' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-2852181322063639785</id><published>2015-08-18T00:23:00.001-07:00</published><updated>2015-10-13T22:27:10.107-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><category scheme='http://www.blogger.com/atom/ns#' term='Proposal'/><category scheme='http://www.blogger.com/atom/ns#' term='Talk'/><title type='text'>The Developer Lead DevOps Initiative - A Talk Proposal</title><content type='html'>&lt;h4&gt;Description:&lt;/h4&gt;DevOps doesn't have to be a decree handed down from on high; in fact the best initiatives are those that start as grassroots efforts, gain the attention of management and then blossom into self-sustaining cultures. &amp;nbsp;In this talk we'll explore developer lead DevOps initiatives and how to make them succeed.&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Abstract:&lt;/h4&gt;DevOps is not a tool, or a system, or a strategy. &amp;nbsp;It's not green builds, or automation or the cloud. &amp;nbsp;It's not Agile, or Lean or Scrum. &amp;nbsp;It's a culture. &amp;nbsp;It's shared values. &amp;nbsp;And most importantly it's the vision of a nimble, high performing organization with enthusiastic collaboration and realistic expectations of risk and value.&lt;br /&gt;&lt;br /&gt;Though most of us don't recognize it, as developers we are uniquely positioned within our organizations to affect meaningful change. &amp;nbsp;Leveraging iterative and incremental process improvement we can:&lt;br /&gt;&lt;br /&gt;* chip away at organizational impediments that stand in the way of change,&lt;br /&gt;* help adjust perceptions of value,&lt;br /&gt;* integrate new communication techniques that decrease friction, increase transparency and have the power to delight our peers,&lt;br /&gt;* elect to adopt new processes and more importantly abandon those that no longer serve our goals,&lt;br /&gt;* encourage management to provide metrics that make us more efficient practitioners and more effective members of our organizations,&lt;br /&gt;* help steer innovation and provide options for the future,&lt;br /&gt;&lt;br /&gt;all without a chair in the corner office.&lt;br /&gt;&lt;br /&gt;Let's explore some of the ways that we, as developers, can implement a DevOps initiative and make our organizations awesome!</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/2852181322063639785/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/08/talk-the-developer-lead-devops-initiative.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2852181322063639785'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2852181322063639785'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/08/talk-the-developer-lead-devops-initiative.html' title='The Developer Lead DevOps Initiative - A Talk Proposal'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-6111512433831646519</id><published>2015-08-12T23:44:00.001-07:00</published><updated>2015-08-12T23:44:33.648-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Organizational Communication'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Open Closed Communication'/><category scheme='http://www.blogger.com/atom/ns#' term='E-mail'/><title type='text'>Know What's Worse Than E-Mail? ... Nothing.</title><content type='html'>As is not uncommon, I went on a pretty hard Twitter rant the other night. Aimed at the industry in general, I hit squarely on a few of the trappings of current software/technology business practices. The problem was that my approach was overwhelmingly negative, and while negativity serves to provoke and stir up controversy, it more often exacerbates the problems at hand as the targets of criticism simply entrench themselves deeper. Additionally, I was missing heaps of context that, in hindsight, makes my point complete. So, the series of blog posts that follow are simply a flushing out of my prior rant. For the sake of accountability I will start each post with my original thought, tear it down and then reshape it into the proper thesis it should have been.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;h3&gt;&lt;u&gt;Tweet #3&lt;/u&gt;&lt;/h3&gt;Controversial Statement:&lt;br /&gt;"Your communication techniques inhibit collaboration and open exchange of ideas. Try open by default, closed by necessity."&lt;br /&gt;&lt;br /&gt;&lt;div&gt;What it should have said:&lt;/div&gt;&lt;div&gt;"Your communication techniques inhibit collaboration and open exchange of ideas. Try open by default, closed by necessity."&lt;br /&gt;&lt;br /&gt;This one I won't apologize for. &amp;nbsp;If there is one thing that I hate/loath/fear, it's email. &amp;nbsp;Even the terminology makes me flushed - "I'm 'doing' email", like it's trimming the cat's nails or cleaning crayon off your flat screen. &amp;nbsp;Know what? Most of what I 'do' is 'delete email'. &amp;nbsp;In fact just last week I purged 25,000 messages from my "deleted but not quite deleted" folder. &amp;nbsp;Those 25,000 (I'm putting the 0s there for effect) had accrued since I last performed the cleansing roughly 6 months ago.&lt;br /&gt;&lt;br /&gt;But I'm not done! &amp;nbsp;How about this one ...&lt;br /&gt;&lt;br /&gt;(the florescent lights snap on)&lt;br /&gt;(a smartly dressed developer is revealed, fingers moving about a keyboard like a pianist knocking out Tchaikovsky's No1 in B-flat minor) &lt;br /&gt;(the phone rings)&lt;br /&gt;*BRINGG* *BRINGG*&lt;br /&gt;(the phone rings again slightly advancing it staccato as if to emphasize the urgency of the caller)&lt;br /&gt;*BRINGG* *BRINGG*&lt;br /&gt;Julie: Hello.&lt;br /&gt;Sam: Hey Julie, got a min?&lt;br /&gt;Julie (slightly perturbed): Sure. What's up?&lt;br /&gt;Sam: Hey so can you respond to Flint's email?&lt;br /&gt;Julie: I responded over an hour ago Sam, (clicking from the mouse scrolling) I sent it at 12:48.&lt;br /&gt;(silence)&lt;br /&gt;(then frantic scrolling as Sam sifts through her inbox searching for what can't be found)&lt;br /&gt;Julie: Sam? 12:48.&lt;br /&gt;Sam: Julie,(awkward pause) was I on the response email to the client?&lt;br /&gt;Julie: Awe CRAP, NO! &amp;nbsp;Frank dropped you from the distribution when he forwarded it to me.&lt;br /&gt;(Scene)&lt;br /&gt;&lt;br /&gt;At least once every week, I bury my face in my hands to weep as this scene plays out like clockwork. &amp;nbsp;What's wrong here is not the asynchronicity of email; that part is great. &amp;nbsp;It's the fact that as a method of communication it's closed by default and then opened by choice. &amp;nbsp;In our story above, the only recourse for Sam, when she has not heard back form Julie, is an embarrassing phone call or nagging follow-up email that only yields further frustration. &amp;nbsp;Sam has no way on her own to opt back into this communication loop after being passively excluded. &amp;nbsp;So what are we to do?&lt;br /&gt;&lt;br /&gt;Tooling to the rescue!&lt;br /&gt;&lt;br /&gt;The last half decade has brought major advancements in the office communication tool chain. &amp;nbsp;Platforms like HipChat and Slack have slipped through the gates of the enterprise often in spite of vigilant IT departments; and the reason is simple, they are low friction and enhance transparency.&lt;br /&gt;&lt;br /&gt;Slack, for example, uses the concepts of 'channels', 'direct messages' and 'private groups'. &amp;nbsp;Channels are an opt-in element where anyone without a restricted account can, on their own accord, join or leave. &amp;nbsp;This means that information that is typically locked up in email threads is available to a wider audience for participation. &amp;nbsp;Subject matter experts can be brought into a channel, read and orient to historical context, make recommendations and then leave the channel, all at their own discretion. &amp;nbsp;The benefits of enhanced transparency brought forward with tools like this can enable an organization to respond faster and with richer, more detailed information than ever before.&lt;br /&gt;&lt;br /&gt;I have heard on several occasions, people talk of the consequences of this level of transparency; they are often concerned about embarrassment, appearing foolish or say something they shouldn't. &amp;nbsp;While it's certainly true that these tools lower the barriers to communication, I would argue that because the expectation is one of open communication, employees are actually less likely to fall into the trap of thinking their communications are secure and will not be forwarded to unintended audiences.&lt;br /&gt;&lt;br /&gt;So can we admit defeat and stop with the constant stream of emails that say "Adding Foo to the chain". &amp;nbsp;Can we support transparent communication that's open by default and private when needed? &amp;nbsp;In the end, it will make ourselves and our organizations more effective, responsive and most importantly, collaborative.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;In case you missed the beginning, you can find Part 1 here:&amp;nbsp;&lt;a href="http://www.lucidmotions.net/2015/08/value-your-developers.html"&gt;Valuing Developers Over Intellectual Property&lt;/a&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/6111512433831646519/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/08/know-whats-worse-than-e-mail.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6111512433831646519'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6111512433831646519'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/08/know-whats-worse-than-e-mail.html' title='Know What&apos;s Worse Than E-Mail? ... Nothing.'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-2621988866311546633</id><published>2015-08-11T23:42:00.001-07:00</published><updated>2015-08-12T00:03:00.571-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Management'/><category scheme='http://www.blogger.com/atom/ns#' term='KPI'/><category scheme='http://www.blogger.com/atom/ns#' term='Optimization'/><category scheme='http://www.blogger.com/atom/ns#' term='Revenue'/><category scheme='http://www.blogger.com/atom/ns#' term='Business Metrics'/><category scheme='http://www.blogger.com/atom/ns#' term='Performance'/><title type='text'>"The ratio of people to cake is too big." - Milton Waddams</title><content type='html'>As is not uncommon, I went on a pretty hard Twitter rant the other night. Aimed at the industry in general, I hit squarely on a few of the trappings of current software/technology business practices. The problem was that my approach was overwhelmingly negative, and while negativity serves to provoke and stir up controversy, it more often exacerbates the problems at hand as the targets of criticism simply entrench themselves deeper. Additionally, I was missing heaps of context that, in hindsight, makes my point complete. So, the series of blog posts that follow are simply a flushing out of my prior rant. For the sake of accountability I will start each post with my original thought, tear it down and then reshape it into the proper thesis it should have been.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;h3&gt;&lt;u&gt;Number 2&lt;/u&gt;&lt;/h3&gt;Controversial Statement:&lt;br /&gt;"Employees cannot evaluate their contributions because KPIs are not broadly accessible."&lt;br /&gt;&lt;br /&gt;&lt;div&gt;What it should have said:&lt;/div&gt;&lt;div&gt;"Helping employees correlate their actions to improving business metrics is a win-win feedback loop."&lt;br /&gt;&lt;br /&gt;I've never been on a snipe hunt, but my guess is that it's similar to finding a business that actually builds KPIs specific to each tier and segment of their organization. &lt;br /&gt;&lt;br /&gt;Wait.&lt;br /&gt;&lt;br /&gt;Take a deep breath Bill ... before you rant again. &lt;br /&gt;&lt;br /&gt;Let's back up a level and talk about what KPIs are and then see why they might be useful across an organization, regardless of size or revenue.&lt;br /&gt;&lt;br /&gt;So, what are these 'key performance indicators (KPIs)'? &amp;nbsp;As the name suggests, they are metrics that a business, organization, team, or individual can use to evaluate the success of their business activities. &amp;nbsp;KPIs can be focused on optimization, growth or even innovation (more on this later) and typically take factors like customer retention, revenue, SLAs, service quality, compliance, etc., into account. &amp;nbsp;The goal is to have something, or a collection of somethings generated at predetermined intervals for use as a yard stick in measuring forward business progress.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://s-media-cache-ak0.pinimg.com/236x/99/95/fc/9995fc5ecf7abe34582a61c8205a295e.jpg" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em; text-align: center;"&gt;&lt;img border="0" src="https://s-media-cache-ak0.pinimg.com/236x/99/95/fc/9995fc5ecf7abe34582a61c8205a295e.jpg" /&gt;&lt;/a&gt;"I only write code", you say or ...&lt;br /&gt;"I'm just a product owner."&lt;br /&gt;"Business is not my thing."&lt;br /&gt;"I know I am doing well when I get a fat bonus at the end of the year" &lt;br /&gt;&lt;br /&gt;Well, not quite so fast. &amp;nbsp;Do you actually 'know' why you got that bonus? &amp;nbsp;Was it all the new features you shipped? &amp;nbsp;Was it all the bugs you fixed? &amp;nbsp;Or was it some manager's wishy-washy opinion of your contribution to _________ (fill in the blank with revenue, growth, optimization, etc.)? &amp;nbsp;See my point? &amp;nbsp;Without KPIs you don't know why you got that bonus, and therefore, you don't actually understand the value you or your team brings to your organization.&lt;br /&gt;&lt;br /&gt;That said keep Hanlon's Razor in mind and "Never ascribe to malice what can be attributed to incompetence". &amp;nbsp;While some underhanded managers may feel that it's to their benefit for employees to not understand their contribution to the organization's performance (think wage suppression); I would hazard a guess that most managers don't themselves have a good handle on how to track their own performance, let alone that of their teams. &amp;nbsp;So, if our managers don't understand their true performance, and developers don't understand our true performance ... how is this organization even functioning. &amp;nbsp;Great Question!&lt;br /&gt;&lt;br /&gt;If you've done any lean enterprise reading then this will be familiar, if not, go read this book(&lt;a href="http://oreil.ly/1FFoKD7"&gt;http://oreil.ly/1FFoKD7&lt;/a&gt;) then come back ... I'll wait. &lt;br /&gt;&lt;br /&gt;Srsly. &lt;br /&gt;&lt;br /&gt;I said - I'll wait. &lt;br /&gt;&lt;br /&gt;You're still here...&lt;br /&gt;&lt;br /&gt;Fine, but don't blame me when I spoil the wicked awesome plot twist at the ending.&lt;br /&gt;&lt;br /&gt;The basic premise is that organizations can be thought to have three tiers:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;an optimization tier that focuses on protecting existing revenue sources and tuning operational behaviors.&lt;/li&gt;&lt;li&gt;a growth tier that focuses on new customer acquisition, expanding services and features to existing customers, overall generating additional revenue above existing sources.&lt;/li&gt;&lt;li&gt;an innovation tier that focuses on long term strategies/bets on the future.&lt;/li&gt;&lt;/ul&gt;And because the core functionality of each tier is different, the KPIs that measure success in each tier are necessarily different. &amp;nbsp;You can't measure the success of innovation by looking at cost cutting measures after all.&lt;br /&gt;&lt;br /&gt;Which brings me back to the point of my tweet - "Helping employees correlate their actions to improving business metrics ...". &amp;nbsp;By building KPIs for our organizations, teams, and employees, we can help them better understand their contribution to the success of the business overall. &amp;nbsp;Additionally, the small decisions an individual makes on a daily basis can be better informed and they will naturally further optimize business operations.&lt;br /&gt;&lt;br /&gt;So, for the developers reading this - think about what role you have in your organization (optimizing, growing, or innovating) and pester your manager for KPIs that you can use to make your organization smarter, faster and leaner ... and then at review time, drop the KPI mic for a fat bonus next year!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;See Part I here:&amp;nbsp;&amp;nbsp;&lt;a href="http://www.lucidmotions.net/2015/08/value-your-developers.html"&gt;Valuing Developers Over Intellectual Property&lt;/a&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/2621988866311546633/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/08/business-kpis.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2621988866311546633'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2621988866311546633'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/08/business-kpis.html' title='&quot;The ratio of people to cake is too big.&quot; - Milton Waddams'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-3548279270727972642</id><published>2015-08-10T23:05:00.002-07:00</published><updated>2015-08-12T00:01:33.569-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Craftsmanship'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Management'/><category scheme='http://www.blogger.com/atom/ns#' term='Development'/><category scheme='http://www.blogger.com/atom/ns#' term='Open Source Software'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><category scheme='http://www.blogger.com/atom/ns#' term='Training'/><category scheme='http://www.blogger.com/atom/ns#' term='Craftsman'/><category scheme='http://www.blogger.com/atom/ns#' term='Engineering'/><title type='text'>Valuing Developers Over Intellectual Property</title><content type='html'>As is not uncommon, I went on a pretty hard Twitter rant the other night.  Aimed at the industry in general, I hit squarely on a few of the trappings of current software/technology business practices.  The problem was that my approach was overwhelmingly negative, and while negativity serves to provoke and stir up controversy, it more often exacerbates the problems at hand as the targets of criticism simply entrench themselves deeper.  Additionally, I was missing heaps of context that, in hindsight, makes my point complete.  So, the series of blog posts that follow are simply a flushing out of my prior rant.  For the sake of accountability I will start each post with my original thought, tear it down and then reshape it into the proper thesis it should have been.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;h3&gt;&lt;u&gt;Tweet #1&lt;/u&gt;&lt;/h3&gt;Controversial Statement:&lt;br /&gt;"You value your company's intellectual property over the company's employees."&lt;br /&gt;&lt;br /&gt;&lt;div&gt;What it should have said:&lt;/div&gt;&lt;div&gt;"Understand that your employees generate the&amp;nbsp;intellectual property&amp;nbsp;that in turn makes your business valuable."&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Let's start with a hypothetical question. &amp;nbsp;Does your company make money from a product or service that was built once and has never needed additional maintenance? If you answered 'YES', then please tell me how I can invest; otherwise we need to talk about a few things...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If we know that we need to value our employees, how do we go about showing it? &amp;nbsp;There are the typical forms of compensation that come to mind - paychecks, stock, time off, sick leave, just to name a few. &amp;nbsp;But let's challenge ourselves. &amp;nbsp;How about food and coffee, or child care services, perhaps onsite dry cleaning, or transportation to and from your Mayan temple themed campus. &amp;nbsp;All these, be it compensation, or benefit/perk are provisional and are a raw expense to your business that buys you a commitment from an employee, but little else.&lt;br /&gt;&lt;br /&gt;What if, however, there was a place you could spend your money that could benefit both you and your employee? &amp;nbsp;Slow down and don't be too proud of yourself; naturally concluding that I am referring to training, because while brown bag lunches, seminars, and conferences do indeed make your employees more valuable to your organization, so does forcing them to actually take their vacation time.&lt;br /&gt;&lt;br /&gt;I am referring to ...&lt;br /&gt;&lt;h4&gt;Open Source Software&lt;/h4&gt;"Sure, we use that stuff" - you say. Yes, but to what extent? As I see it, there are three tiers of commitment that govern the return on investment/options that participating in the open source community affords.&lt;br /&gt;&lt;br /&gt;At the base level of commitment are the users of OSS, and most everyone these days uses some open source software in their day to day work. &amp;nbsp;Your usage helps the industry set standards by proxy, meaning that the more installations of a piece of OSS, the more weight that project has in the community.&lt;br /&gt;&lt;br /&gt;The next tier is for those contributing to OSS. &amp;nbsp;These are typically independent developers or organizations that use the OSS and help to maintain or grow the software through bug fixes and feature adds.&lt;br /&gt;&lt;br /&gt;The final tier - the highest level of commitment, represents the producers of OSS. &amp;nbsp;These are developers and organizations that either build new tooling out in the open or decide, for any handful of reasons, to take what was previously a closed source piece of software and open it up to the world.&lt;br /&gt;&lt;br /&gt;The theory here is that as you increase your organization's commitment to open source software, the benefits and options that your commitment affords will also increase. &amp;nbsp;Let's look at a few of the benefits:&lt;br /&gt;&lt;h4&gt;Training&lt;/h4&gt;Perhaps the most rudimentary of benefits is simply the exposure of your teams to different code bases. &amp;nbsp;Having the opportunity to simply read someone else's code will add design tricks and best practices to your tool box that even two day conference sessions can't teach. &amp;nbsp;Additionally, the structure of most projects forces the inclusion of unit and integration tests, automated builds, as well as code reviews, which, if your organization does not use these techniques, are invaluable to successful maturation of software products.&lt;br /&gt;&lt;h4&gt;Decreased Risk&lt;/h4&gt;This has been a sensitive topic since the first volley of security concerns were lobbed back and forth between open and closed source advocates. &amp;nbsp;I would like to partially side step the security concerns and focus instead on adoption risk. &amp;nbsp;By committing to using a project, or even better contributing to a project, you are casting a vote into the OSS community with your time, energy, effort and talent. &amp;nbsp;This commitment can show other organizations and developers not only that you care about their work, but also that their energy and efforts are useful to the broader community. &amp;nbsp;This show of support can elongate the life of a project and even entrench its usage in a community further, thereby decreasing your risk of adoption. &amp;nbsp;(As an aside I would like to note that you can often contribute to a project monetarily by directly supporting a project's committers, reimbursing them for their time. &amp;nbsp;This is often a solution to needed bug fixes when/if you do not have the bandwidth for such efforts.)&lt;br /&gt;&lt;h4&gt;Increased Exposure for Your Business &amp;amp; Increased Exposure for Your Developers&lt;/h4&gt;While this topic is somewhat controversial and not everyone agrees on the approach, I am a huge proponent of using OSS as a growth tool. &amp;nbsp;An organization's commitment to OSS can be a bit of a double edged sword. &amp;nbsp;On one side, you are increasing your developer's exposure to the broader community, a bonus for them; and on the other hand you are increasing your developer's exposure to the broader community, potentially a loss for you. &lt;br /&gt;&lt;br /&gt;The way I see it is that having your employees poached or hired out from under you is a reality regardless, so allowing them to contribute to OSS, expanding their portfolio, is just another form of compensation. &amp;nbsp;If they stay, then you are getting a more well rounded employee. &amp;nbsp;If they leave, then at least your firm has shown to the community that you are invested in OSS and you are therefore more attractive to an even broader spectrum of the developer community. &amp;nbsp;Either way its a bit of a win-win.&lt;br /&gt;&lt;h4&gt;Better Quality Software for Cheaper&lt;/h4&gt;The final level of commitment to OSS was producing/open sourcing works that your company has created. &amp;nbsp;This is a wonderful opportunity to get the community as a whole involved to help lower your development costs for projects. &amp;nbsp;Look no further than some of the great tooling coming from the likes of Facebook, Netflix, Etsy, etc. to see how opening your code to the larger world can decrease your costs and actually increase your quality!&lt;br /&gt;&lt;h4&gt;Closing&lt;/h4&gt;In closing, cementing an organizational commitment to OSS can be a huge gain for your teams as individuals as well as the organization as a whole. &amp;nbsp;Be sure to define policies regarding committing to open source to not only make your CFO/Lawyers happy, but also give your developers room to experiment and grow.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;br /&gt;See Part II here:&amp;nbsp;&lt;a href="http://www.lucidmotions.net/2015/08/business-kpis.html"&gt;"The ratio of people to cake is too big."&lt;/a&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/3548279270727972642/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/08/value-your-developers.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3548279270727972642'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3548279270727972642'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/08/value-your-developers.html' title='Valuing Developers Over Intellectual Property'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-1815051462004778518</id><published>2015-06-29T23:29:00.001-07:00</published><updated>2015-06-29T23:29:53.631-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Management'/><category scheme='http://www.blogger.com/atom/ns#' term='Career'/><title type='text'>On 'Your Future' at Work</title><content type='html'>Somehow the impermanence of life in the theater made it OK to talk about "the future". &amp;nbsp;Most of us talked freely about what we were going to do when we finally left. &amp;nbsp;Start our own businesses. &amp;nbsp;Go to work for that 'other' shop. Go back to school. &amp;nbsp;Get out of Theater all together. &amp;nbsp;We all changed jobs and frequently; some of us every 6-8 weeks and the impermanence was, comforting.&lt;br /&gt;&lt;br /&gt;But life's different now.&lt;br /&gt;&lt;br /&gt;I find myself much less willing to talk openly about my plans for the future. &amp;nbsp;Working in a traditional business environment has this stagnating effect. &amp;nbsp;It slowly fills your grey walled cube with molasses, until one day you have this sinking feeling of despair, or anxiety, or rage, or a little of all three and you think you - Just. Want. Out. &amp;nbsp;I am no where near the molasses filled cube stage; but, I do worry that the pressure to suppress discussions about the future, my future, weights on my creativity and the problem is - it's bad for business.&lt;br /&gt;&lt;br /&gt;At work you have the people you share water cooler pleasantries with, and those you Foosball with, and those you eat lunch with, and those you sneak that 3:30 beer with. &amp;nbsp;And minus the first group, these are people you spend a lot of your day with. &amp;nbsp;They see you, active in the workplace. &amp;nbsp;They feel your moods, they deal with your snide comments, they listen to your rants - and some of them are the best folks to help counsel your career. &amp;nbsp;But here, in America, we are discrete. &amp;nbsp;We don't talk pay. &amp;nbsp;We don't open up to our managers. &amp;nbsp;We cower under the threat of being fired for taking an interview at that 'other' company - it's bad for business. &lt;br /&gt;&lt;br /&gt;But after we have been secretly interviewing for months, began dreaming about the new possibilities, stopped caring about the old responsibilities and have made plans for our families, our homes and our lives, we quit. &amp;nbsp;Sometimes our employers see it coming and are ready, other times we leave our thinly provisioned teams in a lurch as we cart away institutional knowledge and overstuffed baggage of battles long forgotten - it's bad for business. &lt;br /&gt;&lt;br /&gt;Then those left behind begin to interview. &amp;nbsp;They throw problems about gold coins and pirates on the white board with menacing pleasure. &amp;nbsp;They ask benign behavioral questions to see if you were cast in a similar image. &amp;nbsp;They reluctantly hire those who most resemble what they imagine is in the mirror &amp;nbsp;- it's bad for business.&lt;br /&gt;&lt;br /&gt;And so the cycle repeats.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;This post was inspired by some reading I have been doing of late and I encourage you to check out these wonderful posts/articles/etc. &amp;nbsp;I don't agree with all of it, but there is plenty of food for thought.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;a href="http://www.jasq.org/just-another-scala-quant/inverting-binary-trees-considered-harmful"&gt;Inverting Binary Trees Considered Harmful&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;a href="http://othersociologist.com/2015/04/16/myth-about-women-in-science/"&gt;Myth About Women in Science&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;a href="http://www.joelonsoftware.com/articles/GuerrillaInterviewing3.html"&gt;The Guerrilla Guide to Interviewing&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;a href="https://twitter.com/mxcl/status/608682016205344768?lang=en"&gt;Max Howell's Infamous Tweet&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;a href="https://medium.com/@xsvengoechea/always-be-interviewing-3cfeec881e2c"&gt;Always Be Interviewing&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;a href="https://twitter.com/search?q=talkpay&amp;amp;src=tyah&amp;amp;lang=en"&gt;#TalkPay&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;a href="https://stripe.com/jobs/engineering-onsite.pdf"&gt;Stripe Onsite Interviews - Sunday Test&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;a href="http://www.slideshare.net/reed2001/culture-1798664"&gt;Netflix Culture Slides&lt;/a&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;a href="https://hbr.org/2013/09/go-ahead-ask-your-employees-if-theyre-happy"&gt;Ask Your Employees If They Are Happy&lt;/a&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/1815051462004778518/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/06/on-your-future-at-work.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1815051462004778518'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1815051462004778518'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/06/on-your-future-at-work.html' title='On &apos;Your Future&apos; at Work'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-2663850955249402343</id><published>2015-06-04T23:41:00.002-07:00</published><updated>2015-06-04T23:41:42.909-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='OData'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Solr'/><category scheme='http://www.blogger.com/atom/ns#' term='APIs'/><category scheme='http://www.blogger.com/atom/ns#' term='WTF'/><category scheme='http://www.blogger.com/atom/ns#' term='C#'/><category scheme='http://www.blogger.com/atom/ns#' term='LINQ'/><category scheme='http://www.blogger.com/atom/ns#' term='WebAPI'/><title type='text'>WebAPI OData v.4 and A Double Applied $Skip</title><content type='html'>As I noted in my last &lt;a href="http://www.lucidmotions.net/2015/05/implementing-count-in-custom-linq.html"&gt;post&lt;/a&gt;, I have been struggling to implement a LINQ provider over a Solr index. &amp;nbsp;While the adventure has been trying at times, for the most part been, it has been quite successful. &amp;nbsp;My final hurdle, one that I had been struggling with for the last week or so, was quite confounding ... when the $skip option was used, it was seemingly double applied. &amp;nbsp;To fully understand this behavior, let's look at a few examples:&lt;br /&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;A query string of ~?$top=10&amp;amp;$skip=10 over a set of 100 results yields 0 results.&lt;/li&gt;&lt;li&gt;A query string of ~?$top=10&amp;amp;$skip=8 over a set of 100 results yields 2 results.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Before I explain the crazy, let's take a look at the Controller's Get:&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;style type="text/css"&gt;.csharpcode, .csharpcode pre {  font-size: 13.3333px;  font-width: 400;  color: black;  font-family: "Courier New"; } .csharpcode pre { margin: 0px; } .csharpcode .comment { color: #008000; } .csharpcode .comment2 { color: #808080; } .csharpcode .type { color: #2B91AF; } .csharpcode .keyword { color: #0000FF; } .csharpcode .string { color: #A31515; } .csharpcode .preproc { color: #0000FF; } &lt;/style&gt; &lt;br /&gt;&lt;div class="csharpcode"&gt;&lt;pre style="background: #f0f0f0; border: 1px dashed #CCCCCC; color: black; color: black; overflow-x: auto; overflow-y: hidden; padding: 0px; text-align: left; word-wrap: normal;"&gt;[EnableQuery(&lt;br /&gt;    AllowedQueryOptions = AllowedQueryOptions.Count&lt;br /&gt;                          | AllowedQueryOptions.&lt;span class="type"&gt;Filter&lt;/span&gt;&lt;br /&gt;                          | AllowedQueryOptions.OrderBy&lt;br /&gt;                          | AllowedQueryOptions.Skip&lt;br /&gt;                          | AllowedQueryOptions.Top)]&lt;br /&gt;[ODataRoute]&lt;br /&gt;&lt;span class="keyword"&gt;public&lt;/span&gt; &lt;span class="type"&gt;PageResult&lt;/span&gt;&amp;lt;&lt;span class="type"&gt;Foo&lt;/span&gt;&amp;gt; Get(&lt;span class="type"&gt;ODataQueryOptions&lt;/span&gt;&amp;lt;&lt;span class="type"&gt;Foo&lt;/span&gt;&amp;gt; queryOptions)&lt;br /&gt;{&lt;br /&gt;&lt;br /&gt;    &lt;span class="type"&gt;var&lt;/span&gt; bars = &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;QueryableData&lt;/span&gt;&amp;lt;&lt;span class="type"&gt;Foo&lt;/span&gt;&amp;gt;(_provider);&lt;br /&gt;&lt;br /&gt;    &lt;span class="type"&gt;var&lt;/span&gt; result = ((&lt;span class="type"&gt;IQueryable&lt;/span&gt;&amp;lt;&lt;span class="type"&gt;Foo&lt;/span&gt;&amp;gt;)&lt;span class="type"&gt;queryOptions&lt;/span&gt;&lt;br /&gt;        .ApplyTo(bars,&lt;br /&gt;            &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ODataQuerySettings&lt;/span&gt;(&lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;ODataQuerySettings&lt;/span&gt; { EnableConstantParameterization = &lt;span class="keyword"&gt;false&lt;/span&gt;, EnsureStableOrdering = &lt;span class="keyword"&gt;false&lt;/span&gt; }))).ToList();&lt;br /&gt;    &lt;span class="type"&gt;var&lt;/span&gt; count = _provider.Count;&lt;br /&gt;    &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="keyword"&gt;new&lt;/span&gt; &lt;span class="type"&gt;PageResult&lt;/span&gt;&amp;lt;&lt;span class="type"&gt;Foo&lt;/span&gt;&amp;gt;(result, &lt;span class="keyword"&gt;null&lt;/span&gt;, count);&lt;br /&gt;}&lt;!--[if IE]&gt;&lt;br /&gt;&lt;br /&gt;&lt;![endif]--&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;We start off with our Enable Query Attribute to set which Query Options we will allow. &amp;nbsp;In this case we'll use everything but $select and $expand, and follow that with our OData routing attribute. &amp;nbsp;The Get method will return a PageResult since we wand to handle the paging and counting and not delegate that responsibility to the framework(s), and lastly, we will also manually handle applying the ODataQueryOptions.&lt;br /&gt;&lt;br /&gt;While it is not required to use the overload here with the ODataQueryOptions, it can be a helpful for certain optimizations. &amp;nbsp;In the event that the count query option was applied the framework will pass the query expression to the queryable twice, once with a return type of 'long and then again with a return type of IQueryable&amp;lt;T&amp;gt;. &amp;nbsp;Since all Solr queries implicitly return with the num_results property, we can ignore the count expression query and pass the results count back through the query provider thereby saving either two calls to the database or having to implement futures. &lt;br /&gt;&lt;br /&gt;Now, back to our problem.&lt;br /&gt;&lt;br /&gt;The prudent developer, when challenged with unexpected results from a method call might drop a breakpoint on the return statement and see what values are being returned. &amp;nbsp;Doing this left me rather puzzled ... the query string ?$top=10&amp;amp;$skip=10 returned a PageResult&amp;lt;Foo&amp;gt;(Foo[10], null, null), exactly what was expected. &amp;nbsp;I flipped back over to chrome to find 'value:[ ]' on my screen. &lt;br /&gt;&lt;br /&gt;After a few &lt;strike&gt;hours&lt;/strike&gt; days of trying different things I elected to load up the GitHub issues list for OData and came across this post:&amp;nbsp;&lt;a href="https://github.com/OData/WebApi/issues/159"&gt;OData PageResult method ignoring count parameter when using EnableQuery attribute #159&lt;/a&gt;. &amp;nbsp;Reading through the issue I had the idea that maybe, just maybe, the EnableQuery attribute was re-applying the query options over the PageResult. &amp;nbsp;After commenting out the attribute, the method began to function as expected and I had a few fistfuls of hair to spare. &lt;br /&gt;&lt;br /&gt;Hope this helps someone!&lt;br /&gt;&lt;br /&gt;For internet linking purposes ... here is my stack overflow &lt;a href="http://stackoverflow.com/questions/30608837/webapi-odata-skip-on-custom-iqueryable-double-applied/30626736#30626736"&gt;question and answer&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/2663850955249402343/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/06/webapi-odata-v4-and-double-applied-skip.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2663850955249402343'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2663850955249402343'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/06/webapi-odata-v4-and-double-applied-skip.html' title='WebAPI OData v.4 and A Double Applied $Skip'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-1465436280772497672</id><published>2015-05-24T17:43:00.004-07:00</published><updated>2015-05-30T22:43:17.198-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='OData'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Solr'/><category scheme='http://www.blogger.com/atom/ns#' term='C#'/><category scheme='http://www.blogger.com/atom/ns#' term='C# NoSql'/><category scheme='http://www.blogger.com/atom/ns#' term='LINQ'/><category scheme='http://www.blogger.com/atom/ns#' term='WebAPI'/><title type='text'>Implementing $Count in a Custom Linq Provider with WebAPI OData v4</title><content type='html'>Over the last week I have been working on implementing a custom Linq provider that wraps a Solr search query and returns a composite projection of the solr search results and some underlying Hbase data. &amp;nbsp;Just to add to the madness, the composite projection is a child element of a WebAPI endpoint and is made query-able via Odata.&lt;br /&gt;&lt;br /&gt;Before we can get to what this post is really about, implementing $count from the OData spec, we need to get familiar with all the moving pieces. &amp;nbsp;At the core, is the implementation of IQueryable or IOrderedQueryable if you need ordered results sets. &amp;nbsp;This queryable implementation takes a provider that consumes a context that handles all the parsing logic and mapping down to whatever service wrapper you are implementing for. &amp;nbsp;Throw in a few dozen classes to handle expression parsing, give yourself a week and boom you have a functioning IQueryable. &amp;nbsp;Then you turn on OData, wire up your controller and drop some code that looks like this:&lt;br /&gt;&lt;br /&gt;&lt;pre style="background-color: white; margin: 0em; overflow: auto;"&gt;&lt;code style="color: black; font-family: Consolas,&amp;quot;Courier New&amp;quot;,Courier,Monospace; font-size: 10pt;"&gt;&lt;span style="color: blue;"&gt;var&lt;/span&gt; foo = &lt;span style="color: blue;"&gt;new&lt;/span&gt; QueryableData&amp;lt;Bar&amp;gt;(_provider);&lt;br /&gt;&lt;span style="color: blue;"&gt;var&lt;/span&gt; result = (IQueryable&amp;lt;Bar&amp;gt;)queryOptions.ApplyTo(foo);&lt;br /&gt;&lt;br /&gt;&lt;span style="color: blue;"&gt;return&lt;/span&gt; &lt;span style="color: blue;"&gt;new&lt;/span&gt; PageResult&amp;lt;Bar&amp;gt;(result.ToList(), &lt;span style="color: blue;"&gt;null&lt;/span&gt;, _provider.Count);&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;The provider is injected into the controller, passed to the QueryableData source, the OData QueryOptions are applied to the IQueryable and we return the result as a paged data set. &amp;nbsp;Boom. Slap some $count=true on the end of your urls and Done...&lt;br /&gt;&lt;br /&gt;Not so fast.&lt;br /&gt;&lt;br /&gt;I ran my code with a unit test to see what the $count was going to do. &amp;nbsp;Unexpectedly, I encountered &lt;i&gt;'cannot convert IQueryable&amp;lt;Bar&amp;gt; to type long'&lt;/i&gt; which had me a bit puzzled. &amp;nbsp;I had presumed that the count would turn out to be an expression that needed to be teased from the tree but in this case it appeared to be wrapping the entire tree - the debugger confirmed as much. &amp;nbsp;As a test, I reversed my logic of passing the count back as an accessory property up the chain to passing the queryable as the accessory and the count of results as the primary return type. &amp;nbsp;Running the unit test again resulted in yet another confusing error - &lt;i&gt;'cannot convert type long to IQueryable&amp;lt;Bar&amp;gt;'&lt;/i&gt;. WTF?&lt;br /&gt;&lt;br /&gt;I reset my breakpoints and stepped through the code again finding a rather cleaver thing. &amp;nbsp;My expression parser was actually being called &lt;i&gt;twice&lt;/i&gt;. &amp;nbsp;Once with the LongCout expression wrapper and then again without it. &amp;nbsp;A small change to my provider's execute method yielded the correct results:&lt;br /&gt;&lt;br /&gt;&lt;pre style="background-color: white; margin: 0em; overflow: auto;"&gt;&lt;code style="color: black; font-family: Consolas,&amp;quot;Courier New&amp;quot;,Courier,Monospace; font-size: 10pt;"&gt;&lt;span style="color: blue;"&gt;if&lt;/span&gt; (Queryable == &lt;span style="color: blue;"&gt;null&lt;/span&gt;)&lt;br /&gt;{&lt;br /&gt;    &lt;span style="color: blue;"&gt;var&lt;/span&gt; isEnumerable = (&lt;span style="color: blue;"&gt;typeof&lt;/span&gt;(TResult).Name == &lt;span style="color: #a31515;"&gt;"IEnumerable`1"&lt;/span&gt; || &lt;span style="color: blue;"&gt;typeof&lt;/span&gt;(TResult).Name == &lt;span style="color: #a31515;"&gt;"Int64"&lt;/span&gt;);&lt;br /&gt;    &lt;span style="color: blue;"&gt;var&lt;/span&gt; result = _serviceWrapperContext.Execute(expression, isEnumerable);&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: green;"&gt;// we dont have a count to contend with so just return the queryable&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: blue;"&gt;if&lt;/span&gt; (result.GetType() != &lt;span style="color: blue;"&gt;typeof&lt;/span&gt;(QueryableCountWrapper))&lt;br /&gt;        &lt;span style="color: blue;"&gt;return&lt;/span&gt; (TResult)result;&lt;br /&gt;&lt;br /&gt;    &lt;span style="color: blue;"&gt;var&lt;/span&gt; r = (QueryableCountWrapper)result;&lt;br /&gt;    &lt;span style="color: green;"&gt;// Is our expression wrapped with a count query? &lt;/span&gt;&lt;br /&gt;    &lt;span style="color: blue;"&gt;if&lt;/span&gt; (&lt;span style="color: blue;"&gt;typeof&lt;/span&gt;(TResult).Name == &lt;span style="color: #a31515;"&gt;"Int64"&lt;/span&gt;)&lt;br /&gt;    {&lt;br /&gt;        Queryable = r.Queryable;&lt;br /&gt;        &lt;span style="color: blue;"&gt;return&lt;/span&gt; (TResult)r.Count;&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    Count = Int64.Parse(r.Count.ToString());&lt;br /&gt;}&lt;br /&gt;&lt;span style="color: blue;"&gt;return&lt;/span&gt; (TResult)Queryable;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;Since the provider is an injected dependency of the controller with a per request life time, I am able to use it as a cache of sorts. &amp;nbsp;The first time through the execute method we will call our service wrapper context to have the query parsed, compiled and executed. &amp;nbsp;If we have a wrapping LongCount expression then the results will come back from the service wrapper bundled in a &lt;i&gt;QueryableCountWrapper&lt;/i&gt;. &amp;nbsp;We can then unpack the &lt;i&gt;QueryableCountWrapper&lt;/i&gt; into class properties, and with a bit of switching logic prevent a double execution of the service wrapper calls.&lt;br /&gt;&lt;br /&gt;Hope this saves someone some time in the future and happy coding.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/1465436280772497672/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/05/implementing-count-in-custom-linq.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1465436280772497672'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1465436280772497672'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/05/implementing-count-in-custom-linq.html' title='Implementing $Count in a Custom Linq Provider with WebAPI OData v4'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-2840658534053014727</id><published>2015-04-22T22:31:00.002-07:00</published><updated>2015-04-22T22:31:31.177-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Free Writing'/><category scheme='http://www.blogger.com/atom/ns#' term='Random'/><title type='text'>ETA 30 min.</title><content type='html'>I'm gonna miss the keynote aren't I? &lt;br /&gt;Google maps puts me 25 min to the Bossanova with light traffic.&lt;br /&gt;Parking's gonna be a mess. &amp;nbsp;Jim and I looked around yesterday and there was nothing for folks without a "Zone G" permit. &amp;nbsp;I wonder if Portland lets you buy a permit online. Gah! For a tech-centric city, this site's a mess.&lt;br /&gt;Where are my keys?&lt;br /&gt;Better question - where are my pants?&lt;br /&gt;OK, kick off this test run, grab breakfast and boogie.&lt;br /&gt;Hair looks sharp. Shirt is buttoned. Laptop in bag, phone charged, let's roll.&lt;br /&gt;Shoot!&lt;br /&gt;Where ... are ... my ... pants?&lt;br /&gt;Alright, pat-down, got everything finally. &lt;br /&gt;Now food.&lt;br /&gt;Oh. Wow. I must say this is quite a delightful breakfast for a roadside Comfort Inn reminiscent of the the Timberline Lodge. Eggs, sausage and an English muffin. This ought to soak up last night, maybe?&lt;br /&gt;Keys, coffee, extra croissant, directions. &lt;br /&gt;Cool. &lt;br /&gt;The Eagle - haven't heard this since Sacramento, love this station.&lt;br /&gt;Where to park? &amp;nbsp;With all these spaces, you'd think they would put in metered parking. Here take my money, is it not green enough? &amp;nbsp;Ooooh, residential parking, no signs, few blocks away. Perfect!&lt;br /&gt;Right. Three very steep flights of stairs. Oof. &lt;br /&gt;Need more coffee. &lt;br /&gt;Where's my Advil?&lt;br /&gt;Crap, Sebastian is the first talk, this ought to be a roller. Seriously, where is my Advil. &amp;nbsp;"Because beer" - yup that about sums it up.</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/2840658534053014727/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/04/eta-30-min.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2840658534053014727'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2840658534053014727'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/04/eta-30-min.html' title='ETA 30 min.'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-1766223399521717619</id><published>2015-02-22T15:40:00.001-08:00</published><updated>2015-02-22T15:40:06.427-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Big Data'/><category scheme='http://www.blogger.com/atom/ns#' term='Hadoop'/><category scheme='http://www.blogger.com/atom/ns#' term='Conference'/><title type='text'>Strata + Hadoop World 2015 - Conference or Trade Show?</title><content type='html'>Fresh off the plane from a few days at Strata +&amp;nbsp;Hadoop World, I thought I'd draft a quick wrap up of the &lt;strike&gt;conference&lt;/strike&gt; trade show. &amp;nbsp;This being my first attendance, expectations were quite high and I was unfortunately left frustrated and a bit disappointed.&lt;br /&gt;&lt;br /&gt;The event was held at the San Jose Convention Center and despite the buildings timid facade, the interior boasts a sprawling labyrinth of meeting rooms, public spaces and hidden hallways. &amp;nbsp;The organizers did well to provide plenty of workspace, conspicuous power and some of the best wifi I have experienced at a gathering of this size. &amp;nbsp;From a technical execution standpoint, the only blemish was sparse catering between scheduled breaks. &amp;nbsp;Finding a cup of coffee to prop yourself up during the extended afternoon sessions was an effort better fit for a scavenger hunt. &amp;nbsp;That said, the catering, when it was around, was on point with a fair diversity of offerings and a pleasant staff.&lt;br /&gt;&lt;br /&gt;Not unlike other gatherings of this size, the event pivoted around a sizable expo hall with plenty of variety on display. &amp;nbsp;During Wednesday's expo crawl, I found everything from two to three person startups to traditional enterprise integration firms to the multinationals; most all with polished pitches aimed at the myriad of personalities and business roles present. &lt;br /&gt;&lt;br /&gt;I zig-zagged my way through a sea of drones, "Bacon Scientist" t-shirts and overly caffeinated sales professionals and was struck by a rather horrifying realization - nearly every third vendor was brandishing demos about how their SQL/ACID transaction solution for Hadoop was "the fastest" or "the only". &amp;nbsp;While many vendors are claiming that SQL will ultimately bring the masses to Hadoop, I worry that this very useful but still corner case capability for the platform has reached snake oil status. &amp;nbsp;More on this topic in my next post.&lt;br /&gt;&lt;br /&gt;The crawl ended at a modest 6:30pm leaving out-of-towners to fend for themselves that evening. &amp;nbsp;As is often the case on the road, Twitter saved a boring evening of hotel room email when Alistair Croll tipped me off to an event hosted by The Hive. &amp;nbsp;The meet and greet sandwiched a panel talk skillfully hosted by Alistair with Oscar Celma of Pandora, Jennifer Kennedy of SoundHound and Dr. Douglas Eck of Google's Play Music. &lt;br /&gt;&lt;br /&gt;As is often the case when listening to companies that have direct access to the emotional centers of our brains, I found myself completely enchanted with the possibilities and absolutely terrified for the future. &amp;nbsp;Perhaps the deepest and most unsettling settling insights came late in the evening as Dr. Eck explained the nuances of down voting a piece of music. &amp;nbsp;The overly eager group brandishing libations were lobed a doozie - "How can you tell if someone down voting every song on Coda hates Led Zeppelin or just the album?" &amp;nbsp;Blend the difficulty of that question with the threat of overplaying a beloved artist to a diehard fan and the complexities at hand become apparent. &amp;nbsp;As I stood there, Dr. Eck layered on the deep emotional connection we have to music, the difficulty of sustaining a listener's emotional state - positive or negative, and the goal of providing a rich and long lasting experience to expose the user to more advertising. &amp;nbsp;I closed out a rather late evening wondering how I would fair against two more days of thought provoking content.&lt;br /&gt;&lt;br /&gt;The following morning I found myself sitting in an overly dark room, amongst a sea of dimly lit laptops listening to the keynote addresses. &amp;nbsp;In turn - Cloudera, MemSql, SalesForce, MapR and IBM speakers leveraged identical formats to fill 10-15 minute slots with predictably bold statements about the future of "Big Data", each culminating with a terse and unashamed pitch for their various products. &amp;nbsp;On the tail of these presentations we encountered a meandering spiel by Dj Patil, the newly appointed US Chief Data Scientist, which included a short but warmly welcomed spot by President Obama. &amp;nbsp;Like papers strewn across a desk, the disjointed talk had clearly been disrupted by Mr. Patil's recent appointment and, unfortunately, it fell short of the momentum inducing spot it had been positioned for. &amp;nbsp;For those audience members seeking substance and had not yet walked out, two excellent talks punctuated the tail of the keynotes. The information dense, though poorly organized presentation from Solomon Hsiang on "Data-Driven Policy" brought to bear the complexities of interleaving data at global scale and the nervously delivered, but delightful and thought provoking talk from Poppy Crum of Dolby clearly illuminated our susceptibility to sensory augmentation through conflicting information sources. &amp;nbsp;In all, the balance in the keynotes would foreshadow the remainder of the content at Strata +&amp;nbsp;Hadoop World.&lt;br /&gt;&lt;br /&gt;I kicked off the sessions with a talk on Apache Kafka which was about as informative as the project's homepage. &amp;nbsp;Kafka is exactly what you would expect to get from merging the clustering approaches of Hadoop, the WAL of a product like HBase or Cassandra and a message queue like RabbitMQ - all together very interesting stuff. &amp;nbsp;I would also say that behind mentions of Spark, it was the 2nd most talked about project in the sessions. &amp;nbsp;Unfortunately in every OmniGraffle systems chart that was presented, replacing each occurrence of "Kafka" with "Tibco" and "Data Bus" with "Enterprise Message Bus" and it could easily have been 2005 all over again. &amp;nbsp;My point here is that the message bus in enterprise architecture has found its place and the considerations, such as asynchronicity, decoupling and message schema validation via middleware should be taken into account when building systems with Kafka. &amp;nbsp;If you are interested in getting a 10K foot overview, check out &lt;a href="http://www.se-radio.net/2015/02/episode-219-apache-kafka-with-jun-rao/"&gt;this SE-Radio podcast&lt;/a&gt; on the project. &amp;nbsp;Last note of caution is that Kafka is not case hardened from a security perspective yet; those features and functionality are however on the roadmap.&lt;br /&gt;&lt;br /&gt;On the point of security, the Kafka session was followed up with an interesting presentation on the future of Hadoop security. &amp;nbsp;Core issues such as user proxying and restricting data access resonated with well with the audience. &amp;nbsp;Security after the fact on the platform is the current modus operandi and there were encouraging statements indicating that the trend may be reversing as common practices solidify. &amp;nbsp;I am not well informed on the topic, but my instinct says that we will see all the common RDBMS security controls ported or projected into the ecosystem very soon.&lt;br /&gt;&lt;br /&gt;The remainder of the early afternoon was filled with two sessions on data visualizations, both of which confirmed the immaturity of the field and the trail blazing that is being done daily by teams within the big data visualization space. &amp;nbsp;A quick post presentation chat with Etan Lightstone of New Relic re-introduced the work that Ernest Dichter did for Betty Crocker wherein adding an egg made housewives feel more involved in the process of baking; while relevant this is actually not true (&lt;a href="http://www.bonappetit.com/entertaining-style/pop-culture/article/cake-mix-history"&gt;see here&lt;/a&gt;).&amp;nbsp; Either way, the chat did reignite concerns I have about giving users in data driven jobs just enough data to help them draw their own, albeit guided, conclusions.&lt;br /&gt;&lt;br /&gt;Around 5pm that evening I finally encountered the session I had been waiting for. &amp;nbsp;Scott Donaldson of FINRA gave a stunning architectural and implementation review of their fraud detection systems. &amp;nbsp;While the juicy details like cluster sizing were held back, he detailed an architecture which houses several petabytes of data and ingests a massive number of discretely schemed transactions per day. &amp;nbsp;Their solution is an interesting blend of bulk raw transaction data, data warehousing, network graphs to trace transaction flow between entities, data extraction into relational stores for deep analysis and an intense UI that enables investigators to exceed their prior investigational contexts. &lt;br /&gt;&lt;br /&gt;The following day picked up with an architectural patterns for Hadoop talk that while deeply interesting was for the most part a transposition of enterprise architectural patterns mixed with what has become standard data retention procedures of event sourcing systems. &amp;nbsp;On the back of that session, I had set high hopes for a deep dive into Elastic Search only to find a cursory review of &lt;a href="http://www.elasticsearch.org/overview/kibana/"&gt;Kibana&lt;/a&gt; and its relationship to ElasticSearch. &amp;nbsp;Adding to the mediocre nature of the day was an introduction to using Parquet for ETL that landed in similar fashion to the prior day's Kafka talk. &amp;nbsp;We were presented with primarily a review of the internal structures of Parquet with little to any commentary as to its form and fit within an architecture. &amp;nbsp;The product itself is quite intriguing as a columnar data store that provides data packing for significant disk savings and increased search performance - for those in need of that feature set.&lt;br /&gt;&lt;br /&gt;In all, the conference was marginal at best. &amp;nbsp;Though it's obviously possible that I simply landed on a slew of sessions that missed reaching the potential of their abstracts, my instincts say that content like &amp;nbsp;FINRA will remain uncommon until implementors on the platform are willing to open up about what they are really doing behind closed doors. &amp;nbsp;So if you are just starting out with the platform, the conference as a trade show will introduce you to the big players in the field and provide enough orientation to sound informed during your first sales call. &amp;nbsp;Personally, should tickets fall into my lap next year and the ecosystem has see some significant changes then I might bear the cost of a flight and hotel room, otherwise I will be finding a different conference for my big data interests.&lt;br /&gt;&lt;br /&gt;Check back next week for a follow-up post on the state of big data post Strata&amp;nbsp;+ Hadoop World.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/1766223399521717619/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/02/strata-hadoop-world-2015.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1766223399521717619'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1766223399521717619'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/02/strata-hadoop-world-2015.html' title='Strata + Hadoop World 2015 - Conference or Trade Show?'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-1672297371415803768</id><published>2015-02-16T20:35:00.001-08:00</published><updated>2015-02-16T20:36:35.243-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Organizational Communication'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='ITOps'/><category scheme='http://www.blogger.com/atom/ns#' term='Build Pipeline'/><category scheme='http://www.blogger.com/atom/ns#' term='Continuous Integration'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><category scheme='http://www.blogger.com/atom/ns#' term='Operations'/><title type='text'>Anticipating the DevOps Cultural Change</title><content type='html'>Recently, I have been preparing a whole series of blog posts on how developers can lead DevOps cultural changes within their organizations. &amp;nbsp;In researching for these pieces I have come to the realization that there is an unfair but immediate assumption that discussions of cultural change are a response to an existing dysfunction or cultural defect. &amp;nbsp;While there is obviously a just cause for that assumption, and I don't mean to be trite when I say this, I think there is a great opportunity here to think and act differently.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;May of the great DevOps talks, or &lt;a href="http://en.wikipedia.org/wiki/Application_lifecycle_management"&gt;ALM&lt;/a&gt; ones for that matter, focus explicitly on addressing defects and dysfunction. &amp;nbsp;"Want to stop production fires" they say, "give the developer the pager and make them get up at 2 AM." &amp;nbsp;This is certainly one way to drive change. &amp;nbsp;Simply force responsibility back up the product pipeline. &amp;nbsp;I do however worry about the unintended consequences of this approach. &amp;nbsp;Personally, I would like to hear an honest account of the impact this technique has had on innovation and the willingness of developers to go out on a limb stretching for new solutions. &amp;nbsp;My hunch is that organizations implementing a DevOps culture in a reactionary manor will become dramatically more risk adverse as their workforce turns over.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The solution in my mind is for developers to drive the cultural change out into the organization by assuming responsibility, rather than having it dumped on them. &amp;nbsp;This approach however is a lengthy process, an evolutionary approach to preparing a business for the future. &amp;nbsp;Management sponsorship of an influential developer or a broad based education initiative can be just the ticket to get the ball moving in the right direction. Engineering and Operations management can continue to address defects and deficiencies within the organization using existing techniques while simultaneously &amp;nbsp;empowering developers with the financial and emotional encouragement to improve existing process.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For organizations currently in a moment of stasis, this is the perfect time to begin the transformation in anticipation of changing business climates. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/1672297371415803768/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/02/the-devops-cultural-change.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1672297371415803768'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1672297371415803768'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/02/the-devops-cultural-change.html' title='Anticipating the DevOps Cultural Change'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-7457871382075028576</id><published>2015-02-14T16:28:00.000-08:00</published><updated>2015-02-14T18:45:06.165-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Automation'/><category scheme='http://www.blogger.com/atom/ns#' term='Organizational Communication'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='ITOps'/><category scheme='http://www.blogger.com/atom/ns#' term='Build Pipeline'/><category scheme='http://www.blogger.com/atom/ns#' term='Continuous Integration'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><title type='text'>The Long Con - A Developer's Continuous* Story (NDC Abstract)</title><content type='html'>While industry leaders espouse the benefits of Continuous*, agility and a DevOps culture, many an enterprise developer stands in a fallow field searching for greener pastures. &amp;nbsp;The popular perception that transformation must originate as a corporate decree or be sold through consulting hours is flatly wrong. &amp;nbsp;Cultural changes can be home grown, evolving from the initiative of a passionate individual with just a little planning and&amp;nbsp;ingenuity.&lt;br&gt;&lt;br&gt;The first leg of our journey begins simply enough with analyzing the business climate, gathering some off the shelf tooling and building an understanding that life can be better than the Publish Web Site Tool. &amp;nbsp;After creating modest but localized momentum, our focus is shifted to finding allies within our organization who can disseminate tooling, best practices and most importantly our excitement. &amp;nbsp;The final leg will focus on the cross functional techniques required to onboard our business, investigating the promises of Continuous Delivery and Continuous Deployment.&lt;br&gt;&lt;br&gt;Leading massive organizational change is not outside the bounds of a developer's role. &amp;nbsp;The hallowed halls of unicorn stories are attainable through iterative and incremental change, but not without our personal sacrifice and a willingness to play the long con.</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/7457871382075028576/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/02/the-long-con-developers-continuous-story.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7457871382075028576'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7457871382075028576'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/02/the-long-con-developers-continuous-story.html' title='The Long Con - A Developer&amp;#39;s Continuous* Story (NDC Abstract)'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-800924963937514791</id><published>2015-02-14T00:11:00.001-08:00</published><updated>2015-02-14T00:11:10.396-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Building Teams'/><category scheme='http://www.blogger.com/atom/ns#' term='Organizational Communication'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Session Management'/><title type='text'>Managing as a Mentor</title><content type='html'>Building a team, one that is high functioning, efficient and effective, is without a doubt the hardest part of being a manager. &amp;nbsp;Touching on every soft skill imaginable, the tides of team building,&amp;nbsp;the hiring, the firing, the nurturing and the nagging, will give one the opportunity to equally celebrate and loathe the responsibilities. &amp;nbsp;Finding balance through the swell is a matter of accepting that organizational evolution is natural, desired and can be leveraged to ease the challenges of team building.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The team that drives a new product to market is not the same as the one that comes back to a fallow field to till for new life; they are operationally different tasks and successes will not be measured by the same bar. &amp;nbsp;By anticipating a crest, a manager can look for opportunities to adjust a team's composition, thereby easing the organization's transition into its next phase. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Team builders, in larger organizations, benefit by leveraging trades and transfers where disruption to an individual team member's life can be better absorbed. &amp;nbsp;However, the same cannot be said of small organizations where the business cycles are shorter, with higher amplitudes and potentially more risk. &amp;nbsp;The savvy manager in that situation, must use alternate tactics to ensure predictable and amicable turnover within their organization, and playing the role of a mentor is one such technique.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The premise is to nurture an employee, bringing them up until their potential exceeds what the organization has to offer them. &amp;nbsp;This approach requires being willing to have honest conversations with team members about their goals and aspirations and reminding them throughout their tenure that they have the skills to succeed outside of the organization. &amp;nbsp;A manager having pride in their ability to shape an employee's success makes this endeavor natural and effortless. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Having a thoughtful strategy to rotate talent through the organization provides options to reshape a team as business conditions change and ensures the success of all parties.&amp;nbsp;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/800924963937514791/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/02/managing-as-mentor.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/800924963937514791'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/800924963937514791'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/02/managing-as-mentor.html' title='Managing as a Mentor'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-7803716601208762997</id><published>2015-01-01T23:58:00.003-08:00</published><updated>2015-01-02T08:14:20.696-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><title type='text'>Developers and the DevOps Initiative</title><content type='html'>&lt;br /&gt;After listening to the most recent &lt;a href="http://www.dotnetrocks.com/default.aspx?showNum=1082"&gt;DotNetRocks roundtable&lt;/a&gt; and dozens of other talks lately on DevOps, there is a presumption that the cultural change is a forgone conclusion, a decision already made by management, emphasized by statements like: “You don’t want it to break in production, give the developer the pager”.&amp;nbsp; While this version of the story is a great line for consultants to wield on management, don’t forget about developers who see DevOps as on opportunity to enhance the value they bring to a business. &amp;nbsp; &lt;br /&gt;&lt;br /&gt;Developers need to hear that they can drive the DevOps cultural change, proving the value to management and operations as they go.&amp;nbsp; Developers can start small with Continuous Builds that run after every push to their SCM.&amp;nbsp; The next natural step is to focus on Automated Deployment, by deploying the software, via scripts, into their dev environment after a successful build.&amp;nbsp; The software is now building and deploying completely automated so Continuous Integration can be easily grafted onto that system with scheduled nightly builds and small, automated test scripts.&amp;nbsp; &lt;br /&gt;&lt;br /&gt;Not only does the developer have hard numbers of build/test/deploy counts that can be brought to management, they can also sit down with Ops and say “hey, all you have to do is run this script and the software will deploy itself, or better yet, buy a tool like Octopus Deploy and have that run the script for you”.&amp;nbsp; Value can be proven to management, and goodwill shown to Ops, all in one move. &amp;nbsp; &lt;br /&gt;&lt;br /&gt;From here, the developer can begin conversations with management about workflows and the value of Continuous Delivery for clients and that of Continuous Deployment as an asset management strategy for the business.&amp;nbsp; Over with Operations, the developer can bring their knowledge of SCM for infrastructure as code projects, testing them with the automated build system or work with Ops on telemetry/performance data gathering. &amp;nbsp; &lt;br /&gt;&lt;br /&gt;The point here is that a DevOps culture change is not limited to management initiatives; developers who are looking to bring more value to the businesses they work for can drive the change.</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/7803716601208762997/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2015/01/developers-and-devops-initiative.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7803716601208762997'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7803716601208762997'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2015/01/developers-and-devops-initiative.html' title='Developers and the DevOps Initiative'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-4381374128290923010</id><published>2014-12-30T23:49:00.000-08:00</published><updated>2014-12-30T23:49:52.416-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Elixir'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SublimeText'/><category scheme='http://www.blogger.com/atom/ns#' term='DotNetRocks'/><title type='text'>Getting Started with Elixir and Sublime Text 3</title><content type='html'>I just finished the&lt;a href="http://www.dotnetrocks.com/default.aspx?showNum=1080"&gt; DotNetRocks Episode:1080&lt;/a&gt; with &lt;a href="https://twitter.com/bryan_hunter"&gt;Bryan Hunter&lt;/a&gt; where he espoused the benefits of the Elixir language. &amp;nbsp;After an hour of ear drum caressing, I sat down to 'mix' up some Elixir. &amp;nbsp;Of course, having little familiarity with Sublime Text 3 (what appears to be the defacto editor for Elixir on Windows?), I was stumped before I could ever lay a line outside the REPL. &amp;nbsp;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The journey begins with:&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Downloading Sublime Text 3 available here:&amp;nbsp;&lt;a href="http://www.sublimetext.com/3"&gt;http://www.sublimetext.com/3&lt;/a&gt;&amp;nbsp;(as always, if you find the product useful, send the developers some love and buy a license!)&lt;/li&gt;&lt;li&gt;Head over to PackageControl.Io and follow the instructions to install the Sublime Package Control. &lt;a href="https://packagecontrol.io/installation#st3"&gt;https://packagecontrol.io/installation#st3&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Next visit&amp;nbsp;Stanislav Vishnevskiy's Github page and &amp;nbsp;follow the instructions to install the Elixir Sublime plugin for Sublime Text 3.&amp;nbsp;&lt;a href="https://github.com/vishnevskiy/ElixirSublime"&gt;https://github.com/vishnevskiy/ElixirSublime&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The last step is to head over to the Elixir Getting Started Guide and start writing some code!&amp;nbsp;&lt;a href="http://elixir-lang.org/getting_started/1.html#1.2-interactive-mode"&gt;http://elixir-lang.org/getting_started/1.html#1.2-interactive-mode&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Further resources:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Elixir Main Site:&amp;nbsp;&lt;a href="http://elixir-lang.org/"&gt;http://elixir-lang.org/&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Elixir GitHub:&amp;nbsp;&lt;a href="https://github.com/elixir-lang/elixir"&gt;https://github.com/elixir-lang/elixir&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Prag Prog Book: &lt;a href="https://pragprog.com/book/elixir/programming-elixir"&gt;https://pragprog.com/book/elixir/programming-elixir&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Joe Armstrong on Elixir:&amp;nbsp;&lt;a href="http://joearms.github.io/2013/05/31/a-week-with-elixir.html"&gt;http://joearms.github.io/2013/05/31/a-week-with-elixir.html&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/4381374128290923010/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/12/getting-started-elixir-n-sublime-text-3.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4381374128290923010'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4381374128290923010'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/12/getting-started-elixir-n-sublime-text-3.html' title='Getting Started with Elixir and Sublime Text 3'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-4033402916483068269</id><published>2014-09-18T23:37:00.002-07:00</published><updated>2014-09-25T10:54:43.060-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='APIs'/><category scheme='http://www.blogger.com/atom/ns#' term='Architecture'/><category scheme='http://www.blogger.com/atom/ns#' term='ILoveAPIs'/><category scheme='http://www.blogger.com/atom/ns#' term='Conference'/><title type='text'>Wrapping it up: ILoveAPIs 2014</title><content type='html'>I wish I had written a summary off the back of last year's "I Love APIs" conference.  Of what I remember, it was primarily about what APIs are, the great possibilities for APIs, what they can do for your organization and so on. Nominally, introductory material.&lt;br /&gt;&lt;br /&gt;Attendance at that conference included several niche companies like Runescope, who were there for the technology track with demos of early systems that could help you through the build/test/consume API cycle. &lt;br /&gt;&lt;br /&gt;Apigee, the conference host, spent most of the product track talking about their consulting services.  They brandished fancy diagrams of massive distributed architectures in development, and the staff was instigating a cacophony of "what-if" conversations, sure to whet the pallet of future enterprise partners.   &lt;br /&gt;&lt;br /&gt;This year, was vastly different ... &lt;br /&gt;&lt;br /&gt;Runscope was nowhere to be found, no need.  That business appears to have taken off, as word of mouth alone at the conference seemed to be selling their tooling. &lt;br /&gt;&lt;br /&gt;A year ago, the products Apigee had been bantering about with "what-ifs", were now full-blown offerings - polished works of art with damn sexy user experiences. &lt;br /&gt;&lt;br /&gt;Last year, I found it cute that Walgreens was "wrapping an API around their stores." &amp;nbsp;This year, they were back with staggering numbers; touting a 6X dollar commitment from users interacting through online, in-store and mobile channels. &amp;nbsp;Presentation slides flipped by indicating massive success in APIs and developer partnerships, along with huge revenue growth for in-store photo printing.&lt;br /&gt;&lt;br /&gt;Hell, I even have to throw props to Accenture, who last year, brought a gaggle of technologists for what felt like a very expensive off-site.  This year, they were there with a refined and crystal clear message - "... you already know you need APIs for your Big Data. Not only do we have your platform for Big Data, we can get you a dozen Data Scientists in Bangalore for what your paying for a single one stateside." &lt;br /&gt;&lt;br /&gt;No matter which way you cut it, this year's conference carried the baggage of explosive growth in the service connectivity space.  &lt;br /&gt;&lt;br /&gt;Throughout the echoing hall, buzzword bingo was easily played - offering winners within the first few minutes of every session. &amp;nbsp;Comments from presenters, questions from the crowd - all awash in eye-rolling splendor:&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;I fear we have not aligned our business cycles for instant omni channel messaging with our customers. &amp;nbsp;&lt;/blockquote&gt;&lt;blockquote class="tr_bq"&gt;The machine learning algorithms from our predictive analytics team are not impacting our customer interaction journey yet; we are agile but not iterating.&amp;nbsp;&lt;/blockquote&gt;&lt;blockquote class="tr_bq"&gt;We are building APIs aggressively; but, adoption is slow. &amp;nbsp;What metrics should we create to gauge developer engagement and how can we make sure we are web-scale when growth finally hockey sticks?&amp;nbsp;&lt;/blockquote&gt;In sum, for a second year in a row, the conference material was either technically vacuous, too abstract/diluted or missing real substantive context altogether; leading one to ask, "Why attend again?"&lt;br /&gt;&lt;br /&gt;Simple - to read between the lines and participate in side conversations that would ultimately reinforce many of the conclusions I had come to over the last year; APIs are now a proxy for:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Developer &amp;amp; IT projects finding diverse business sponsorship.&lt;/li&gt;&lt;li&gt;Techniques for architectural and application evolution in a highly coupled enterprise.&lt;/li&gt;&lt;li&gt;Generating revenue from analytics and derivative data products.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;&lt;b&gt;Business Sponsorship&lt;/b&gt;&lt;/h4&gt;One of the more interesting messages I took away, was this new "Business of APIs". &amp;nbsp;IT departments outwardly communicating about leveraging marketing and advertising dollars to get the systems, and more importantly the personnel, to keep running. &amp;nbsp;The subtle change will likely be good for the enterprise IT and Developer communities as we begin to shift from an operational orientation to one more aligned with the revenue streams of our businesses. &lt;br /&gt;&lt;br /&gt;Of the few architects I spoke with, they were pleasantly surprised to be actively engaged by other business units looking to have problems solved for them that were outside the more traditional roles that developers and operations have played in the enterprise.&lt;br /&gt;&lt;br /&gt;New sources of revenue, the diversity of projects, and head count growth should have a compounding effect on the departments positioned to utilize these added resources. &amp;nbsp;I would wager that we will see the impact on the enterprise though the penetration of agile (the little 'a' kind), the decomposition of architectures toward smaller functional units, and an increased interest in internal Open Source initiatives.&lt;br /&gt;&lt;br /&gt;For the breadth of discussion about Agile, Scrum &amp;amp; Kanban on the interwebs, one would assume that this stuff had knocked down the doors of every enterprise far and wide. &amp;nbsp;Unfortunately, while revolutions may have occurred, a deep understanding woven into the fabric of organizations, is seemingly absent. &amp;nbsp;Self awareness and acknowledgement that adoption of these principals correlates to survival, will be the key to staying afloat under the added responsibilities of today's demanding business cycles. &lt;br /&gt;&lt;br /&gt;I will admit that my notes above are a pretty 'safe' prediction about the future, as there is so much momentum in our industry headed in this direction, the conclusions are nearly foregone. &amp;nbsp;However, I would like to point out that I distinctly did NOT mention the ubiquity of "the Cloud". &amp;nbsp;This was quite intentional as I discovered some interesting nuances at the conference on this hot topic. &lt;br /&gt;&lt;br /&gt;One organizational representative indicated that they had gone through a very complex cycle that merits some discussion. &amp;nbsp;They had begun by developing in-house analytics teams and supporting IT teams that quickly out grew their hardware. &amp;nbsp;Processing requirements soon made "the Cloud" the only reasonable solution ... until, "the cloud" became too expensive and unwieldy. &lt;br /&gt;&lt;br /&gt;Now I have absolutely 0 hard evidence to support the side conversation, and would be curious to really understand the underlying business motivations; but, I can certainly see a kernel of truth in the complexity of running a medium to large organization in the cloud. &amp;nbsp;I would assume that the folks over at NetFlix have wondered why the hell they rely on AWS, questioning the amount of architecture and infrastructure they have to put in place just to continue to exist within that ecosystem. &lt;br /&gt;&lt;h4&gt;&lt;b&gt;Architecture&lt;/b&gt;&lt;/h4&gt;A number of times, conference attendees were flashed architectural slides revealing massive data crunching analytics systems. &amp;nbsp;These images, left predominantly un-discussed, hinted that big business was already out of the sandbox and executing, at least for round one. &lt;br /&gt;&lt;br /&gt;Brandished lambda architectures for BigData crunching were wrapped in a fabric of micro-services providing data ingestion, dissemination and instrumentation &amp;amp; telemetry. &amp;nbsp;Client application developers, standing up highly targeted and lightweight products, can simply pick and choose the data they need off the service layer. &amp;nbsp;When new requirements arise, only small, discrete changes are required, though the entire ecosystem may be impacted with these cross cutting changes.&lt;br /&gt;&lt;br /&gt;These systemic changes were largely glossed over with phrases like "agile iteration", when questions of maintenance or feature adds arose. &amp;nbsp;The old SOA concerns of high systemic coupling were dismissed as passable and even encouraged under the best patterns and practices in the new horizon of APIs.&lt;br /&gt;&lt;br /&gt;Developer engagement was scrutinized as not only an external consideration but equally important for internal customers. &amp;nbsp;The theory was touted that if internal APIs are built with the rigidity and thoughtfulness of their external cousins, internal adoption would be rampant.&lt;br /&gt;&lt;br /&gt;I have trended toward iterative and compact development cycles where the team serves the final goal of a robust interface; but, the effort in defining those outright and upfront, I feel is cause for concern. &amp;nbsp;That said, I am wrestling with this stance as many conference goers that I spoke with suggested success with a more waterfall approach to API specification. &amp;nbsp;Could this just be habit?&lt;br /&gt;&lt;br /&gt;It appeared, for the most part, that those presenting technical sessions had been re-working their architectures from the client applications back toward the core of the enterprise. &amp;nbsp;The approach is appealing; layer abstractions on the next tier down to get the projection you require and then when you are ready, refactor that inner layer.&lt;br /&gt;&lt;br /&gt;Also interesting were slides telling a story of standing these abstractions up with either Node or a scripting layer. &amp;nbsp;I have to presume this indicates the architectural changes are being driven primarily by front-end engineers and development speed requirements. &lt;br /&gt;&lt;br /&gt;As an aside, I think the jury is still out over the efficacy of this approach. &amp;nbsp;I assume that as the count of projections (bounded contexts) of these micro-services increases, the desire to have them rooted in static, precompiled languages will also increase. &amp;nbsp;I don't think the approach has been around long enough to truly vet the maintainability of, perhaps a Node based, data access layer.&lt;br /&gt;&lt;br /&gt;All in all, the architectural message was one of increasing decentralization, incremental improvement, speed of execution and developer inclusion. &lt;br /&gt;&lt;h4&gt;Analytics&lt;/h4&gt;To the conference's credit this year, there was a new "Big Data" track, though still lacking in technical content, it had big personalities and even bigger opinions. &amp;nbsp;The truth of the content lay bare on the floor, session after session. &amp;nbsp;The world is in a transition to being run by predictive analytics; sit down, shut up and hold on for dear life.&lt;br /&gt;&lt;br /&gt;The science behind predictive analytics is nothing new. &amp;nbsp;The maths, the science, the people doing it - all been around for decades. &amp;nbsp;What is changing is the speed at which the segment is expanding into every corner of business, and every corner of our lives. &amp;nbsp;The stories are are as diverse as targeted advertising, to cost cutting metrics, to human resource churn, to water saving efforts. &amp;nbsp;The common underpinnings - massive costs to be saved, massive revenues to be made.&lt;br /&gt;&lt;br /&gt;Perhaps the most intriguing concept that I was whiteness to, was to see the same approach of decomposition of architectures, in the domain of analytics. &amp;nbsp;The era of running big analytics and creating aggregate reports representing every facet of a business or business segment is apparently coming to a close.&lt;br /&gt;&lt;br /&gt;The latest fashion is to distill highly tailored analytic projections, delivering them via lightweight client apps. &lt;br /&gt;&lt;br /&gt;To give a concrete example - image all the analytics that go into providing data for an enterprise marketing team. &amp;nbsp;Consumer metrics, store metrics, brand metrics, campaign metrics, and on and on. &amp;nbsp;Each of these metric families would be represented in their own application that provides detailed context for understanding just that specific, group of metrics. &lt;br /&gt;&lt;br /&gt;I am personally skeptical about what it means to not have a complete context framed for a more thoughtful analysis; but I suppose there is nothing preventing the development of that context through simple composition.&lt;br /&gt;&lt;br /&gt;The logical follow on from compositional analytics and a flexible API architecture to serve them, is the development of derivative data products. &amp;nbsp;Suppose your consumer data or sales data was sufficiently anonymous. &amp;nbsp;Suppose your API for that data was well hardened. &amp;nbsp;Suppose you leveraged a third part platform (*cough* Apigee *cough*) to monetize that API and the data behind it. &amp;nbsp;See where I am going here? &lt;br /&gt;&lt;br /&gt;It is not outrageous to think that you could create new revenue streams off existing enterprise data by leveraging a partnership with a company like Apigee. &amp;nbsp;In fact you could use those revenue streams to fund new projects, that expose new data, that create new revenue streams, that fund new projects ...&lt;br /&gt;&lt;br /&gt;The not so subtle reality is that there is now a global market for Big Data. &amp;nbsp;There is also a global market for Derivative Data Products. If the cost barrier to integrating someone else's data is sufficiently low, you can simply use their predictive analytics to reinforce your analytics, potentially enhancing your market edge.&lt;br /&gt;&lt;br /&gt;A keen market insight, provided by Michael Svilar of Accenture, plays right to this point. &amp;nbsp;A fading comment, which he lofted across the audience as his session wound to a close, was that the strongest market play for predictive analytics would be the resource industry. &lt;br /&gt;&lt;br /&gt;Wood, water, minerals, energy, etc., comprises such a staggering percentage of global trade, that his analysis seems plainly obvious in hindsight. &amp;nbsp;Not only do you have predictive analytics on the conservation and utilization angle, but additionally on the exploration and acquisition/processing as well. &amp;nbsp;The story is to both use and sell your data and eagerly buy other perspectives.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;Overall, a quite message (a sense of urgency) was palpable for the duration of the conference; all a reflection, I believe, of the momentum building beyond the walls of the hall. &lt;br /&gt;&lt;br /&gt;APIs, Microservices, SOA, EDA, a la carte Analytics - my takeaway is that the sea of change is coming for the enterprise and I am now pushing for a re-architecting, in anticipation. &amp;nbsp;While I am not taking a highly aggressive stance, I am certainly beginning to look around at the systems and services that we are working with now to pick the first few elements to strategize on. &amp;nbsp;One must remember though that big ships are hard to turn and you really want the architecture and the team supporting it to find the patterns and practices that work for them.&lt;br /&gt;&lt;br /&gt;All and all, assuming I am in a position to do so, I will attend again next year. &amp;nbsp;The business insights were worth the price of admission, and the access to key players in this space is unparalleled.&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/4033402916483068269/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/09/iloveapis-2014.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4033402916483068269'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4033402916483068269'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/09/iloveapis-2014.html' title='Wrapping it up: ILoveAPIs 2014'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-2843618526113289292</id><published>2014-08-04T22:28:00.002-07:00</published><updated>2014-08-04T22:28:19.793-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>August 2014 Thought Work</title><content type='html'>Since I have been digging theory pretty hard lately I thought I would drop a quick blog post with some of the research, lectures and such that I have been working through. &amp;nbsp;I highly suggest perusing this stuff ...&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.youtube.com/playlist?list=PLGCr8P_YncjXRzdGq2SjKv5F2J8HUFeqN"&gt;Type Theory Foundations&lt;/a&gt;&lt;br /&gt;&lt;a href="http://www.youtube.com/playlist?list=PLGCr8P_YncjVjwAxrifKgcQYtbZ3zuPlb"&gt;Category Theory Foundations&lt;/a&gt;&lt;br /&gt;&lt;a href="https://www.youtube.com/playlist?list=PLGCr8P_YncjVeZTcfHT1Cb1OfVnNahek5"&gt;Monad and All That&lt;/a&gt;&lt;br /&gt;all of which can be found on this&amp;nbsp;&lt;a href="http://www.cs.uoregon.edu/research/summerschool/summer11/curriculum.html"&gt;University of Oregon&lt;/a&gt; site.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://luketopia.net/2013/07/28/fsharp-symbolic-math/"&gt;F# Symbolic Math&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;If course the &lt;a href="http://7sharpnine.com/categories/oldstuff/"&gt;dark corners&lt;/a&gt; of Dave Thomas' blog is a wonderful place to get lost.&lt;br /&gt;&lt;br /&gt;Wanna joint the type system debate? &amp;nbsp;&lt;a href="http://cdsmith.wordpress.com/2011/01/09/an-old-article-i-wrote/"&gt;Start Here&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Some &lt;a href="http://www.math.mcgill.ca/barr/papers/#chronoindex"&gt;papers&lt;/a&gt; on topics I am not smart enough to understand, but are good vocabulary builders.&lt;br /&gt;&lt;br /&gt;More F# &lt;a href="http://tomasp.net/blog/2014/update-monads/index.html"&gt;Monad Madness&lt;/a&gt; from Tomas Petricek&lt;br /&gt;&lt;br /&gt;Happy Surfing!</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/2843618526113289292/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/08/august-2014-thought-work.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2843618526113289292'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2843618526113289292'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/08/august-2014-thought-work.html' title='August 2014 Thought Work'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-4635218565630516845</id><published>2014-08-03T15:51:00.002-07:00</published><updated>2014-08-03T17:21:51.286-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Domain Specific Language'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Option Types'/><category scheme='http://www.blogger.com/atom/ns#' term='C#'/><category scheme='http://www.blogger.com/atom/ns#' term='Extension Methods'/><category scheme='http://www.blogger.com/atom/ns#' term='DSL'/><title type='text'>An Elementary Internal Domain Specific Language (DSL) Using C# Extension Methods</title><content type='html'>A few weeks ago I had the opportunity to execute a small business rules engine for a client feature request that was done as an internal Domain Specific Language (DSL). &amp;nbsp;The novel aspect of the project for me was not the harnessing of extension methods; that, while not elementary, was trivial compared to the application of functional design/programing, specifically compositional concepts. &amp;nbsp;The resulting product was a terse, highly readable module that demonstrated the ability to fold functional approaches into an object oriented language and architecture. &amp;nbsp;Most importantly however, this project marked my first real "Ah Ha" moment with functional programing &amp;amp; design approaches.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;From the applications perspective the interface into the rules engine was simple ... hand over the rules, hand over the things to run through the rules and then get back one or more applicable rules as the result. &amp;nbsp;Each rule consisted of several operations that needed to be validated to see if the rule applied. &amp;nbsp;For instance: start date, end date, minimum and maximum count, object selector. &amp;nbsp;By all accounts, a clearer case for an internal DSL could not be found.&lt;br /&gt;&lt;br /&gt;The first question I asked myself was what do I want this DSL to look like? &amp;nbsp;Since, C# provides extension methods, which can be an enabler of building fluent internal DSLs, they seemed like a likely candidate; a few rounds of pseudo-coding later, I had something like this:&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style="background: #ffffff; border-width: .1em .1em .1em .8em; border: solid gray; overflow: auto; padding: .2em .6em; width: auto;"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style="line-height: 125%; margin: 0;"&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style="line-height: 125%; margin: 0;"&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;foreach&lt;/span&gt;(&lt;span style="color: #333399; font-weight: bold;"&gt;var&lt;/span&gt; rule &lt;span style="color: #008800; font-weight: bold;"&gt;in&lt;/span&gt; rules){&lt;br /&gt;    &lt;span style="color: #008800; font-weight: bold;"&gt;foreach&lt;/span&gt;(&lt;span style="color: #333399; font-weight: bold;"&gt;var&lt;/span&gt; obj &lt;span style="color: #008800; font-weight: bold;"&gt;in&lt;/span&gt; objects){&lt;br /&gt;        &lt;span style="color: #008800; font-weight: bold;"&gt;return&lt;/span&gt; rule.HasTargetId(obj.id)&lt;br /&gt;            .AfterStartDate(obj.date)&lt;br /&gt;            .BeforeEndDate(obj.date)&lt;br /&gt;            .LessThanMax(obj.count)&lt;br /&gt;            .GreaterThanMin(obj.count) != &lt;span style="color: #008800; font-weight: bold;"&gt;null&lt;/span&gt;&lt;br /&gt;            ? rule&lt;br /&gt;            : &lt;span style="color: #008800; font-weight: bold;"&gt;null&lt;/span&gt;;&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;Readable, terse and easily extended notion - UNLOCKED.&lt;br /&gt;&lt;br /&gt;With pseudo-code in hand, I began to work on the component architecture. &amp;nbsp;Since one of the core tenants of FP is to segregate data and behavior, I framed out a few classes: the rules engine, a static class to house all the rule operations, and a few data type classes to model rules and the objects to pass through the rules.&lt;br /&gt;&lt;br /&gt;The design of the rules engine class is very simple with only one constructor and one method. &amp;nbsp;The constructor takes in a set of rules as a dependency, building a readonly enumerable to hold the rules. &amp;nbsp;The single method, takes in a set of objects, pushes those into the local projection, and runs the rules returning a list of matched rule. &lt;br /&gt;&lt;br /&gt;The extension methods, housed in the static class, encapsulate the behavior on our data, and are equally as simple and the rules engine. &amp;nbsp;Let's take a look at one of them:&lt;br /&gt;&lt;div&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style="background: #ffffff; border-width: .1em .1em .1em .8em; border: solid gray; overflow: auto; padding: .2em .6em; width: auto;"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style="line-height: 125%; margin: 0;"&gt;1&lt;br /&gt;2&lt;br /&gt;3&lt;br /&gt;4&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style="line-height: 125%; margin: 0;"&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;public&lt;/span&gt; &lt;span style="color: #008800; font-weight: bold;"&gt;static&lt;/span&gt; Rule &lt;span style="color: #0066bb; font-weight: bold;"&gt;LessThanMax&lt;/span&gt;(&lt;span style="color: #008800; font-weight: bold;"&gt;this&lt;/span&gt; Rule rule, &lt;span style="color: #333399; font-weight: bold;"&gt;int&lt;/span&gt; objectCount){&lt;br /&gt;    &lt;span style="color: #008800; font-weight: bold;"&gt;if&lt;/span&gt;(policy == &lt;span style="color: #008800; font-weight: bold;"&gt;null&lt;/span&gt;) &lt;span style="color: #008800; font-weight: bold;"&gt;return&lt;/span&gt; &lt;span style="color: #008800; font-weight: bold;"&gt;null&lt;/span&gt;;&lt;br /&gt;    &lt;span style="color: #008800; font-weight: bold;"&gt;return&lt;/span&gt; objectCount &amp;lt; rule.MaxCount ? rule : &lt;span style="color: #008800; font-weight: bold;"&gt;null&lt;/span&gt;;&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;The basic premise here is, if we pass in a null rule then the extension method simply returns null to the next method in the chain. &amp;nbsp;If the rule is not null then we check the rule and object arguments, either passing the rule or null along to the next method. &lt;br /&gt;&lt;br /&gt;While all these nulls floating around is not very pretty, it does get the job done; given that though, it may be preferable to create default instances of your rule(s) with sane values and pass that through in place of the nulls.&lt;br /&gt;&lt;br /&gt;And that's it ... a simple internal DSL that leverages extension methods, composition, segregation of data and behavior to facilitate an easy to reason about rules engine. &amp;nbsp;Most importantly ... no nasty nested "if" statements!&lt;br /&gt;&lt;br /&gt;For further study, I would highly suggest watching &lt;a href="https://twitter.com/ScottWlaschin"&gt;Scott Wlaschin&lt;/a&gt;'s &lt;a href="http://vimeo.com/97344498"&gt;Railway Oriented Programming&lt;/a&gt; talk to get some ideas about how you could weave in error handling; or checkout &lt;a href="https://twitter.com/tomaspetricek"&gt;Tomas Petricek&lt;/a&gt; &amp;amp; &lt;a href="https://twitter.com/jonskeet"&gt;Jon Skeet&lt;/a&gt;'s &lt;a href="http://www.manning.com/petricek/"&gt;Real World Functional Programming&lt;/a&gt; book ... in chapter 5 they cover an implementation of Option Types in C# which would dramatically enhance the naive implementation above.&lt;br /&gt;&lt;br /&gt;As always, I would appreciate comments, corrections or feedback!&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/4635218565630516845/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/08/an-elementary-internal-dsl-through-csharp.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4635218565630516845'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4635218565630516845'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/08/an-elementary-internal-dsl-through-csharp.html' title='An Elementary Internal Domain Specific Language (DSL) Using C# Extension Methods'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-4161369035704331615</id><published>2014-07-12T17:02:00.001-07:00</published><updated>2014-07-13T13:30:35.092-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Craftsmanship'/><category scheme='http://www.blogger.com/atom/ns#' term='Mentoring'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Development'/><category scheme='http://www.blogger.com/atom/ns#' term='software'/><title type='text'>Craftsmanship and the Role of Mentoring</title><content type='html'>Dear Diary,&lt;br /&gt;&lt;br /&gt;I had a really rough ride this morning. &amp;nbsp;The climb was beautiful and I had some killer ideas as the pedals spun in time with the AD/DC thumping in my headphones. &amp;nbsp;The descent was epic. &amp;nbsp;The flow, balance and focus was unwavering. Unfortunately, on my way home things shifted and my mind began to clutter. &amp;nbsp;I passed under the 241, caught a rut and went down like a sack of potatoes. &amp;nbsp;As I lay there assessing myself for injuries ... bleeding abrasion on the knee, cut on the arm, covered in dust, mangled handlebars and a bruised ego as the skater kids smoking pot under the bridge re-enacted my demise ... I had an epiphany.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;I will eagerly admit that software is thought work. &amp;nbsp;We developers spend our days solving problems, pushing glyphs from our minds through our fingers and onto compilers. &amp;nbsp;In some ways the work is decidedly different from our counterparts in the trades. &amp;nbsp;But in other ways, are we really that far removed from the carpenter, or plumber, or welder, or mason?&lt;br /&gt;&lt;br /&gt;For me, the strongest union between the classical trades and software development is the notion of craftsmanship. &amp;nbsp;In all cases, there is a final work product that reflects design choices, and quality of execution. &amp;nbsp;Earlier today I tweeted a vary common phrase that most all, in the trades, know dearly ...&lt;br /&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;It's the poor craftsman that blames the tool.&lt;br /&gt;— William Berry (@williamberryiii) &lt;a href="https://twitter.com/williamberryiii/statuses/487998627978416128"&gt;July 12, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;script async="" charset="utf-8" src="//platform.twitter.com/widgets.js"&gt;&lt;/script&gt; Having been in both the trades and software, it seems to me that developers spend an awful lot of time griping about their tools, from text editors to IDEs to automation, etc. &amp;nbsp;And to alleviate any further skepticism, I will fully admit to having blamed plenty of tools, even the ones I have built, for their poor quality. &amp;nbsp;That said ... I still whole heartily believe in the the phrase above. &lt;br /&gt;&lt;br /&gt;Because this is the age of the internet, and on the internet you can always find someone who says you are wrong ... I took to Google to find some dissenting opinions. &amp;nbsp;Take this wonderful shot at inverting the colloquial phrase:&lt;br /&gt;&lt;br /&gt;&lt;a href="http://It's (Not) a Poor Craftsman Who Blames His Tools"&gt;It's (Not) a Poor Craftsman Who Blames His Tools&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;The article and quite a few comments, attempt to claim that an expensive table saw will produce better results than a cheap one; and to the apprentice or journeyman, that sentiment is absolutely true. &amp;nbsp;The problem, is that the core assumption is false and it willingly neglects to consider all the pieces in motion.&lt;br /&gt;&lt;br /&gt;Every project, from your kitchen cabinets to your bug tracking software, comes down to the interplay of finished quality, time and materials (inclusive of money). &amp;nbsp;If the client is interested in a finer product, that will require either more time or better materials and possibly both. &amp;nbsp;True craftsman have mastered the interplay of these elements within their given trade. &amp;nbsp;Let's look at an example ...&lt;br /&gt;&lt;br /&gt;I have been bugging my wife about getting a custom cabinet built for this nook under the stairs that we have. &amp;nbsp;I really want a book shelf and sun bench with storage, for that area (dog toys, legos, books, etc.). &amp;nbsp;Now bear in mind that both my wife and I are finish carpenters. &amp;nbsp;We have spent extensive time making everything from crappy single sided theatrical cabinetry to finely crafted hand hewn furniture. &amp;nbsp;We are both equally skilled in joinery; yet, we are looking to hire someone to do this work. Why?&lt;br /&gt;&lt;br /&gt;Well for starters, we do not have the appropriate tooling ... no Delta Cabinet saw, no stacked dado head cutting tools, no pneumatics. &amp;nbsp;Hell, we don't even have any glue. &amp;nbsp;So, we are effectively missing all the tools of our trade to complete the job.&lt;br /&gt;&lt;br /&gt;But is that really true?&lt;br /&gt;&lt;br /&gt;I have some screws, and nails, and a Japanese pull saw. &amp;nbsp;I could still buy the best wood and save the expense of proper tooling by crafting jigs and fences and a whole host of small devices that would enable me, as the master of my craft, to utilize the tools I currently have to complete the job to any level of satisfaction. &amp;nbsp;The question is, am I willing to spend the time and money to build the devices that make the incorrect tools function properly within this context.&lt;br /&gt;&lt;br /&gt;Well save the suspense, the answer is no. &amp;nbsp;I would much rather hire someone that has purchased the proper tooling to do this job quickly. &amp;nbsp;I get a high quality product, with choice materials, in less time. &amp;nbsp; I have made the decision that my time is more expensive than the cost of materials and someone else's time, for the level of quality I desire. &lt;br /&gt;&lt;br /&gt;All this said, I am not the craftsman here ... the cabinetmaker I hired is. &amp;nbsp;I have brought them in to asses the project. &amp;nbsp;I have given requirements such as materials, a delivery date and an anticipated budget. &amp;nbsp;The cabinetmaker will then decide, given my requirements and their assessment of tooling, whether or not the work can be completed within my constraints.&lt;br /&gt;&lt;br /&gt;One might clammer quickly to mention that the skills of the cabinetmaker are also at play here, and I would agree only to say that skill is a function of time. &amp;nbsp;The cabinetmaker may recognize that my request for butterfly joints in the bench top is not a technique they have used before, nor are they properly tooled to craft such a fancy bit of joinery. &amp;nbsp;That factor, time to learn how to do the joint and the tooling to cut it properly, may end up in the quote from the cabinetmaker ... but it also might not. &lt;br /&gt;&lt;br /&gt;The craftsman, will see my request for this new joint as an opportunity to learn a new skill, build the proper tooling such that they can offer this capability to other clients. &amp;nbsp;They may also recognize that it is not necessarily my responsibility to pay them to learn how to craft this fancy bit of joinery. &lt;br /&gt;&lt;br /&gt;If the craftsman would like to have me cover the cost of adding butterfly joint capacity to their shop by supporting training and in the construction of associated tooling, they should inform me of that; and I, as the client, have the option to accept the added cost or find another cabinetmaker. &lt;br /&gt;&lt;br /&gt;Perhaps, I recognize that investing now in bolstering the craftsman's tooling and skills could save me significant money later, when I have them build my kitchen table; but I won't know that, if they don't inform me of it. &lt;br /&gt;&lt;br /&gt;So where is this cabinet making post going? &lt;br /&gt;&lt;br /&gt;The situation presented here is not unlike the day to day interaction between a developer and a business. &amp;nbsp;The developer is presented with requirements and it is their job to asses the situation and inform the business of the pieces in play. &amp;nbsp;Experience and skill both play a factor in the quality of this assessment. &amp;nbsp;Note that experience and skill are both a function of time. &lt;br /&gt;&lt;br /&gt;A good craftsman, communicates effectively with the business to help them balance time, materials and quality. &amp;nbsp;The craftsman will also recognize that the acquisition of new skills or tooling may or may not be the responsibility of the business, depending on who is getting the most value out of the training. &amp;nbsp;If the acquisition of new skills or tooling is ultimately of greater benefit to the craftsman, then it is their responsibility to spend personal time and materials to acquire the skills. &amp;nbsp;Let me repeat that ....&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;If the acquisition of new skills or tooling is ultimately of greater benefit to the craftsman, then it is their responsibility to spend personal time and materials to acquire the skills.&amp;nbsp;&lt;/blockquote&gt;This assertion comes down more on the side of experience than that of skill; but, in terms of business value, it is still a function of time. &amp;nbsp;My assertion here is that the distinction between "poor" vs, let's say, "good" craftsmanship is in the expenditure of time; let's take a look at a specific example:&lt;br /&gt;&lt;br /&gt;If you were alive in the 90's, I would suspect that you remember The New Yankee Workshop with Norm Abram (we may have had different childhoods). &amp;nbsp;If you don't, or its been a while since you last saw it ... I highly recommend at least checking out the following episode which is broken into two parts.&lt;br /&gt;&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=7Lc6ItDd7Q0"&gt;New Yankee Workshop - Building Jigs Part I&lt;/a&gt;&lt;br /&gt;&lt;a href="https://www.youtube.com/watch?v=_HGwODXgLBo"&gt;New Yankee Workshop - Building Jigs Part II&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;In this episode, Norm spends an hour of broadcast time, several days of filming, building jigs for various projects. &amp;nbsp;Construction of even the simplest of these can take over an hour to manufacture, and some of the more complex ones, perhaps even a full day. &amp;nbsp;So why is Norm, unquestionably a master craftsman, spending all day to make a jig that he will use for a single 30 second cut? I posit that the poor craftsman blames the tool because they have failed to recognize the extent and importance of their personal role, i.e. their time, in tooling up properly for a job. &amp;nbsp;That also implies that poor does not mean bad, but simply inexperienced.&lt;br /&gt;&lt;br /&gt;Perhaps our affinity in software to blame our tools, is simply because we are missing something that the trades, and even medicine, have long known?&lt;br /&gt;&lt;br /&gt;Question: What do physicians call their businesses?&lt;br /&gt;&lt;br /&gt;Answer: A Practice.&lt;br /&gt;&lt;br /&gt;Why? &lt;br /&gt;&lt;br /&gt;Why would you call, what you do for a living ... a "Practice"? Well, it's because that is exactly what they are doing ... practicing medicine. &amp;nbsp;It's an ownership of the novice state. &amp;nbsp;An understanding that mastery has not yet, and may never, be completely achieved. &lt;br /&gt;&lt;br /&gt;So let's take a look at the carer path of a physician. &lt;br /&gt;&lt;br /&gt;Know what physicians do right after receiving their graduate degrees? &amp;nbsp;They intern. Why? &amp;nbsp;Because they may have the knowledge, but not the skills to practice medicine.&lt;br /&gt;&lt;br /&gt;Know what physicians do after they intern? &amp;nbsp;A residency, where they spend several years beginning to practice medicine under the watchful eye of an even more skilled physician. &lt;br /&gt;&lt;br /&gt;Know how long this process takes? Example: Neurological Surgery ... 6 YEARS. &lt;br /&gt;&lt;br /&gt;This tiered level of graduation in medicine was taken directly from the trades, where in a guild one apprentices, then achieves journeyman, and then is finally granted the title of master of craft.&lt;br /&gt;&lt;br /&gt;In software, we happily support novice programmers who write code for critical infrastructure, payment systems, etc. without a second thought. &amp;nbsp;As software eats the world ... does this make you feel warm and fuzzy inside?&lt;br /&gt;&lt;br /&gt;Our industry is new ... carpenters and masons have been at this for thousands of years and we, as members of the software industry, need to learn from their experience. &amp;nbsp;Hell, even modern medicine has done so, to quite significant success. &lt;br /&gt;&lt;br /&gt;Software business need to understand that their developers may not be craftsman ... i.e. have the skills or experience to inform management that they are actually ill equipped to perform their jobs. &amp;nbsp;They may posses the knowledge to complete the task, but not the skills to properly build the software. &amp;nbsp;While throwing the bird from the nest may be the only way they will learn to fly; surprise, writing software is not a natural human instinct. &lt;br /&gt;&lt;br /&gt;Extreme Programming, with its concept of pair programming has been a small step in the right direction. &amp;nbsp;Sit two, close but unequally matched developers down to complete a task together. &amp;nbsp;The interaction benefits both parties as they learn and bolster their skill sets; the delivered product is typically much better off ... this is a form of mentoring. &lt;br /&gt;&lt;br /&gt;Mentoring does not need to be 100% of the time; I am pretty sure that Aristotle spent some time by himself thinking without the help of Plato. &amp;nbsp;Nonetheless, business that invest in the infrastructure to support pairing are, by de facto, building and supporting mentoring programs. &lt;br /&gt;&lt;br /&gt;In this time of plenty, when developers can do what they want and for who they want, we need to focus on upping our game. &amp;nbsp;We need to create the infrastructure that will make software a sustainable, diverse and supportive industry. &lt;br /&gt;&lt;br /&gt;We need to introspect and asses our own level of skill ... are we craftsman? If so, what role are we playing in building up and mentoring the junior developers. &lt;br /&gt;&lt;br /&gt;Are our businesses invested in education, and tooling? &amp;nbsp;If not, is it our responsibility as craftsman to seek out further education and build needed tooling on our own accord; taking that knowledge and those tools to the junior developers, so that all within the craft may benefit?&lt;br /&gt;&lt;br /&gt;Can we endeavor to give the inexperienced developers in our industry, no reason to blame their tools?&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/4161369035704331615/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/07/craftsmanship-and-role-of-mentoring.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4161369035704331615'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4161369035704331615'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/07/craftsmanship-and-role-of-mentoring.html' title='Craftsmanship and the Role of Mentoring'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-6179887119392316993</id><published>2014-07-03T23:18:00.001-07:00</published><updated>2014-07-03T23:23:49.515-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Organizational Communication'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Thoughts on Organizational Communication</title><content type='html'>Thoughts on organizational communication ...&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Information and data flow within an organization, is as complex as the people that comprise it. &amp;nbsp;Though the quality of a company's internal communications will be skewed toward the weaker side of it's mean, the able to communicate is ultimately a skill that can be both practiced and improved. &amp;nbsp;&lt;/li&gt;&lt;li&gt;The core of effective communication within an organization is keyed off three attributes: Quality, Richness and Authenticity. &amp;nbsp;Engagement on these points can be nurtured throughout the company and developed in situations as diverse a the team stand standups to interdepartmental memos.&lt;/li&gt;&lt;li&gt;With quality, we are looking for not only great copy but also thoughtfulness, clarity and consistency of messaging. &amp;nbsp;&lt;/li&gt;&lt;li&gt;With richness we are looking to strike a balance between the presentation of abstract concepts and deeply technical details without underestimating the organizations emotional or intellectual capacity.&amp;nbsp;&lt;/li&gt;&lt;li&gt;The importance of authenticity cannot be understated. &amp;nbsp;If you don't believe your messaging, your coworkers certainly will not either.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Another important principal regarding organizational communication is that summarization creates a level of abstraction over the details that is raised with every step up in the org chart. &amp;nbsp;While this principal is perhaps not unsurprising to anyone who has participated within several tiers of business, what should be of interest is how that knowledge can be disseminated or radiated back own throughout the organizational hierarchy.&amp;nbsp;&lt;/li&gt;&lt;li&gt;To understand why the radiating of information back down through the org chart is so critical ... ask yourself where the vast majority of business decisions within a company are made? If you think it's the C-Suite ... you are sorely mistaken.&lt;/li&gt;&lt;li&gt;Every day, at businesses across the globe, seemingly inconsequential decisions are made that incrementally move the business in "some" direction. &amp;nbsp;If an authentic, rich and high quality message with direction and intent has been delivered from the the top of the org chart all the way down to the "worker-bees", then each one of the inconsequential decisions will do its small part to move the businesses towards its goals.&lt;/li&gt;&lt;li&gt;There is not such thing as "trickle down" information. &amp;nbsp;The communication down through the organizational chart needs to be purposeful.&lt;/li&gt;&lt;li&gt;Take inspiration from the brightest:&amp;nbsp;&lt;a href="http://www.fastcompany.com/3021208/fast-feed/how-jack-dorsey-makes-meetings-at-square-transparent"&gt;How Jack Dorsey Makes Meetings&amp;nbsp;at Square More Transparent&lt;/a&gt;&amp;nbsp;&lt;/li&gt;&lt;li&gt;Leaders communicate with their organizations at the same level they expect it to operate at ...&lt;/li&gt;&lt;li&gt;If the organization is not moving in the direction you wish, take time to reflect on how you are communicating your goals with the team. &amp;nbsp;Are you developing a sense of urgency in the change &amp;nbsp;and new direction? &amp;nbsp;Are you helping inspire ownership in the effort? Are you being authentic with your messaging?&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div&gt;*P.S. This is the start of a larger article; but, for now, I am just getting my points out there for comment.&amp;nbsp;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/6179887119392316993/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/07/organizational-communication.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6179887119392316993'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6179887119392316993'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/07/organizational-communication.html' title='Thoughts on Organizational Communication'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-9178844970113218702</id><published>2014-06-29T00:02:00.002-07:00</published><updated>2014-06-29T21:49:36.883-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Development'/><category scheme='http://www.blogger.com/atom/ns#' term='Technical Debt'/><title type='text'>Technical Debt &amp; the Lazy Developer</title><content type='html'>I have been reflecting over the last few days, what it means to be a "lazy" developer, inclusive of both positive and negative connotations.&lt;br /&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;I yearn for the day when developer laziness is not the root cause of &lt;a href="https://twitter.com/hashtag/TechnicalDebt?src=hash"&gt;#TechnicalDebt&lt;/a&gt;.&lt;br /&gt;— William Berry (@williamberryiii) &lt;a href="https://twitter.com/williamberryiii/statuses/482377144048578560"&gt;June 27, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;script async="" charset="utf-8" src="//platform.twitter.com/widgets.js"&gt;&lt;/script&gt;Yup, that was me, and what I see is manifest in two distinct ways:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Lazy Loading&lt;/li&gt;&lt;li&gt;Misaligned priorities, unwillingness to contribute and apathy&lt;/li&gt;&lt;/ol&gt;&lt;div style="text-align: left;"&gt;Each or these points is directly resulting in the accumulation of technical debt. &amp;nbsp;These thoughts are by no means localized to software development, the industry just happens to be an easy vehicle of context.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;From my vantage point, lazy loading is that delightful form of efficient procrastination where I don't actually do something until it's needed. &amp;nbsp;I don't add interfaces until the testing requires it. &amp;nbsp;I don't leverage encapsulation until I am passing around List&amp;lt;Tuple&amp;lt;int, KeyValuePair&amp;lt;string, string&amp;gt;&amp;gt;&amp;gt;. &amp;nbsp;If the code can be simple, flat, clean and free of excess abstractions ... then I leave it that way.&lt;br /&gt;&lt;br /&gt;There is also the classic example of lazy loading ... ORMs; the perfect double edged sword. &amp;nbsp;The vast majority of the time, lazy loading works to your benefit; but, every now and again ... it totally screws you. &lt;br /&gt;&lt;br /&gt;Where I find myself most guilty of lazy development is the classic arenas: instrumentation, telemetry data collection, error handling, logging, performance optimization and documentation. &lt;br /&gt;&lt;br /&gt;The first four, instrumentation, telemetry data collection, error handling and logging, are all classic after thoughts. &amp;nbsp;Even the most well intentioned developer will persistently screw this up. &amp;nbsp;Why? Because you don't &lt;b&gt;&lt;i&gt;NEED&lt;/i&gt;&lt;/b&gt; these things to get a product up and functioning; except that maturity and experience will eventually teach you, through enough browbeating, that you do in fact &lt;b&gt;&lt;i&gt;NEED&lt;/i&gt;&lt;/b&gt; these things to get a product up and functioning.&lt;br /&gt;&lt;br /&gt;On the surface, it's clear how one can address this form of technical debt. &amp;nbsp;You "should" have logging, you "should" be collecting telemetry data, and at some point you will address the debt and add the elements, simply because you are left with no other choice. &amp;nbsp;But, your debts from implementation after fact, will not net 0. &amp;nbsp;You will be left with a very subtle issue. &amp;nbsp;That, I posit, can cause nearly as much damage to a system/product.&lt;br /&gt;&lt;br /&gt;When rings like logging and error handling are addressed after the core of the application has been solidified, they are merely stapled on features. &amp;nbsp;They may have been woven into the fabric of the system, but they have not grown and matured with the core entities. &amp;nbsp;As such, they will never feel like a natural part of the development process and there will always be friction in the usage of them. &lt;br /&gt;&lt;br /&gt;I have experienced refactoring several existing projects, as well as building a few new ones, where I swore I would not lazy-load the instrumentation ... surprise, still haven't learned (and I bet I am not the only with this issue).&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;On the flip side, by most accounts, early performance optimization is a waste of time. &amp;nbsp;Don't fix it, if it ain't broke, right? &amp;nbsp;What I don't think has been settled officially is when "early", is. &amp;nbsp;I suggest, that performance go hand in hand with instrumentation and collection of telemetry data. &amp;nbsp;By leaving performance optimization and the supporting framework for a time when you actually have the problems, you're open to the exact same issue noted above, only subtly worse. &lt;br /&gt;&lt;br /&gt;Not only will you be gluing your performance data collection to the side of your app, rather than making it integral, you have no historical data to help you key in on when things went gone wrong. &amp;nbsp;You could have had video of all the events leading up to and beyond the tragedy, instead, you are left in a room with no windows, no doors and no murder weapon. &amp;nbsp;While I will concede that early performance optimization can be a wasted effort, the establishment of a supporting architecture and integration of carefully selected tooling, is by no means a waste of time.&lt;br /&gt;&lt;br /&gt;There are two main things in flux here, with the first being tooling. &amp;nbsp;Adding instrumentation, data collection, logging, error handling and the like, is not easy; and, there are typically several non-trivial architectural decisions that must be made upfront for their inclusion to feel native, and therefore inspire usage. &amp;nbsp;Compound the complexity of tooling integrations with the maturity required to identify the situations upfront ... it's no wonder why we are lazy with the implementation of these components and why so many projects suffer from lazy loaded technical debt. &lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;Always endeavor to do the best you possibly can. Acknowledging delivery of anything less is a show of apathy.&lt;br /&gt;— William Berry (@williamberryiii)&amp;nbsp;&lt;a href="https://twitter.com/williamberryiii/statuses/482414563217113088"&gt;June 27, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;br /&gt;Most people easily envision the technical debt that is the byproduct of "common" laziness: poor design choices, deliberately evading standard approaches, partially implemented or hack solutions, etc. &amp;nbsp;These manifestations are actually pretty easy to clean up. &lt;br /&gt;&lt;br /&gt;If a piece of code is poorly factored or does not adhere to typical implementation strategies, then simply mix some refactoring with training and education, and more often than not, the problem goes away with little fanfare.&lt;br /&gt;&lt;br /&gt;Another easily identified negative manifestation of laziness is weak or missing documentation. &amp;nbsp;While its quite obvious that most all projects need documentation to capture both institutional knowledge and execution context, what is not always obvious is the emergence of technical debt outside of the software product. &lt;br /&gt;&lt;br /&gt;Poor documentation will directly impact marketing efforts and project reputation. &amp;nbsp;Unless the project is in it's infancy, this debt is not easily addressable by simple bolstering the amount/quality of the documentation. &amp;nbsp;Often, trust of the end user or implementing developer has been lost or compromised, and interest payments here can be very costly. &lt;br /&gt;&lt;br /&gt;One technique for small teams to address documentation issues up front, is to communicate through formal specifications. &amp;nbsp;Though the &lt;a href="http://agilemanifesto.org/"&gt;Agile Manifesto&lt;/a&gt;&amp;nbsp;favors working software over comprehensive documentation, what we are really trying to capture here is execution context, design decisions, encapsulation of complexity, domain modeling and the development of a ubiquitous language. &lt;br /&gt;&lt;br /&gt;By codifying in documentation the initial project activities, you are setting a platform upon which to build later. &amp;nbsp;As the project begins to mature and ramp up, leave the hard documentation behind in favor of patterns and practices that will result in automatic document generation as the project moves forward. &lt;br /&gt;&lt;br /&gt;To give a hard example, let's say we were building a internal facing API over a data store. &amp;nbsp;We would start with a simple requirements or story document that laid out the 10,000 foot overview. &amp;nbsp;The document would include some goals for performance, usage patterns, etc. &amp;nbsp;Next we would generate the core resource endpoints and entity models, thereby distilling entity properties and furthering the development of our ubiquitous language. &amp;nbsp;Once the core resources have been loosely agreed up, the team simply begins development. &lt;br /&gt;&lt;br /&gt;That said, one of the first features/stories to be implemented is a management interface that auto-documents the API's entities and resource URLs. &amp;nbsp;Using this approach we have leveraged documentation to record foundational execution context and provided a mechanism to ensure the consumer's documentation is always up to date and accurate. &amp;nbsp;Additionally, we have mitigating the technical debt thrown off by weak documentation and through automation we have ensured that the product and its documentation can grow and mature in unison. &lt;br /&gt;&lt;br /&gt;The devil however, in all this laziness, is as manifest from apathy or misaligned values. &amp;nbsp;In both cases the technical debt is accruing in not just the team's current work product, but also in everything the team touches.&lt;br /&gt;&lt;br /&gt;Of the two, apathy is significantly easier to mitigate. &amp;nbsp;Though it can spread like a virus, the "I don't give a shit" attitude, 9 times out of 10, is easily course corrected when caught early or when isolated to a single team member. &amp;nbsp;The technical debt accrual in the products, much like in the simple laziness example above, can almost alway be brought back into control, through an ernest refactoring effort. &lt;br /&gt;&lt;br /&gt;The complexity in dealing with apathy is addressing the team's underlaying issues. &amp;nbsp;Understanding the root cause of the behavioral shift is paramount. &amp;nbsp;One technique that a manager can leverage is to actually join the tumult. &amp;nbsp;Through participation, the instigator(s) and core issue(s) is often exposed. &lt;br /&gt;&lt;br /&gt;Having been both an instigator and a manager dealing with rampant apathy, I was often able to attribute it to long work hours, and poor training/tooling. &amp;nbsp;The savvy team lead will leverage the apathy to unite the team around the core issue and then behind the scenes facilitate its resolution ... building team cohesion and course correcting all in one move.&lt;br /&gt;&lt;br /&gt;The final point of contention is to address the technical debt thrown off by laziness as it is manifest through misaligned values. &amp;nbsp;Though intention and commitment may be present, there may be an unwillingness to work with the values or towards the goals of the rest of the team; the result being a single product headed in multiple directions.&lt;br /&gt;&lt;br /&gt;The laziness associated with misaligned values is not the fault of the seemingly misdirected employee, but rather with the project lead or the instigator of change. &amp;nbsp;As is well documented in &lt;a href="http://www.amazon.com/Leading-Change-With-Preface-Author/dp/1422186431/ref=sr_1_1?ie=UTF8&amp;amp;qid=1404005602&amp;amp;sr=8-1&amp;amp;keywords=leading+change+kotter"&gt;Leading Change&lt;/a&gt; by Kotter - the project lead or change initiator is at fault here, simply because they have failed to instill a sufficient sense of urgency to inspire change. &amp;nbsp;Without reason or sufficient energy, all systems will remain in stasis.&lt;br /&gt;&lt;br /&gt;If misaligned values or divergent paths is at the core of your technical debt generation, then I highly recommend reading Leading Change. &lt;br /&gt;&lt;br /&gt;The approach to addressing the technical debt from misaligned values is complex. &amp;nbsp;Not only will you be leading a change effort to adjust team alignment, but you will need to wait to drive the refactorings until after the team has unified it's values. &amp;nbsp;Any significant addressing of technical debt before alignment, will result in continued divergence, albeit with a smaller delta.&lt;br /&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;Being cognizant of laziness within your organization and/or teams is the first stepping stone. &amp;nbsp;Understanding it's various manifestations and coping with or mitigating the side effects is the trump card. &amp;nbsp;Lastly, don't forget to turn the mirror on yourself. &amp;nbsp;Are you leading change effectively, setting the guidelines and goals and innovating by example ... if not, don't try to fix your team, before you have taken the time to fix yourself.&amp;nbsp;&lt;/div&gt;&lt;br /&gt;I would appreciate comments and a conversation either here on twitter where you can reach me&amp;nbsp;&lt;a href="https://twitter.com/williamberryiii"&gt;@WilliamBerryiii&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/9178844970113218702/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/06/technical-debt-lazy-developer.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/9178844970113218702'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/9178844970113218702'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/06/technical-debt-lazy-developer.html' title='Technical Debt &amp; the Lazy Developer'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-9204496810526337055</id><published>2014-06-05T22:41:00.001-07:00</published><updated>2014-06-06T00:46:27.550-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='APIs'/><category scheme='http://www.blogger.com/atom/ns#' term='Data Structures'/><category scheme='http://www.blogger.com/atom/ns#' term='C#'/><category scheme='http://www.blogger.com/atom/ns#' term='Performance Tuning'/><title type='text'>Performance Tuning During Development</title><content type='html'>The day (and lately, night) job has been focused on a data api backing a new business insights tool. &amp;nbsp;Despite concerted efforts by nefarious interests, we have managed to keep the API resource centric, only leaking behavior where absolutely necessary. &amp;nbsp;We are starting the process of putting internal customers in front of the tool, and as such, I have become increasingly aware of the performance issues, of which there are quite a few. &lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The API provides an abstraction over two different persistence store technologies (Sql Server &amp;amp; HBase) and the domain models are built from data that resides in both stores. &amp;nbsp;No one particular resource channel is slow, but in the aggregate it *could* be more performant. &amp;nbsp;We have been working hard over the last few days to weave instrumentation into the application using Semantic Logging, and I figured, while I was down in bowels, I could investigate what I perceived to be performance problems. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I started with the usual Visual Studio performance tooling ... fire up Performance Analyzer and run all of the stock wizard tests one by one (except for the contention test - I am not convinced it ever really gives useful information). &amp;nbsp;These tests should be focused and limited in scope. &amp;nbsp;Running the analyzer for 20 min and exploring every corner of your API is for another time. &amp;nbsp;Here we are just trying to keep tabs on sticky or overly complex code blocks and you really just need to scout for a few key data points:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;What methods in your stack or in the core libs are called most often? What is their percentage of total calls?&lt;/li&gt;&lt;li&gt;What blocks of code are flagged in the hotlines graph?&lt;/li&gt;&lt;li&gt;Where is most of the processing time spent?&lt;/li&gt;&lt;li&gt;What spends the most time waiting for other methods to finish?&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Don't spend more than a few min just skimming the reports, remembering that you are here purely to simplify data structures, make your code cleaner and maybe a bit faster. &amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Below is a classic example of scaffolded code that I started a new algorithm off with. &amp;nbsp;It was filled in with business logic, and then became a blight on the system.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;First the scaffold code:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; var dedupedEdges = &lt;span style="color: blue;"&gt;new&lt;/span&gt; List&amp;lt;Tuple&amp;lt;&lt;span style="color: blue;"&gt;string&lt;/span&gt;, &lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;gt;&amp;gt;(); &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; &lt;span style="color: blue;"&gt;foreach&lt;/span&gt; (var edge &lt;span style="color: blue;"&gt;in&lt;/span&gt; edgeGroups.SelectMany(x =&amp;gt; x.EdgeList))&lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;     &lt;span style="color: green;"&gt;// Make sure both points are not "green"&lt;/span&gt; &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;     &lt;span style="color: green;"&gt;// Tuple is not in list as (item1, item2)&lt;/span&gt; &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;     &lt;span style="color: green;"&gt;// Tuple is not in list as (item2, item1)&lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;     { &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;     dedupedEdges.Add(&lt;span style="color: blue;"&gt;new&lt;/span&gt; Tuple&amp;lt;&lt;span style="color: blue;"&gt;string&lt;/span&gt;, &lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;gt;(&lt;span style="color: maroon;"&gt;""&lt;/span&gt;,&lt;span style="color: maroon;"&gt;""&lt;/span&gt;)); &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt;     }&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;After writing a few failing tests we have a naive implementation ... that works perfect over the small data set we are unit testing against. &lt;br&gt;&lt;br&gt;The code as first implemented:&lt;br&gt;&lt;br&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; var dedupedEdges = &lt;span style="color: blue;"&gt;new&lt;/span&gt; List&amp;lt;Tuple&amp;lt;&lt;span style="color: blue;"&gt;string&lt;/span&gt;, &lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;gt;&amp;gt;(); &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; &lt;span style="color: blue;"&gt;foreach&lt;/span&gt; (var edge &lt;span style="color: blue;"&gt;in&lt;/span&gt; edgeGroups.SelectMany(x =&amp;gt; x.EdgeList)&lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;     .Where(x =&amp;gt; !x.Item1.IsGreen() || !x.Item2.IsGreen()) &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;     .Where(edge =&amp;gt; !dedupedEdges &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;         .Contains(&lt;span style="color: blue;"&gt;new&lt;/span&gt; Tuple&amp;lt;&lt;span style="color: blue;"&gt;string&lt;/span&gt;, &lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;gt;(edge.Item1, edge.Item2))) &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;     .Where(edge =&amp;gt; !dedupedEdges &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;         .Contains(&lt;span style="color: blue;"&gt;new&lt;/span&gt; Tuple&amp;lt;&lt;span style="color: blue;"&gt;string&lt;/span&gt;, &lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;gt;(edge.Item2, edge.Item1)))) &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt;     { &lt;br /&gt;&lt;span style="color: teal;"&gt;  9&lt;/span&gt;     dedupedEdges.Add(&lt;span style="color: blue;"&gt;new&lt;/span&gt; Tuple&amp;lt;&lt;span style="color: blue;"&gt;string&lt;/span&gt;, &lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;gt;(edge.Item1, edge.Item2)); &lt;br /&gt;&lt;span style="color: teal;"&gt; 10&lt;/span&gt;     }&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Now I am not proud of this code; it's repetitive and poorly designed. &amp;nbsp;But, it's also done, working and passing all the tests. &amp;nbsp;&lt;i&gt;Don't fool yourself, if you write enough code, day in and day out ... a non-neglible percentage is pure drivel like this. &lt;/i&gt;&lt;br&gt;&lt;br&gt;So I am merrily flipping through the reports only to find that I am making 1.25 million ... yes I said MILLION calls to Tuple.Item1 and another 1.25 million calls to Tuple.Item2 during one very large API call. &amp;nbsp;So following the hotlines graph, I am kindly directed by Visual Studio to the crap starting on line 2. &amp;nbsp;Knowing better than to just start hacking away at it, as my instincts directed, I put in some code to help me understand the severity of the problem first. &amp;nbsp;&lt;i&gt;"If it ain't Baroque don't fix it"&lt;/i&gt;&lt;br&gt;&lt;br&gt;Stopwatch() ... as the guys on DotNetRocks say "&lt;i&gt;know it, learn it, love it.&lt;/i&gt;" &amp;nbsp;I dropped one around this &amp;nbsp;block with a handy little &lt;i&gt;Debug.Print(Stopwatch.EllapsedMiliseconds)&lt;/i&gt; and found my 2.5 million calls to Tuple.Item* were taking 1753ms, over an average of 10 runs across this code. &amp;nbsp;First, the .Net framework can clearly make very, very bad code run not so badly. &amp;nbsp;Second, I clearly have a demonstrable problem here.&lt;br&gt;&lt;br&gt;When I &lt;strike&gt;wrote&lt;/strike&gt;&amp;nbsp;phoned in this code, I was focused on the bigger algorithm at hand ... "pass the tests and move on." &amp;nbsp;But now, armed with metrics, I have justifiable cause to go a'hacking. &lt;br&gt;&lt;br&gt;There are a number of things that need to be fixed, but let's first take a look at what this code is supposed to do.&lt;br&gt;&lt;ul&gt;&lt;li&gt;The usage of &lt;i&gt;SelectMany&lt;/i&gt; indicates in this context that we are iterating a child list of multiple &lt;i&gt;EdgeGroups&lt;/i&gt;.&lt;/li&gt;&lt;li&gt;An &lt;i&gt;Edge&lt;/i&gt; is a &lt;i&gt;Tuple&lt;/i&gt;&amp;lt;&lt;i&gt;string&lt;/i&gt; &amp;amp; &lt;i&gt;string&amp;gt;.&lt;/i&gt;&lt;/li&gt;&lt;li&gt;The first predicate filter makes sure both elements are not "&lt;i&gt;green&lt;/i&gt;" (whatever &lt;i&gt;green&lt;/i&gt; means).&lt;/li&gt;&lt;li&gt;We then check the &lt;i&gt;dedupedEdges&lt;/i&gt;&amp;nbsp;&lt;i&gt;List&lt;/i&gt; to make sure a new version of the&amp;nbsp;&lt;i&gt;Tuple&lt;/i&gt; is not already in the list.&lt;/li&gt;&lt;li&gt;We next check the &lt;i&gt;dedupedEdges&lt;/i&gt; &lt;i&gt;List&lt;/i&gt; to make sure the reversed &lt;i&gt;Tuple&lt;/i&gt; is not in the list.&lt;/li&gt;&lt;li&gt;Finally take the Tuple, decompose it, rebuild a new tuple and finally add it to the&amp;nbsp;&lt;i&gt;dedupedEdges&lt;/i&gt;&amp;nbsp;&lt;i&gt;List&lt;/i&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;What, pray tell, could possibly be wrong here? &amp;nbsp;Let's go through each step and see if we can't make this better, shall we?&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Well the first step is to not use a crappy data structure. &amp;nbsp;What we need here is a Set, someplace where we can only stick 1 of an item and not end up with any duplicates. &amp;nbsp;Additionally, we need to do fast lookups into the data structure to make sure the reversed tuple is not present. &amp;nbsp;Hello, &lt;a href="http://msdn.microsoft.com/en-us/library/bb397727(v=vs.110).aspx"&gt;HashSet&lt;/a&gt;. &amp;nbsp;Let's see what this code looks like after a refactor:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; var dedupedEdges = &lt;span style="color: blue;"&gt;new&lt;/span&gt; HashSet&amp;lt;Tuple&amp;lt;&lt;span style="color: blue;"&gt;string&lt;/span&gt;, &lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;gt;&amp;gt;(); &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; &lt;span style="color: blue;"&gt;foreach&lt;/span&gt; (var edge &lt;span style="color: blue;"&gt;in&lt;/span&gt; edgeGroups.SelectMany(x =&amp;gt; x.EdgeList)&lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;     .Where(x =&amp;gt; !x.Item1.IsGreen() || !x.Item2.IsGreen()) &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;     .Where(edge =&amp;gt; !idIncludedEdges.Contains( &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;         &lt;span style="color: blue;"&gt;new&lt;/span&gt; Tuple&amp;lt;&lt;span style="color: blue;"&gt;string&lt;/span&gt;, &lt;span style="color: blue;"&gt;string&lt;/span&gt;&amp;gt;(edge.Item2, edge.Item1)))) &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;     { &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;     dedupedEdges.Add(edge); &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt;     }&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The loop still does the original predicate on green-ness; but now, we are doing do a highly performant lookup on the reverse tuple construct and finish by blindly tossing the filtered items at the HashSet which will ensure uniqueness for us. &lt;br&gt;&lt;br&gt;Is this perfect? &amp;nbsp;Nope. &lt;br&gt;Could it be better? &amp;nbsp;Sure. &lt;br&gt;Do I care? Nope. &lt;br&gt;&lt;br&gt;I get paid to write code ... hopefully, a lot of code. &amp;nbsp;If I can produce that code quickly great! &amp;nbsp;If that code is quick itself, greater sill! &amp;nbsp;If someone else can understand my quickly generated, quick code - I can stop for the day, as I have succeeded.&lt;br&gt;&lt;br&gt;So, the totally unscientific performance boost from this refactor ... 1753ms ... to an average of 5ms over 10 iterations. &lt;br&gt;&lt;br&gt;Core Takeaway:&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;You can do "some" performance work during development without hindering forward progress.&lt;/li&gt;&lt;li&gt;If you chose to do performance during active development, keep your efforts reasonable.&lt;/li&gt;&lt;li&gt;Deep dives while you are still developing an algorithm are distracting.&lt;/li&gt;&lt;li&gt;Often you can make huge performance gains without changing the shape of the code.&lt;/li&gt;&lt;li&gt;You will write crappy code and 90% of the time ... thats OK.&lt;/li&gt;&lt;li&gt;Know that you write crappy code, own it, hunt for it, fix it.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;br&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/9204496810526337055/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/06/performance-tuning-during-development.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/9204496810526337055'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/9204496810526337055'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/06/performance-tuning-during-development.html' title='Performance Tuning During Development'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-6229064329590076049</id><published>2014-05-31T14:40:00.001-07:00</published><updated>2014-06-01T13:25:13.862-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='JavaScript'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='C#'/><category scheme='http://www.blogger.com/atom/ns#' term='PhantomJs'/><title type='text'>Fun with C#, JavaScript &amp; PhantomJS</title><content type='html'>I have a fun little project going on right now that involves taking a portion of a web page, loading it into PhantomJS, passing a lump of data to it, taking a picture of the page, and displaying that image in a RDLC report. &amp;nbsp;There are like a ba'gillion different ways to accomplish this, so the below is a hacker's proof of concept.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;First up, we are going to need is a very simple web page with the following elements:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;A form element with a hidden input "data" that will be used to move data from the primary application to the stub page.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Two more inputs "height" and "width", which are used simply to show command line argument passing to Phantom.&lt;/li&gt;&lt;li&gt;A button that can be used to trigger a JavaScript function that will in turn draw the page.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style="background: #ffffff; border-width: .1em .1em .1em .8em; border: solid gray; overflow: auto; padding: .2em .6em; width: auto;"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style="line-height: 125%; margin: 0;"&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;br /&gt;16&lt;br /&gt;17&lt;br /&gt;18&lt;br /&gt;19&lt;br /&gt;20&lt;br /&gt;21&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style="line-height: 125%; margin: 0;"&gt;&lt;span style="color: #557799;"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #007700;"&gt;&amp;lt;html&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;lang=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"en"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;xmlns=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"http://www.w3.org/1999/xhtml"&lt;/span&gt;&lt;span style="color: #007700;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #007700;"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;span style="color: #007700;"&gt;&amp;lt;meta&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;charset=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"utf-8"&lt;/span&gt; &lt;span style="color: #007700;"&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;span style="color: #007700;"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;This is my test page&lt;span style="color: #007700;"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;span style="color: #007700;"&gt;&amp;lt;script &lt;/span&gt;&lt;span style="color: #0000cc;"&gt;src=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"my.js"&lt;/span&gt;&lt;span style="color: #007700;"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #007700;"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #007700;"&gt;&amp;lt;body&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;style=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"background-color: white; color: black; font-size: 1em;"&lt;/span&gt;&lt;span style="color: #007700;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;span style="color: #007700;"&gt;&amp;lt;form&amp;gt;&lt;/span&gt;&lt;br /&gt;            &lt;span style="color: #007700;"&gt;&amp;lt;input&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;id=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"data"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;type=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"hidden"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;name=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"data"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;value=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;""&lt;/span&gt;&lt;span style="color: #007700;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;            &lt;span style="color: #007700;"&gt;&amp;lt;input&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;id=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"height"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;type=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"hidden"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;name=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"height"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;value=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;""&lt;/span&gt;&lt;span style="color: #007700;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;            &lt;span style="color: #007700;"&gt;&amp;lt;input&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;id=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"width"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;type=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"hidden"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;name=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"width"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;value=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;""&lt;/span&gt;&lt;span style="color: #007700;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;            &lt;span style="color: #007700;"&gt;&amp;lt;button&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;id=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"buildFoo"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;name=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"buildFoo"&lt;/span&gt; &lt;br /&gt;             &lt;span style="color: #0000cc;"&gt;type=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"button"&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;value=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"Submit"&lt;/span&gt; &lt;br /&gt;             &lt;span style="color: #0000cc;"&gt;onclick=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;" init() "&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;style=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"visibility: hidden;"&lt;/span&gt;&lt;span style="color: #007700;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;      &lt;span style="color: #007700;"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;span style="color: #007700;"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;span style="color: #007700;"&gt;&amp;lt;div&lt;/span&gt; &lt;span style="color: #0000cc;"&gt;class=&lt;/span&gt;&lt;span style="background-color: #fff0f0;"&gt;"container"&lt;/span&gt;&lt;span style="color: #007700;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;span style="color: #007700;"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #007700;"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #007700;"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Hopefully it's obvious that our Javascript method init() in my.js, will simply plunk everything in the "container" div for display.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;The next element we need, moving up the stack, is our Javascript runner that we will pass to Phantom, kicking this whole process off. &amp;nbsp;Make note of the filesystem call for &lt;i&gt;stumpage.html&lt;/i&gt;; this could be passed in; but, I figured showing a filesystem call might be useful to someone.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style="background: #ffffff; border-width: .1em .1em .1em .8em; border: solid gray; overflow: auto; padding: .2em .6em; width: auto;"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style="line-height: 125%; margin: 0;"&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;br /&gt;16&lt;br /&gt;17&lt;br /&gt;18&lt;br /&gt;19&lt;br /&gt;20&lt;br /&gt;21&lt;br /&gt;22&lt;br /&gt;23&lt;br /&gt;24&lt;br /&gt;25&lt;br /&gt;26&lt;br /&gt;27&lt;br /&gt;28&lt;br /&gt;29&lt;br /&gt;30&lt;br /&gt;31&lt;br /&gt;32&lt;br /&gt;33&lt;br /&gt;34&lt;br /&gt;35&lt;br /&gt;36&lt;br /&gt;37&lt;br /&gt;38&lt;br /&gt;39&lt;br /&gt;40&lt;br /&gt;41&lt;br /&gt;42&lt;br /&gt;43&lt;br /&gt;44&lt;br /&gt;45&lt;br /&gt;46&lt;br /&gt;47&lt;br /&gt;48&lt;br /&gt;49&lt;br /&gt;50&lt;br /&gt;51&lt;br /&gt;52&lt;br /&gt;53&lt;br /&gt;54&lt;br /&gt;55&lt;br /&gt;56&lt;br /&gt;57&lt;br /&gt;58&lt;br /&gt;59&lt;br /&gt;60&lt;br /&gt;61&lt;br /&gt;62&lt;br /&gt;63&lt;br /&gt;64&lt;br /&gt;65&lt;br /&gt;66&lt;br /&gt;67&lt;br /&gt;68&lt;br /&gt;69&lt;br /&gt;70&lt;br /&gt;71&lt;br /&gt;72&lt;br /&gt;73&lt;br /&gt;74&lt;br /&gt;75&lt;br /&gt;76&lt;br /&gt;77&lt;br /&gt;78&lt;br /&gt;79&lt;br /&gt;80&lt;br /&gt;81&lt;br /&gt;82&lt;br /&gt;83&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style="line-height: 125%; margin: 0;"&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; system &lt;span style="color: #333333;"&gt;=&lt;/span&gt; require(&lt;span style="background-color: #fff0f0;"&gt;'system'&lt;/span&gt;);&lt;br /&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; args &lt;span style="color: #333333;"&gt;=&lt;/span&gt; require(&lt;span style="background-color: #fff0f0;"&gt;'system'&lt;/span&gt;).args;&lt;br /&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; fs &lt;span style="color: #333333;"&gt;=&lt;/span&gt; require(&lt;span style="background-color: #fff0f0;"&gt;'fs'&lt;/span&gt;);&lt;br /&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; page &lt;span style="color: #333333;"&gt;=&lt;/span&gt; require(&lt;span style="background-color: #fff0f0;"&gt;'webpage'&lt;/span&gt;).create();&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #888888;"&gt;//args[0] is this javascript file.&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; height &lt;span style="color: #333333;"&gt;=&lt;/span&gt; args[&lt;span style="color: #0000dd; font-weight: bold;"&gt;1&lt;/span&gt;];&lt;br /&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; width &lt;span style="color: #333333;"&gt;=&lt;/span&gt; args[&lt;span style="color: #0000dd; font-weight: bold;"&gt;2&lt;/span&gt;];&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; address &lt;span style="color: #333333;"&gt;=&lt;/span&gt; &lt;span style="background-color: #fff0f0;"&gt;"file:///"&lt;/span&gt; &lt;span style="color: #333333;"&gt;+&lt;/span&gt; fs.workingDirectory &lt;span style="color: #333333;"&gt;+&lt;/span&gt; &lt;span style="background-color: #fff0f0;"&gt;"/stubpage.html"&lt;/span&gt;;&lt;br /&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; data &lt;span style="color: #333333;"&gt;=&lt;/span&gt; system.stdin.readLine();&lt;br /&gt;&lt;br /&gt;page.open(address, &lt;span style="color: #008800; font-weight: bold;"&gt;function&lt;/span&gt;() {&lt;br /&gt;&lt;br /&gt; page.zoomFactor &lt;span style="color: #333333;"&gt;=&lt;/span&gt; &lt;span style="color: #0000dd; font-weight: bold;"&gt;1&lt;/span&gt;;&lt;br /&gt; page.viewportSize &lt;span style="color: #333333;"&gt;=&lt;/span&gt; {&lt;br /&gt;  width&lt;span style="color: #333333;"&gt;:&lt;/span&gt; width,&lt;br /&gt;  height&lt;span style="color: #333333;"&gt;:&lt;/span&gt; height&lt;br /&gt; };&lt;br /&gt; page.evaluate(&lt;span style="color: #008800; font-weight: bold;"&gt;function&lt;/span&gt;(data, height, width) {&lt;br /&gt;  &lt;span style="color: #888888;"&gt;//add the "data" to our page&lt;/span&gt;&lt;br /&gt;  &lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; d &lt;span style="color: #333333;"&gt;=&lt;/span&gt; &lt;span style="color: #007020;"&gt;document&lt;/span&gt;.getElementById(&lt;span style="background-color: #fff0f0;"&gt;'data'&lt;/span&gt;);&lt;br /&gt;  d.value &lt;span style="color: #333333;"&gt;=&lt;/span&gt; data;&lt;br /&gt;  &lt;span style="color: #888888;"&gt;//set the height input&lt;/span&gt;&lt;br /&gt;  &lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; h &lt;span style="color: #333333;"&gt;=&lt;/span&gt; &lt;span style="color: #007020;"&gt;document&lt;/span&gt;.getElementById(&lt;span style="background-color: #fff0f0;"&gt;'height'&lt;/span&gt;);&lt;br /&gt;  h.value &lt;span style="color: #333333;"&gt;=&lt;/span&gt; height;&lt;br /&gt;  &lt;span style="color: #888888;"&gt;//set the width input&lt;/span&gt;&lt;br /&gt;  &lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; w &lt;span style="color: #333333;"&gt;=&lt;/span&gt; &lt;span style="color: #007020;"&gt;document&lt;/span&gt;.getElementById(&lt;span style="background-color: #fff0f0;"&gt;'width'&lt;/span&gt;);&lt;br /&gt;  w.value &lt;span style="color: #333333;"&gt;=&lt;/span&gt; width;&lt;br /&gt;  &lt;span style="color: #888888;"&gt;//click the button to fire the page's JS&lt;/span&gt;&lt;br /&gt;  &lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; b &lt;span style="color: #333333;"&gt;=&lt;/span&gt; &lt;span style="color: #007020;"&gt;document&lt;/span&gt;.getElementById(&lt;span style="background-color: #fff0f0;"&gt;"buildFoo"&lt;/span&gt;);&lt;br /&gt;  b.click();&lt;br /&gt; }, data, height, width);&lt;br /&gt;&lt;br /&gt; waitFor(&lt;span style="color: #008800; font-weight: bold;"&gt;function&lt;/span&gt;() {&lt;br /&gt;  &lt;span style="color: #888888;"&gt;//something to wait on ...&lt;/span&gt;&lt;br /&gt;  &lt;span style="color: #008800; font-weight: bold;"&gt;return&lt;/span&gt; page.evaluate(&lt;span style="color: #008800; font-weight: bold;"&gt;function&lt;/span&gt;() {&lt;br /&gt;   &lt;span style="color: #888888;"&gt;//do we ahve a foo element on the page yet?&lt;/span&gt;&lt;br /&gt;   &lt;span style="color: #008800; font-weight: bold;"&gt;if&lt;/span&gt; (&lt;span style="color: #007020;"&gt;document&lt;/span&gt;.getElementById(&lt;span style="background-color: #fff0f0;"&gt;'foo'&lt;/span&gt;)) {&lt;br /&gt;    &lt;span style="color: #008800; font-weight: bold;"&gt;return&lt;/span&gt; &lt;span style="color: #008800; font-weight: bold;"&gt;true&lt;/span&gt;;&lt;br /&gt;   } &lt;span style="color: #008800; font-weight: bold;"&gt;else&lt;/span&gt; {&lt;br /&gt;    &lt;span style="color: #008800; font-weight: bold;"&gt;return&lt;/span&gt; &lt;span style="color: #008800; font-weight: bold;"&gt;false&lt;/span&gt;;&lt;br /&gt;   }&lt;br /&gt;  });&lt;br /&gt; }, &lt;span style="color: #008800; font-weight: bold;"&gt;function&lt;/span&gt;() {&lt;br /&gt;  &lt;span style="color: #888888;"&gt;//take a picture, it lasts longer&lt;/span&gt;&lt;br /&gt;  &lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; base64Image &lt;span style="color: #333333;"&gt;=&lt;/span&gt; page.renderBase64(&lt;span style="background-color: #fff0f0;"&gt;'PNG'&lt;/span&gt;);&lt;br /&gt;  &lt;span style="color: #888888;"&gt;//write the image to stdout&lt;/span&gt;&lt;br /&gt;  system.stdout.write(base64Image);&lt;br /&gt;  &lt;span style="color: #007020;"&gt;window&lt;/span&gt;.phantom.exit();&lt;br /&gt; });&lt;br /&gt;});&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;function&lt;/span&gt; waitFor(testFx, onReady, timeOutMillis) {&lt;br /&gt; &lt;span style="color: #888888;"&gt;// timeout after 10 sec.&lt;/span&gt;&lt;br /&gt; &lt;span style="color: #008800; font-weight: bold;"&gt;var&lt;/span&gt; maxtimeOutMillis &lt;span style="color: #333333;"&gt;=&lt;/span&gt; timeOutMillis &lt;span style="color: #333333;"&gt;?&lt;/span&gt; timeOutMillis &lt;span style="color: #333333;"&gt;:&lt;/span&gt; &lt;span style="color: #0000dd; font-weight: bold;"&gt;10000&lt;/span&gt;,&lt;br /&gt;  start &lt;span style="color: #333333;"&gt;=&lt;/span&gt; &lt;span style="color: #008800; font-weight: bold;"&gt;new&lt;/span&gt; &lt;span style="color: #007020;"&gt;Date&lt;/span&gt;().getTime(),&lt;br /&gt;  condition &lt;span style="color: #333333;"&gt;=&lt;/span&gt; &lt;span style="color: #008800; font-weight: bold;"&gt;false&lt;/span&gt;,&lt;br /&gt;  interval &lt;span style="color: #333333;"&gt;=&lt;/span&gt; setInterval(&lt;span style="color: #008800; font-weight: bold;"&gt;function&lt;/span&gt;() {&lt;br /&gt;   &lt;span style="color: #008800; font-weight: bold;"&gt;if&lt;/span&gt; ((&lt;span style="color: #008800; font-weight: bold;"&gt;new&lt;/span&gt; &lt;span style="color: #007020;"&gt;Date&lt;/span&gt;().getTime() &lt;span style="color: #333333;"&gt;-&lt;/span&gt; start &lt;span style="color: #333333;"&gt;&amp;lt;&lt;/span&gt; maxtimeOutMillis) &lt;br /&gt;    &lt;span style="color: #333333;"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color: #333333;"&gt;!&lt;/span&gt;condition) {&lt;br /&gt;    &lt;span style="color: #888888;"&gt;// If not time-out yet&lt;/span&gt;&lt;br /&gt;    &lt;span style="color: #888888;"&gt;// and condition not yet fulfilled&lt;/span&gt;&lt;br /&gt;    condition &lt;span style="color: #333333;"&gt;=&lt;/span&gt; (&lt;span style="color: #008800; font-weight: bold;"&gt;typeof&lt;/span&gt;(testFx) &lt;span style="color: #333333;"&gt;===&lt;/span&gt; &lt;span style="background-color: #fff0f0;"&gt;"string"&lt;/span&gt; &lt;br /&gt;     &lt;span style="color: #333333;"&gt;?&lt;/span&gt; &lt;span style="color: #007020;"&gt;eval&lt;/span&gt;(testFx) &lt;br /&gt;     &lt;span style="color: #333333;"&gt;:&lt;/span&gt; testFx());&lt;br /&gt;   } &lt;span style="color: #008800; font-weight: bold;"&gt;else&lt;/span&gt; {&lt;br /&gt;    &lt;span style="color: #008800; font-weight: bold;"&gt;if&lt;/span&gt; (&lt;span style="color: #333333;"&gt;!&lt;/span&gt;condition) {&lt;br /&gt;     &lt;span style="color: #888888;"&gt;// If condition still not fulfilled &lt;/span&gt;&lt;br /&gt;     &lt;span style="color: #888888;"&gt;//(timeout but condition is 'false')&lt;/span&gt;&lt;br /&gt;     phantom.exit(&lt;span style="color: #0000dd; font-weight: bold;"&gt;1&lt;/span&gt;);&lt;br /&gt;    } &lt;span style="color: #008800; font-weight: bold;"&gt;else&lt;/span&gt; {&lt;br /&gt;     &lt;span style="color: #888888;"&gt;// Condition fulfilled &lt;/span&gt;&lt;br /&gt;     &lt;span style="color: #888888;"&gt;//(timeout and/or condition is 'true')&lt;/span&gt;&lt;br /&gt;     &lt;span style="color: #008800; font-weight: bold;"&gt;typeof&lt;/span&gt;(onReady) &lt;span style="color: #333333;"&gt;===&lt;/span&gt; &lt;span style="background-color: #fff0f0;"&gt;"string"&lt;/span&gt; &lt;br /&gt;     &lt;span style="color: #333333;"&gt;?&lt;/span&gt; &lt;span style="color: #007020;"&gt;eval&lt;/span&gt;(onReady) &lt;br /&gt;     &lt;span style="color: #333333;"&gt;:&lt;/span&gt; onReady();&lt;br /&gt;     &lt;span style="color: #888888;"&gt;//&amp;lt; Stop this interval&lt;/span&gt;&lt;br /&gt;     clearInterval(interval); &lt;br /&gt;    }&lt;br /&gt;   }&lt;br /&gt;  }, &lt;span style="color: #0000dd; font-weight: bold;"&gt;250&lt;/span&gt;); &lt;span style="color: #888888;"&gt;// repeat check every 250ms&lt;/span&gt;&lt;br /&gt;};&lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;There are quite a few things to note in this file: &lt;br /&gt;&lt;br /&gt;First, lines 7 &amp;amp; 8 are pulling out command line args from the Phantom process startup, you will see the supplying of those args from C# in the next section. &amp;nbsp;Then take note of the code on line 11 which reads out data blob off the stdin pipe (be sure to see the warning in the C# section below).&lt;br /&gt;&lt;br /&gt;The meat of the script is the &lt;a href="http://phantomjs.org/api/webpage/method/open.html"&gt;page.open&lt;/a&gt; call where Phantom will load up our html page. &amp;nbsp;In this function we will set page attributes through the zoom factor and viewport properties. &amp;nbsp;We then leverage the &lt;a href="http://phantomjs.org/api/webpage/method/evaluate.html"&gt;page.evaluate&lt;/a&gt; function to get our data, height and width values into the hidden inputs in our html page. &amp;nbsp;And finally we find the hidden button and click it which will begin the process of drawing our page. &lt;br /&gt;&lt;br /&gt;Since the page drawing (rendering of an SVG image or the map) takes time, we must set up a polling routine that will wait until the page has been rendered before taking a screenshot. &amp;nbsp;To set up the loop we are using a very nice little example from the Phantom codebase over at GitHub which can be found &lt;a href="https://github.com/ariya/phantomjs/blob/master/examples/waitfor.js" target="_blank"&gt;here&lt;/a&gt;. &amp;nbsp;The loop simply waits for a "foo" element to be present on the page then continues on to take the screen shot, write the bytes to stdout and then exit.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;The last piece of the puzzle is starting Phantom in a process and getting our data across stdin to our JS runner above.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;!-- HTML generated using hilite.me --&gt;&lt;br /&gt;&lt;div style="background: #ffffff; border-width: .1em .1em .1em .8em; border: solid gray; overflow: auto; padding: .2em .6em; width: auto;"&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style="line-height: 125%; margin: 0;"&gt; 1&lt;br /&gt; 2&lt;br /&gt; 3&lt;br /&gt; 4&lt;br /&gt; 5&lt;br /&gt; 6&lt;br /&gt; 7&lt;br /&gt; 8&lt;br /&gt; 9&lt;br /&gt;10&lt;br /&gt;11&lt;br /&gt;12&lt;br /&gt;13&lt;br /&gt;14&lt;br /&gt;15&lt;br /&gt;16&lt;br /&gt;17&lt;br /&gt;18&lt;br /&gt;19&lt;br /&gt;20&lt;br /&gt;21&lt;br /&gt;22&lt;br /&gt;23&lt;br /&gt;24&lt;br /&gt;25&lt;br /&gt;26&lt;br /&gt;27&lt;br /&gt;28&lt;br /&gt;29&lt;br /&gt;30&lt;br /&gt;31&lt;br /&gt;32&lt;br /&gt;33&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style="line-height: 125%; margin: 0;"&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;public&lt;/span&gt; &lt;span style="color: #008800; font-weight: bold;"&gt;static&lt;/span&gt; &lt;span style="color: #333399; font-weight: bold;"&gt;byte&lt;/span&gt;[] &lt;span style="color: #0066bb; font-weight: bold;"&gt;GetImage&lt;/span&gt;(&lt;br /&gt;                         IEnumerable&amp;lt;Datum&amp;gt; data,&lt;br /&gt;                         &lt;span style="color: #333399; font-weight: bold;"&gt;string&lt;/span&gt; jsFile&lt;br /&gt;                     )&lt;br /&gt;{&lt;br /&gt;&lt;span style="color: #888888;"&gt;//Path to PhantomJS install, you can add to path, etc.&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;const&lt;/span&gt; &lt;span style="color: #333399; font-weight: bold;"&gt;string&lt;/span&gt; path = &lt;span style="background-color: #fff0f0;"&gt;@"C:\Program Files\phantomjs-1.9.7\phantomjs.exe"&lt;/span&gt;;&lt;br /&gt;&lt;span style="color: #888888;"&gt;//build command line args, Phantom Runner and height/width args&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #333399; font-weight: bold;"&gt;var&lt;/span&gt; args = &lt;span style="color: #008800; font-weight: bold;"&gt;new&lt;/span&gt; &lt;span style="color: #333399; font-weight: bold;"&gt;object&lt;/span&gt;[] { jsFile, &lt;span style="color: #6600ee; font-weight: bold;"&gt;800&lt;/span&gt;, &lt;span style="color: #6600ee; font-weight: bold;"&gt;650&lt;/span&gt; };&lt;br /&gt;&lt;span style="color: #888888;"&gt;//startup environment for Phantom&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #333399; font-weight: bold;"&gt;var&lt;/span&gt; info = &lt;span style="color: #008800; font-weight: bold;"&gt;new&lt;/span&gt; ProcessStartInfo(path, &lt;span style="color: #333399; font-weight: bold;"&gt;string&lt;/span&gt;.Join(&lt;span style="background-color: #fff0f0;"&gt;" "&lt;/span&gt;, args))&lt;br /&gt;{&lt;br /&gt;    RedirectStandardInput = &lt;span style="color: #008800; font-weight: bold;"&gt;true&lt;/span&gt;,&lt;br /&gt;    RedirectStandardOutput = &lt;span style="color: #008800; font-weight: bold;"&gt;true&lt;/span&gt;,&lt;br /&gt;    RedirectStandardError = &lt;span style="color: #008800; font-weight: bold;"&gt;true&lt;/span&gt;,&lt;br /&gt;    UseShellExecute = &lt;span style="color: #008800; font-weight: bold;"&gt;false&lt;/span&gt;,&lt;br /&gt;    CreateNoWindow = &lt;span style="color: #008800; font-weight: bold;"&gt;true&lt;/span&gt;&lt;br /&gt;};&lt;br /&gt;&lt;span style="color: #333399; font-weight: bold;"&gt;var&lt;/span&gt; p = Process.Start(info);&lt;br /&gt;p.Start();&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #888888;"&gt;//open stream, write serialized data, close&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #333399; font-weight: bold;"&gt;var&lt;/span&gt; streamwriter = p.StandardInput;&lt;br /&gt;streamwriter.WriteLine(JsonConvert.SerializeObject(data.ToList()));&lt;br /&gt;streamwriter.Close();&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #888888;"&gt;//listen on standard out and read until process exits.&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #333399; font-weight: bold;"&gt;var&lt;/span&gt; stdout = p.StandardOutput.ReadToEnd();&lt;br /&gt;p.WaitForExit();&lt;br /&gt;&lt;br /&gt;&lt;span style="color: #888888;"&gt;//return byte[] of image&lt;/span&gt;&lt;br /&gt;&lt;span style="color: #008800; font-weight: bold;"&gt;return&lt;/span&gt; Convert.FromBase64String(stdout);&lt;br /&gt;} &lt;br /&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;We begin our C# method by setting up the path to Phantom (note: you could add Phantom to your path, pass it in so there are no magic consts, etc.). &amp;nbsp;Next we need to set up the command line arguments for Phantom:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The relative path to our JavaScript runner file from above.&lt;/li&gt;&lt;li&gt;The page height.&lt;/li&gt;&lt;li&gt;The page width. &amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Continue by setting up a process environment for Phantom by redirecting Standard In, Out &amp;amp; Error which will enable interaction with Phantom. &amp;nbsp;The final two process settings are to prevent a window at process launch and the disabling of Shell Execution (see MSDN docs for details on &lt;a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.processstartinfo.useshellexecute.aspx"&gt;Shell Execution&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;With Phantom up and running we can take a reference to the redirected standard input stream, serialize our data over to our Phantom process. &amp;nbsp;Closing of the input stream will trigger page evaluation over in Phantom.&lt;br /&gt;&lt;br /&gt;***WARNING*** it should be noted that a read of stdin as of Phantom 1.9.7 is a blocking call. &amp;nbsp;However, there is a feature request for 2.0 that will make this async by default. &amp;nbsp;If you are utilizing this technique you will want to defensively block on the stdin read in the event that things change in the future.&lt;br /&gt;&lt;br /&gt;The final step is to snag the bytes from stdout making sure to call to WaitForExit method of the process happens after you take a reference to the stdout. &amp;nbsp;The ordering will ensure that you read off all the contents of stdout. &amp;nbsp;Lastly, convert the string to a byte array and return.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;As I noted in the introduction, you could add your byte array to a dataset, then map an Image element of an RDLC to the dataset, giving you dynamic image content for reports. &amp;nbsp;You could potentially use this technique in integration tests to ensure that the positions of elements on the page have not moved. &amp;nbsp;Or even as a simple archiving technique to scrape and save the state of a website. &amp;nbsp;&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;Happy Hacking!&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/6229064329590076049/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/05/csharp-javascript-phantomjs-screenshots.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6229064329590076049'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6229064329590076049'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/05/csharp-javascript-phantomjs-screenshots.html' title='Fun with C#, JavaScript &amp; PhantomJS'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-2160508959638362898</id><published>2014-05-23T22:50:00.001-07:00</published><updated>2014-05-26T12:39:44.047-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Craftsmanship'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='software'/><category scheme='http://www.blogger.com/atom/ns#' term='Craftsman'/><title type='text'>Craftsman &amp; Craftsmanship</title><content type='html'>&lt;div class="MsoNormal"&gt;If you could pick one word, and only one word to describe yourself, what would it be?&lt;span style="mso-spacerun: yes;"&gt;&amp;nbsp; &lt;/span&gt;What word would you own?&lt;span style="mso-spacerun: yes;"&gt;&amp;nbsp; &lt;/span&gt;What word wakes you up and puts you to bed? What word drives your decisions, challenges your peers and inspires your team? &amp;nbsp;Go ahead and think about it for a minute, I can wait.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;It has taken me many years to find my word; though I think I have always tried to embody it.&lt;span style="mso-spacerun: yes;"&gt;&amp;nbsp; &lt;/span&gt;From my youthful days building cardboard forts, through the bright lights of Broadway and onto dark themed code editors …&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;My word is&amp;nbsp;&lt;b&gt;&lt;i&gt;Craftsman&lt;/i&gt;&lt;/b&gt;.&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;It is a pretty powerful word:&lt;span style="mso-spacerun: yes;"&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;It carries the weight and passion of being an innovator and master of craft.&lt;/li&gt;&lt;li&gt;It is a humbling word, bringing acknowledgement of imperfection.&amp;nbsp;&lt;/li&gt;&lt;li&gt;It emphasizes practice and the virtue of patience.&amp;nbsp;&lt;/li&gt;&lt;li&gt;It suggests a willingness to disseminate knowledge.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Its implementation adds value and softens the risks of change.&amp;nbsp;&lt;/li&gt;&lt;li&gt;It encourages one to strategize for the future.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;o:p&gt;&lt;/o:p&gt;&lt;br /&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt; &lt;o:DocumentProperties&gt;  &lt;o:Revision&gt;0&lt;/o:Revision&gt;  &lt;o:TotalTime&gt;0&lt;/o:TotalTime&gt;  &lt;o:Pages&gt;1&lt;/o:Pages&gt;  &lt;o:Words&gt;152&lt;/o:Words&gt;  &lt;o:Characters&gt;868&lt;/o:Characters&gt;  &lt;o:Company&gt;Lucid Motions&lt;/o:Company&gt;  &lt;o:Lines&gt;7&lt;/o:Lines&gt;  &lt;o:Paragraphs&gt;2&lt;/o:Paragraphs&gt;  &lt;o:CharactersWithSpaces&gt;1018&lt;/o:CharactersWithSpaces&gt;  &lt;o:Version&gt;14.0&lt;/o:Version&gt; &lt;/o:DocumentProperties&gt; &lt;o:OfficeDocumentSettings&gt;  &lt;o:AllowPNG/&gt; &lt;/o:OfficeDocumentSettings&gt;&lt;/xml&gt;&lt;![endif]--&gt; &lt;!--[if gte mso 9]&gt;&lt;xml&gt; &lt;w:WordDocument&gt;  &lt;w:View&gt;Normal&lt;/w:View&gt;  &lt;w:Zoom&gt;0&lt;/w:Zoom&gt;  &lt;w:TrackMoves/&gt;  &lt;w:TrackFormatting/&gt;  &lt;w:PunctuationKerning/&gt;  &lt;w:ValidateAgainstSchemas/&gt;  &lt;w:SaveIfXMLInvalid&gt;false&lt;/w:SaveIfXMLInvalid&gt;  &lt;w:IgnoreMixedContent&gt;false&lt;/w:IgnoreMixedContent&gt;  &lt;w:AlwaysShowPlaceholderText&gt;false&lt;/w:AlwaysShowPlaceholderText&gt;  &lt;w:DoNotPromoteQF/&gt;  &lt;w:LidThemeOther&gt;EN-US&lt;/w:LidThemeOther&gt;  &lt;w:LidThemeAsian&gt;JA&lt;/w:LidThemeAsian&gt;  &lt;w:LidThemeComplexScript&gt;X-NONE&lt;/w:LidThemeComplexScript&gt;  &lt;w:Compatibility&gt;   &lt;w:BreakWrappedTables/&gt;   &lt;w:SnapToGridInCell/&gt;   &lt;w:WrapTextWithPunct/&gt;   &lt;w:UseAsianBreakRules/&gt;   &lt;w:DontGrowAutofit/&gt;   &lt;w:SplitPgBreakAndParaMark/&gt;   &lt;w:EnableOpenTypeKerning/&gt;   &lt;w:DontFlipMirrorIndents/&gt;   &lt;w:OverrideTableStyleHps/&gt;   &lt;w:UseFELayout/&gt;  &lt;/w:Compatibility&gt;  &lt;m:mathPr&gt;   &lt;m:mathFont m:val="Cambria Math"/&gt;   &lt;m:brkBin m:val="before"/&gt;   &lt;m:brkBinSub m:val="&amp;#45;-"/&gt;   &lt;m:smallFrac m:val="off"/&gt;   &lt;m:dispDef/&gt;   &lt;m:lMargin m:val="0"/&gt;   &lt;m:rMargin m:val="0"/&gt;   &lt;m:defJc m:val="centerGroup"/&gt;   &lt;m:wrapIndent m:val="1440"/&gt;   &lt;m:intLim m:val="subSup"/&gt;   &lt;m:naryLim m:val="undOvr"/&gt;  &lt;/m:mathPr&gt;&lt;/w:WordDocument&gt;&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt; &lt;w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="276"&gt;  &lt;w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal"/&gt;  &lt;w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 1"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 2"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 3"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 4"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 5"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 6"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 7"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 8"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 9"/&gt;  &lt;w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption"/&gt;  &lt;w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title"/&gt;  &lt;w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font"/&gt;  &lt;w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle"/&gt;  &lt;w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong"/&gt;  &lt;w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis"/&gt;  &lt;w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid"/&gt;  &lt;w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text"/&gt;  &lt;w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1"/&gt;  &lt;w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision"/&gt;  &lt;w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph"/&gt;  &lt;w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote"/&gt;  &lt;w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis"/&gt;  &lt;w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis"/&gt;  &lt;w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference"/&gt;  &lt;w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference"/&gt;  &lt;w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title"/&gt;  &lt;w:LsdException Locked="false" Priority="37" Name="Bibliography"/&gt;  &lt;w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading"/&gt; &lt;/w:LatentStyles&gt;&lt;/xml&gt;&lt;![endif]--&gt; &lt;!--[if gte mso 10]&gt;&lt;style&gt; /* Style Definitions */ table.MsoNormalTable  {mso-style-name:"Table Normal";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:"";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin:0in;  mso-para-margin-bottom:.0001pt;  mso-pagination:widow-orphan;  font-size:10.0pt;  font-family:Cambria;  mso-ascii-font-family:Cambria;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Cambria;  mso-hansi-theme-font:minor-latin;  mso-fareast-language:JA;} &lt;/style&gt;&lt;![endif]--&gt;   &lt;!--StartFragment--&gt;                                 &lt;!--EndFragment--&gt;&lt;br /&gt;&lt;div class="MsoNormal"&gt;So one last question ... are you a Craftsman? &lt;o:p&gt;&lt;/o:p&gt;&lt;br /&gt;&lt;br /&gt;*Update - this post was inspired by my iPhone getting stuck repeating Bob Marley's "&lt;i&gt;Corner Stone&lt;/i&gt;" while on a ride. &amp;nbsp;The song has its roots in Psalm 118 line 22 for the curious.&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/2160508959638362898/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/05/craftsmanship.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2160508959638362898'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2160508959638362898'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/05/craftsmanship.html' title='Craftsman &amp; Craftsmanship'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-114604735526611132</id><published>2014-05-20T10:40:00.005-07:00</published><updated>2014-05-20T10:40:58.536-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>Generate Passwords with Membership Provider</title><content type='html'>To solidly rip off DotNetRocks ... today's installment of "Better Know a Framework's Methods", we bring you the &lt;a href="http://msdn.microsoft.com/en-us/library/system.web.security.membership.generatepassword.aspx" target="_blank"&gt;Generate Password&lt;/a&gt; method of the Membership class in System.Web.Security namespace. &lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;public&lt;/span&gt; &lt;span style="color: blue;"&gt;static&lt;/span&gt; &lt;span style="color: blue;"&gt;string&lt;/span&gt; GeneratePassword(&lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt;     &lt;span style="color: blue;"&gt;int&lt;/span&gt; length, &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;     &lt;span style="color: blue;"&gt;int&lt;/span&gt; numberOfNonAlphanumericCharacters &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt; )&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;The method is clearly super simple to use, taking in an overall length of password and count of non-alphanumeric characters to seed the password with. &amp;nbsp;I am sure there are all sorts of pitfalls to using this; but frankly, for a fast solution to generating passwords for zip files... this fits the bill nicely.</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/114604735526611132/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/05/generate-passwords-with-membership.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/114604735526611132'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/114604735526611132'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/05/generate-passwords-with-membership.html' title='Generate Passwords with Membership Provider'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-1027936388976476719</id><published>2014-05-17T23:38:00.003-07:00</published><updated>2014-05-17T23:47:15.197-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>HBase, Thrift, &amp; C# - Batch Reads</title><content type='html'>Continuing the epic series on Hbase, Thrift and C#, this installment is the code for a batch scanner by leveraging inheritance and generics to provide a broad based solution. &amp;nbsp;If you have not done so please check out the other parts of the series:&lt;br /&gt;&lt;br /&gt;Part 1 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/04/nuget-code-generation-jenkins-thrift-hbase.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;NuGet Servers, HBase, Thrift Code Generation and one sweet Jenkins CI Build&lt;/a&gt;&lt;br /&gt;Part 2 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-first-connections.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;HBase, Thrift &amp;amp; C# - First Connections&lt;/a&gt;&lt;br /&gt;Part 3 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-session-management.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;HBase, Thrift, &amp;amp; C# - Managing Sessions&lt;/a&gt;&lt;br /&gt;Part 4 - &lt;a href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-generic-row-scanner.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;" target="_blank"&gt;HBase, Thrift, &amp;amp; C# - First Scanner and Leveraging Generics&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;Feeling the PAIN of single reads off HBase, I hacked up a little method to allow for batch reads off the HBase Thrift interface. &amp;nbsp;Like the other versions in my last HBase post, this one makes use of the table scanner.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;public&lt;/span&gt; &lt;span style="color: blue;"&gt;virtual&lt;/span&gt; List&amp;lt;T&amp;gt; BatchSelectWithPrefixScanner&amp;lt;T&amp;gt;(&lt;span style="color: blue;"&gt;string&lt;/span&gt; identifier, &lt;span style="color: blue;"&gt;int&lt;/span&gt; batchSize)&lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt;     where T : IHBaseEntity, &lt;span style="color: blue;"&gt;new&lt;/span&gt;() &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt; { &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;     var col = &lt;span style="color: blue;"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: blue;"&gt;byte&lt;/span&gt;[]&amp;gt;(); &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;     col.AddRange(Columns.Select(x =&amp;gt; x.GetBytes())); &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;     var tableName = &lt;span style="color: blue;"&gt;string&lt;/span&gt;.Format(TableNameTemplate, RetailerId);&lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  9&lt;/span&gt;     var scanner = HBaseClient.scannerOpenWithPrefix( &lt;br /&gt;&lt;span style="color: teal;"&gt; 10&lt;/span&gt;         tableName.GetBytes(), &lt;br /&gt;&lt;span style="color: teal;"&gt; 11&lt;/span&gt;         identifier.GetBytes(), &lt;br /&gt;&lt;span style="color: teal;"&gt; 12&lt;/span&gt;         col, &lt;br /&gt;&lt;span style="color: teal;"&gt; 13&lt;/span&gt;         &lt;span style="color: blue;"&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style="color: blue;"&gt;byte&lt;/span&gt;[], &lt;span style="color: blue;"&gt;byte&lt;/span&gt;[]&amp;gt;() &lt;br /&gt;&lt;span style="color: teal;"&gt; 14&lt;/span&gt;         ); &lt;br /&gt;&lt;span style="color: teal;"&gt; 15&lt;/span&gt;     &lt;span style="color: blue;"&gt;return&lt;/span&gt; GetBatchRows&amp;lt;T&amp;gt;(batchSize, scanner); &lt;br /&gt;&lt;span style="color: teal;"&gt; 16&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Yet again we have leveraged generics to return a List&amp;lt;T&amp;gt;. &lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/1027936388976476719/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/05/hbase-thrift-c-batch-reads.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1027936388976476719'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1027936388976476719'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/05/hbase-thrift-c-batch-reads.html' title='HBase, Thrift, &amp; C# - Batch Reads'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-7024642767860289349</id><published>2014-05-04T15:50:00.001-07:00</published><updated>2014-05-17T23:38:55.705-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Scanners'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='HBase'/><category scheme='http://www.blogger.com/atom/ns#' term='Thrift'/><category scheme='http://www.blogger.com/atom/ns#' term='Generics'/><category scheme='http://www.blogger.com/atom/ns#' term='Type Constraints'/><category scheme='http://www.blogger.com/atom/ns#' term='C# NoSql'/><title type='text'>HBase, Thrift, &amp; C# - First Scanner and Leveraging Generics</title><content type='html'>Continuing the epic series on Hbase, Thrift and C#, is this installment where we will review building our first row scanner by leveraging inheritance and generics to provide a broad based solution. &amp;nbsp;If you have not done so please check out the other parts of the series:&lt;br /&gt;&lt;br /&gt;Part 1 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/04/nuget-code-generation-jenkins-thrift-hbase.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;NuGet Servers, HBase, Thrift Code Generation and one sweet Jenkins CI Build&lt;/a&gt;&lt;br /&gt;Part 2 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-first-connections.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;HBase, Thrift &amp;amp; C# - First Connections&lt;/a&gt;&lt;br /&gt;Part 3 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-session-management.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;HBase, Thrift, &amp;amp; C# - Managing Sessions&lt;/a&gt;&lt;br /&gt;Part 4 -&amp;nbsp;&lt;a href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-generic-row-scanner.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;" target="_blank"&gt;HBase, Thrift, &amp;amp; C# - First Scanner and Leveraging Generics&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;Hopefully you are somewhat familiar with the concepts of No-SQL and the various sub-database types. &amp;nbsp;If not, I highly recommend spending an hour with Martin Folwer's - &lt;a href="https://www.youtube.com/watch?v=qI_g07C_Q5I" target="_blank"&gt;Introduction To No-SQL&lt;/a&gt;&amp;nbsp;over on YouTube. &amp;nbsp;It's an incredibly insightful skim of the No-Sql space.&lt;br /&gt;&lt;br /&gt;The Apache HBase project is a kin to the Cassandra project in that they are both databases oriented in the Column-Family store approach. &amp;nbsp;I am not enough of an expert on the topic to provide deep details, so I will leave you to your wits and Google to fill in any missing pieces.&lt;br /&gt;&lt;br /&gt;Assuming you have some data in your working HBase cluster, I know ... it's a hell of an assumption; but go with me on this, we will need some way to get at that data. &amp;nbsp;For now, we will simply focus on retreiving the data from the database and leave writing data for later in the series.&lt;br /&gt;&lt;br /&gt;The example query we will work with is the scan. &amp;nbsp; Specifically, a prefix scan that will return all rows where the supplied identifier is matched against row key prefixes.&lt;br /&gt;&lt;br /&gt;We will begin by building the shell of a scanner class. &amp;nbsp;It needs a few properties, such as the target table name, the columns we want to retrieve and a reference to the client we built back in &lt;a href="https://www.blogger.com/blogger.g?blogID=4707687462195457004#editor/target=post;postID=5568222696367618036;onPublishedMenu=posts;onClosedMenu=posts;postNum=2;src=postname" target="_blank"&gt;part II&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;public&lt;/span&gt; &lt;span style="color: blue;"&gt;class&lt;/span&gt; Scanner&lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; { &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;     &lt;span style="color: blue;"&gt;public&lt;/span&gt; &lt;span style="color: blue;"&gt;string&lt;/span&gt; TableName { &lt;span style="color: blue;"&gt;get&lt;/span&gt;; &lt;span style="color: blue;"&gt;protected&lt;/span&gt; &lt;span style="color: blue;"&gt;set&lt;/span&gt;; }&lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;     &lt;span style="color: blue;"&gt;public&lt;/span&gt; &lt;span style="color: blue;"&gt;string&lt;/span&gt;[] Columns { &lt;span style="color: blue;"&gt;get&lt;/span&gt;; &lt;span style="color: blue;"&gt;protected&lt;/span&gt; &lt;span style="color: blue;"&gt;set&lt;/span&gt;; }&lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;     &lt;span style="color: blue;"&gt;public&lt;/span&gt; Hbase.Client HBaseClient { &lt;span style="color: blue;"&gt;get&lt;/span&gt;; &lt;span style="color: blue;"&gt;set&lt;/span&gt;; }&lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;     &lt;span style="color: blue;"&gt;protected&lt;/span&gt; Scanner() &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt;     { &lt;br /&gt;&lt;span style="color: teal;"&gt;  9&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt; 10&lt;/span&gt;     } &lt;br /&gt;&lt;span style="color: teal;"&gt; 11&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;With our class shell written, let's dig into our first public method. &amp;nbsp;The method will take in a row key prefix as a parameter and will return a List&amp;lt;T&amp;gt;, where T is a model of our the underlaying HBase entity, let's call it "Foo". &amp;nbsp;Additionally, we should tease out a private method that will iterate across the scanners results, yielding an IEnumerable&amp;lt;Foo&amp;gt;, which we can return as a list to the source caller.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;public&lt;/span&gt; List&amp;lt;Foo&amp;gt; SelectWithPrefixScanner(&lt;span style="color: blue;"&gt;string&lt;/span&gt; identifier)&lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; {  &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;      var col = &lt;span style="color: blue;"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: blue;"&gt;byte&lt;/span&gt;[]&amp;gt;();  &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;      col.AddRange(Columns.Select(StaticHelpers.GetBytes));  &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;     &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;      var scanner = HBaseClient.scannerOpenWithPrefix(  &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;             TableName.GetBytes(),  &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt;             identifier.GetBytes(),  &lt;br /&gt;&lt;span style="color: teal;"&gt;  9&lt;/span&gt;             col,  &lt;br /&gt;&lt;span style="color: teal;"&gt; 10&lt;/span&gt;             &lt;span style="color: blue;"&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style="color: blue;"&gt;byte&lt;/span&gt;[], &lt;span style="color: blue;"&gt;byte&lt;/span&gt;[]&amp;gt;()  &lt;br /&gt;&lt;span style="color: teal;"&gt; 11&lt;/span&gt;         );  &lt;br /&gt;&lt;span style="color: teal;"&gt; 12&lt;/span&gt;     &lt;br /&gt;&lt;span style="color: teal;"&gt; 13&lt;/span&gt;      &lt;span style="color: blue;"&gt;return&lt;/span&gt; GetAllRows&amp;lt;Foo&amp;gt;(scanner).ToList();  &lt;br /&gt;&lt;span style="color: teal;"&gt; 14&lt;/span&gt; } &lt;br /&gt;&lt;span style="color: teal;"&gt; 15&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt; 16&lt;/span&gt; &lt;span style="color: blue;"&gt;private&lt;/span&gt; IEnumerable&amp;lt;Foo&amp;gt; GetAllRows(&lt;span style="color: blue;"&gt;int&lt;/span&gt; scanner)&lt;br /&gt;&lt;span style="color: teal;"&gt; 17&lt;/span&gt; { &lt;br /&gt;&lt;span style="color: teal;"&gt; 18&lt;/span&gt;      &lt;span style="color: blue;"&gt;while&lt;/span&gt; (&lt;span style="color: maroon;"&gt;true&lt;/span&gt;)&lt;br /&gt;&lt;span style="color: teal;"&gt; 19&lt;/span&gt;      { &lt;br /&gt;&lt;span style="color: teal;"&gt; 20&lt;/span&gt;           var scannerResult = HBaseClient.scannerGet(scanner); &lt;br /&gt;&lt;span style="color: teal;"&gt; 21&lt;/span&gt;           &lt;span style="color: blue;"&gt;if&lt;/span&gt; (scannerResult.Count &amp;gt; &lt;span style="color: maroon;"&gt;0&lt;/span&gt;)&lt;br /&gt;&lt;span style="color: teal;"&gt; 22&lt;/span&gt;           { &lt;br /&gt;&lt;span style="color: teal;"&gt; 23&lt;/span&gt;                var foo = &lt;span style="color: blue;"&gt;new&lt;/span&gt; Foo() &lt;br /&gt;&lt;span style="color: teal;"&gt; 24&lt;/span&gt;                { &lt;br /&gt;&lt;span style="color: teal;"&gt; 25&lt;/span&gt;                    Identifier = scannerResult.First().Row.GetString(), &lt;br /&gt;&lt;span style="color: teal;"&gt; 26&lt;/span&gt;                    Data = scannerResult.First().Columns &lt;br /&gt;&lt;span style="color: teal;"&gt; 27&lt;/span&gt;                }; &lt;br /&gt;&lt;span style="color: teal;"&gt; 28&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt; 29&lt;/span&gt;                &lt;span style="color: green;"&gt;// Take data object and run container's parser over it.&lt;/span&gt; &lt;br /&gt;&lt;span style="color: teal;"&gt; 30&lt;/span&gt;                foo.ParseFields(); &lt;br /&gt;&lt;span style="color: teal;"&gt; 31&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt; 32&lt;/span&gt;                &lt;span style="color: blue;"&gt;yield&lt;/span&gt; &lt;span style="color: blue;"&gt;return&lt;/span&gt; foo;&lt;br /&gt;&lt;span style="color: teal;"&gt; 33&lt;/span&gt;            } &lt;br /&gt;&lt;span style="color: teal;"&gt; 34&lt;/span&gt;            &lt;span style="color: blue;"&gt;else&lt;/span&gt; &lt;br /&gt;&lt;span style="color: teal;"&gt; 35&lt;/span&gt;            { &lt;br /&gt;&lt;span style="color: teal;"&gt; 36&lt;/span&gt;                HBaseClient.scannerClose(scanner); &lt;br /&gt;&lt;span style="color: teal;"&gt; 37&lt;/span&gt;                &lt;span style="color: blue;"&gt;yield&lt;/span&gt; &lt;span style="color: blue;"&gt;break&lt;/span&gt;;&lt;br /&gt;&lt;span style="color: teal;"&gt; 38&lt;/span&gt;             } &lt;br /&gt;&lt;span style="color: teal;"&gt; 39&lt;/span&gt;       } &lt;br /&gt;&lt;span style="color: teal;"&gt; 40&lt;/span&gt; }&lt;/pre&gt;&lt;/pre&gt;&lt;/div&gt;In the SelectWithPrefixScanner method, we begin by building a list of columns that we will want the scanner to retrieve for us. &amp;nbsp;The columns property could be set up with something as simple as:&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; Columns = &lt;span style="color: blue;"&gt;new&lt;/span&gt;[] { &lt;span style="color: maroon;"&gt;"c:v"&lt;/span&gt; };&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;where "c" is the column family in the rows to be queried and "v" is the specific column. &amp;nbsp;Using a Linq Select(), the columns are passed to an extension method that will convert the strings into byte arrays adding the result to the "col" variable.&lt;br /&gt;&lt;br /&gt;Next, we set up the scanner using the HBase Client's scannerOpenWithPrefix method. &amp;nbsp;As I noted before, the prefix scanner will select all rows where the row key begins with the identifier we are passing in. &amp;nbsp;This method also requires a table name as bytes, the prefix identifier as bytes, our previously defined columns and a dictionary of attributes. &lt;br /&gt;&lt;br /&gt;&lt;i&gt;Moment of Honesty: &amp;nbsp;I have no clue what the available attributes are that can go in the scanner. &amp;nbsp;I could crack open the HBase Thrift implementation and find out but have not done so to date. &amp;nbsp;I have searched Google a'plenty, and my results have always yielded squat. &amp;nbsp;So, yeah.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Continuing, the call to HBaseClient.scannerOpenWithPrefix() will return an Int identifier which uniquely identifies the remote scanner we instantiated. The scanners identifier is passed to the private method which will do the heavy lifting to fetch the results.&lt;br /&gt;&lt;br /&gt;The GetAllRows() method is a simple while loop that yields the results of the Client's scannerGet() method. &amp;nbsp;As long as there are more results available, the method will build "Foo"s, using object initializer syntax to populate stock fields, and subsequently call a method on Foo to have the data parsed into fields/properties. &lt;br /&gt;&lt;br /&gt;And that's it. &amp;nbsp;More or less straight forward; but, we are not done quite yet. &amp;nbsp;Suppose for the sake of argument that we want to implement this scanner for not only type "Foo", but also type "Bar". &amp;nbsp;Generics should do nicely.&lt;br /&gt;&lt;br /&gt;Step one to making this a generic set-up, is to define a common entity interface. &amp;nbsp;Let's call that IHBaseEntity, and make it looks something like:&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;public&lt;/span&gt; &lt;span style="color: blue;"&gt;interface&lt;/span&gt; IHBaseEntity&lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; { &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;     &lt;span style="color: blue;"&gt;string&lt;/span&gt; Identifier { &lt;span style="color: blue;"&gt;get&lt;/span&gt;; &lt;span style="color: blue;"&gt;set&lt;/span&gt;; }&lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;     Dictionary&amp;lt;&lt;span style="color: blue;"&gt;byte&lt;/span&gt;[], Hbase.TCell&amp;gt; Data { &lt;span style="color: blue;"&gt;get&lt;/span&gt;; &lt;span style="color: blue;"&gt;set&lt;/span&gt;; };&lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;     &lt;span style="color: blue;"&gt;void&lt;/span&gt; ParseFields(); &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;All "Foo" and "Bar" need to do is implement the interface by providing the two properties and a void method that can take &lt;i&gt;Data&lt;/i&gt; and parse it into the respective entities own properties/fields.&lt;br /&gt;&lt;br /&gt;The next thing we need to do is get the SelectWithPrefixScanner to work with generic types. &amp;nbsp;We will update the method signature to use type 'T, add type constraints to indicate that we are new'ing objects of type 'T and that the new'ed objects must implement the IHBaseEntity interface.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;public&lt;/span&gt; List&amp;lt;T&amp;gt; SelectWithPrefixScanner&amp;lt;T&amp;gt;(&lt;span style="color: blue;"&gt;string&lt;/span&gt; identifier) where T : IHBaseEntity, &lt;span style="color: blue;"&gt;new&lt;/span&gt;() &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; { &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;    var col = &lt;span style="color: blue;"&gt;new&lt;/span&gt; List&amp;lt;&lt;span style="color: blue;"&gt;byte&lt;/span&gt;[]&amp;gt;(); &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;    col.AddRange(Columns.Select(StaticHelpers.GetBytes)); &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;    var scanner = HBaseClient.scannerOpenWithPrefix( &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;             tableName.GetBytes(), &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt;             identifier.GetBytes(), &lt;br /&gt;&lt;span style="color: teal;"&gt;  9&lt;/span&gt;             col, &lt;br /&gt;&lt;span style="color: teal;"&gt; 10&lt;/span&gt;             &lt;span style="color: blue;"&gt;new&lt;/span&gt; Dictionary&amp;lt;&lt;span style="color: blue;"&gt;byte&lt;/span&gt;[], &lt;span style="color: blue;"&gt;byte&lt;/span&gt;[]&amp;gt;() &lt;br /&gt;&lt;span style="color: teal;"&gt; 11&lt;/span&gt;         ); &lt;br /&gt;&lt;span style="color: teal;"&gt; 12&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt; 13&lt;/span&gt;     &lt;span style="color: blue;"&gt;return&lt;/span&gt; GetAllRows&amp;lt;T&amp;gt;(scanner).ToList(); &lt;br /&gt;&lt;span style="color: teal;"&gt; 14&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Because our return type has been updated from List&amp;lt;Foo&amp;gt; to List&amp;lt;T&amp;gt; we will need to make similar modifications to the GetAllRows method:&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;private&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; GetAllRows&amp;lt;T&amp;gt;(&lt;span style="color: blue;"&gt;int&lt;/span&gt; scanner) where T : IHBaseEntity, &lt;span style="color: blue;"&gt;new&lt;/span&gt;() &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; { &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;     &lt;span style="color: blue;"&gt;while&lt;/span&gt; (&lt;span style="color: maroon;"&gt;true&lt;/span&gt;)&lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;     { &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;         var scannerResult = HBaseClient.scannerGet(scanner); &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;         &lt;span style="color: blue;"&gt;if&lt;/span&gt; (scannerResult.Count &amp;gt; &lt;span style="color: maroon;"&gt;0&lt;/span&gt;)&lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;         { &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt;             var obj = &lt;span style="color: blue;"&gt;new&lt;/span&gt; T() &lt;br /&gt;&lt;span style="color: teal;"&gt;  9&lt;/span&gt;             { &lt;br /&gt;&lt;span style="color: teal;"&gt; 10&lt;/span&gt;                  Identifier = scannerResult.First().Row.GetString(), &lt;br /&gt;&lt;span style="color: teal;"&gt; 11&lt;/span&gt;                  Data = scannerResult.First().Columns &lt;br /&gt;&lt;span style="color: teal;"&gt; 12&lt;/span&gt;              }; &lt;br /&gt;&lt;span style="color: teal;"&gt; 13&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt; 14&lt;/span&gt;              &lt;span style="color: green;"&gt;// Take data object and run container's parser over it.&lt;/span&gt; &lt;br /&gt;&lt;span style="color: teal;"&gt; 15&lt;/span&gt;              obj.ParseFields(); &lt;br /&gt;&lt;span style="color: teal;"&gt; 16&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt; 17&lt;/span&gt;              &lt;span style="color: blue;"&gt;yield&lt;/span&gt; &lt;span style="color: blue;"&gt;return&lt;/span&gt; obj;&lt;br /&gt;&lt;span style="color: teal;"&gt; 18&lt;/span&gt;          } &lt;br /&gt;&lt;span style="color: teal;"&gt; 19&lt;/span&gt;          &lt;span style="color: blue;"&gt;else&lt;/span&gt; &lt;br /&gt;&lt;span style="color: teal;"&gt; 20&lt;/span&gt;          { &lt;br /&gt;&lt;span style="color: teal;"&gt; 21&lt;/span&gt;               HBaseClient.scannerClose(scanner); &lt;br /&gt;&lt;span style="color: teal;"&gt; 22&lt;/span&gt;               &lt;span style="color: blue;"&gt;yield&lt;/span&gt; &lt;span style="color: blue;"&gt;break&lt;/span&gt;;&lt;br /&gt;&lt;span style="color: teal;"&gt; 23&lt;/span&gt;          } &lt;br /&gt;&lt;span style="color: teal;"&gt; 24&lt;/span&gt;      } &lt;br /&gt;&lt;span style="color: teal;"&gt; 25&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Update with the same constraints, build new objects of type 'T instead of Foo. &amp;nbsp;Since we added the IHBaseEntity interface, we do not need to adjust the setting of Identifier and Data or the call to ParseFields. &lt;br /&gt;&lt;br /&gt;Lastly, implementing a custom scanner can now be as simple as setting properties for the specific table and columns that you want to query:&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;public&lt;/span&gt; &lt;span style="color: blue;"&gt;class&lt;/span&gt; MyCustomScanner : IScanner&lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; { &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;     &lt;span style="color: blue;"&gt;public&lt;/span&gt; MyCustomScanner() &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;         : &lt;span style="color: blue;"&gt;base&lt;/span&gt;() &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;     { &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;         TableName = &lt;span style="color: maroon;"&gt;"my_table_name"&lt;/span&gt;; &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;         Columns = &lt;span style="color: blue;"&gt;new&lt;/span&gt;[] { &lt;span style="color: maroon;"&gt;"c:v"&lt;/span&gt; }; &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt;     } &lt;br /&gt;&lt;span style="color: teal;"&gt;  9&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Through the use of generics, we have been able to make a base scanner that can work for any entity implementing the IHBaseEntity interface. &amp;nbsp;In the next part of the series we will investigate working with the entities and implementing the ParseFields() method. &amp;nbsp;As always, questions and comments are welcomed!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/7024642767860289349/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-generic-row-scanner.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7024642767860289349'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7024642767860289349'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-generic-row-scanner.html' title='HBase, Thrift, &amp; C# - First Scanner and Leveraging Generics'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-826954646952827416</id><published>2014-05-03T14:41:00.001-07:00</published><updated>2014-05-17T23:39:25.965-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='HBase'/><category scheme='http://www.blogger.com/atom/ns#' term='Producer Consumer'/><category scheme='http://www.blogger.com/atom/ns#' term='C#'/><category scheme='http://www.blogger.com/atom/ns#' term='Queues'/><category scheme='http://www.blogger.com/atom/ns#' term='Thrift'/><category scheme='http://www.blogger.com/atom/ns#' term='Session Management'/><title type='text'>HBase, Thrift, &amp; C# - Managing Sessions</title><content type='html'>In my last post, &lt;a href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-first-connections.html" target="_blank"&gt;HBase, Thrift &amp;amp; C# - First Connections&lt;/a&gt;, I mentioned and included in the code, references to a Session Pool Manager. &amp;nbsp;I wanted to take the opportunity to discuss some of the behavioral aspects of this class. &amp;nbsp;Unfortunately, because this work is completely unrelated to any open source projects, I don't feel comfortable sharing the actual code. &amp;nbsp;That said, I won't hesitate to talk about how it works and discuss some of it's features, in the event you are looking to implement a session manager. &amp;nbsp; Don't forget to check the other posts in this series.&lt;br /&gt;&lt;br /&gt;Part 1 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/04/nuget-code-generation-jenkins-thrift-hbase.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;NuGet Servers, HBase, Thrift Code Generation and one sweet Jenkins CI Build&lt;/a&gt;&lt;br /&gt;Part 2 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-first-connections.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;HBase, Thrift &amp;amp; C# - First Connections&lt;/a&gt;&lt;br /&gt;Part 3 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-session-management.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;HBase, Thrift, &amp;amp; C# - Managing Sessions&lt;/a&gt;&lt;br /&gt;Part 4 -&amp;nbsp;&lt;a href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-generic-row-scanner.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;" target="_blank"&gt;HBase, Thrift, &amp;amp; C# - First Scanner and Leveraging Generics&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;The Session Pool Manager (SPM) is actually a collection of interfaces and classes who's end functionality is very similar to that of the ADO.net SQL Connection Pool (details &lt;a href="http://msdn.microsoft.com/en-us/library/8xx3tyca(v=vs.110).aspx" target="_blank"&gt;here&lt;/a&gt;). &amp;nbsp;What we are looking to accomplish is decreasing the overhead of building and validating a connection to HBase. &amp;nbsp;Depending on your environment and implementation a connection to HBase might involve:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Pinging a thrift server&amp;nbsp;&lt;/li&gt;&lt;li&gt;Running a health check on the thrift server.&lt;/li&gt;&lt;li&gt;Opening a socket&lt;/li&gt;&lt;li&gt;Building the protocol objects&lt;/li&gt;&lt;li&gt;Building a client object&lt;/li&gt;&lt;li&gt;Authentication via basic, kerberos, etc.&lt;/li&gt;&lt;li&gt;Perhaps prefetching some data to make sure the connection is solid.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Each of these steps by itself is inconsequential; but, in an API environment where you are constantly serving requests, paying the overhead can quickly become costly. &amp;nbsp;To combat the overhead we can create N instances of session objects, keep them in a queue and dole them out as needed to callers.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There are a few features of the pool manager we need to consider when working with HBase or other DBs that provide multiple routes to the data (think master-master or active-active arangements). &amp;nbsp;Typically, a thrift server instance will run on each of the region servers in your cluster. &amp;nbsp;That means that you have multiple machines that can service requests concurrently. &amp;nbsp;Assuming that you have taken steps to properly design your row keys and your access patterns are sufficiently random to avoid disk hot spots, you can increase the bandwidth of the cluster by making requests to multiple thrift servers concurrently.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In our design we will need a connection object with an interface that can hold the connection details for each of the thrift servers. &amp;nbsp;For now I simply pull that information out of hard coded values in the web.config for the API. &amp;nbsp;Obviously, the "right" way to do this, is to query another system that can dynamically report back the active and healthy region/thrift.&lt;/div&gt;&lt;br /&gt;We can leverage the DI framework to parse the config, build our connection objects and pass them to the Session Pool Manager's constructor. &amp;nbsp;In our case we have one Session Pool Manager per application pool. &amp;nbsp;When the pool recycles, so does the Session Pool Manager. &lt;br /&gt;&lt;br /&gt;The Pool Manger has several internal collections. &amp;nbsp;The first is a concurrent queue of prebuilt and available sessions. &amp;nbsp;When a caller requests a session, we simply pop it off the queue and hand it back to the caller. &amp;nbsp;As you saw in the previous post, the caller can get the session in a using statement:&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: blue;"&gt;using&lt;/span&gt; (var session = _sessionPoolManager.GetSession())&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Since our session object implements IDisposable, the session's dispose method will be called as the using statement terminates. &amp;nbsp;The dispose method closes the open connection and simply calls Requeue(session) on the Pool Manager to put the session back in the SPM's queue.&lt;br /&gt;&lt;br /&gt;Let's suppose however, that the queue did not have any available sessions to hand out at the time. &amp;nbsp;If that's the case, then we simply build another session object, add it to the queue, pulse a monitor and the caller will get the newly created session to go and work with. &amp;nbsp;There is one caveat to this, the Session Pool Manager has a property MaxSessions. &amp;nbsp;If the total count of sessions has reached the MaxSessions count then the Pool Manager will simply block until a connection becomes available.&lt;br /&gt;&lt;br /&gt;Given the need to max out at a specific session count we will need to store the total count of sessions that have been created. &amp;nbsp;We can use one data structure to kill two features.&lt;br /&gt;&lt;br /&gt;As I noted previously, we have the opportunity to connect to multiple thrift servers on the cluster, meaning we can distribute our query load across the region servers. &amp;nbsp;For random reads, our case, the simple approach of a evenly balanced round robin distribution is actually the most efficient approach spreading load across available regions servers.&lt;br /&gt;&lt;br /&gt;To implement the load distribution, there is a second collection of &lt;i&gt;Dictionary&amp;lt;Connection, int&amp;gt;&lt;/i&gt; where we keep the connection object created from config parsing and an int to track the count of instances. &amp;nbsp;Finding the next connection to build a session with, is a matter of selecting the Min() of values from the dictionary. &amp;nbsp;Additionally, finding out if we have reached our MaxSessions can be as simple as running a Sum() across the values. &amp;nbsp;Obviously there are some potential threading issues with this approach, given that the increment &amp;amp; decrement of the values in the dictionary cannot be done without locking the dictionary. &amp;nbsp;The reality however, is that the MaxSessions value is guidance. &amp;nbsp;If we end up blocking for a moment or accidentally creating an extra session, there is really no harm.&lt;br /&gt;&lt;br /&gt;The next feature we need is over on the Session object itself. &amp;nbsp;If, for some reason, we encountered an error while using the session, perhaps the socket closed or the read timed out, then we want to track that with the session. &lt;br /&gt;&lt;br /&gt;Here's the case: the session's connection encountered an error an timed out, the session was then re-queued into the Pool Managers Queue. &amp;nbsp;By storing the last know state (perhaps using an enum) you can test the connection with a high speed lookup before handing it to the next caller. &amp;nbsp;If your remote call fails, then you can pass the session to an async method for destruction and continue on by getting another session from the queue (one may be built for you in the background).&lt;br /&gt;&lt;br /&gt;Another possible issue is that a region server is down and therefore building any connections to it is a waste of time. &amp;nbsp;The simplest way to combat this is to continue to destroy failing connections and let your pool slowly migrate over to the other good thrift servers. &amp;nbsp;Each time a caller asks for a new session the dictionary look up will first return the down node, since it has the least number of active connections. &amp;nbsp;An attempt to connect will fail, the session can then be destroyed and the SPM tries again with the next least active session. &amp;nbsp;This loop continues until you have exhausted the list of connections in the dictionary.&lt;br /&gt;&lt;br /&gt;Testing the failed node can continue in through this process until it comes back on line, at which point we will want to begin to rebalance. &amp;nbsp;Rebalancing the pool is as simple as expiring old sessions before handing them out. &amp;nbsp;By keeping a created property on the session, you can asynchronously destroy old sessions when you come across them, before handing them back to callers. &lt;br /&gt;&lt;br /&gt;This whole approach to session pooling is a passive producer/consumer approach that supports a multi-threaded environment like a DataAPI. &amp;nbsp;I encourage you to do some research around the topics involved before writing your own. &amp;nbsp;For instance, Jon Skeet has a blog post that would be a great place to start for producer consumer multi-threading, available &lt;a href="http://www.yoda.arachsys.com/csharp/threads/deadlocks.shtml" target="_blank"&gt;here&lt;/a&gt;. &amp;nbsp;My last bit of caution is to keep management state light; try to keep your approach as functional as possible. &amp;nbsp;Feel free to ask questions or tell me I am an idiot in the comments section below.&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/826954646952827416/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-session-management.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/826954646952827416'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/826954646952827416'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-session-management.html' title='HBase, Thrift, &amp; C# - Managing Sessions'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-5568222696367618036</id><published>2014-05-03T00:21:00.001-07:00</published><updated>2014-05-17T23:39:48.739-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='HBase'/><category scheme='http://www.blogger.com/atom/ns#' term='C#'/><category scheme='http://www.blogger.com/atom/ns#' term='Thrift'/><title type='text'>HBase, Thrift &amp; C# - First Connections</title><content type='html'>I seemingly have a bad habit of never writing part two of a series. &amp;nbsp;So to buck the trend, this piece is a follow up to&amp;nbsp;&lt;a href="http://www.lucidmotions.net/2014/04/nuget-code-generation-jenkins-thrift-hbase.html" target="_blank"&gt;NuGet Servers, HBase, Thrift Code Generation and one sweet Jenkins CI Build&lt;/a&gt;. &amp;nbsp;You don't need to read the whole post; but, familiarizing yourself with section III and on is important. &amp;nbsp;Don't forget to check other posts in this series.&lt;br /&gt;&lt;br /&gt;Part 1 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/04/nuget-code-generation-jenkins-thrift-hbase.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;NuGet Servers, HBase, Thrift Code Generation and one sweet Jenkins CI Build&lt;/a&gt;&lt;br /&gt;Part 2 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-first-connections.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;HBase, Thrift &amp;amp; C# - First Connections&lt;/a&gt;&lt;br /&gt;Part 3 -&amp;nbsp;&lt;a class="GCUXF0KCPB" href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-session-management.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;"&gt;HBase, Thrift, &amp;amp; C# - Managing Sessions&lt;/a&gt;&lt;br /&gt;Part 4 -&amp;nbsp;&lt;a href="http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-generic-row-scanner.html" style="border: 0px; color: #1155cc; display: inline-block; font-family: Arial, Helvetica, sans-serif; font-size: 13px; margin: 0px 10px 0px 0px; max-width: 100%; overflow: hidden; padding: 0px; text-decoration: none; text-overflow: ellipsis; vertical-align: baseline; white-space: nowrap; width: auto;" target="_blank"&gt;HBase, Thrift, &amp;amp; C# - First Scanner and Leveraging Generics&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;Let's take a quick look at establishing connectivity to our HBase Thrift server. &amp;nbsp;The example connection code in the thrift C# solution is a great primer and what we will use as the base here.&lt;br /&gt;&lt;br /&gt;For the majority of the code in the rest of this series, we will take a simplistic page from NHibernate's architecture. &amp;nbsp;Let's start with a simple Interface called ISession which implements IDisposable. &amp;nbsp;The implementation of IDisposable is so we can build sessions within a using statement, letting the framework do our heavy lifting.&lt;br /&gt;&lt;br /&gt;Further, we will build a class called Session that implements the Interface ISession. &amp;nbsp;Its constructor will take a reference to our Pool Manager class and will take a Connection object that has configuration data in it.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;public&lt;/span&gt; &lt;span style="color: blue;"&gt;class&lt;/span&gt; Session : ISession&lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; { &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;     &lt;span style="color: blue;"&gt;private&lt;/span&gt; &lt;span style="color: blue;"&gt;readonly&lt;/span&gt; IConnection _connection;&lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;     &lt;span style="color: blue;"&gt;private&lt;/span&gt; &lt;span style="color: blue;"&gt;readonly&lt;/span&gt; ISessionPoolManager _manager;&lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;     &lt;span style="color: blue;"&gt;private&lt;/span&gt; &lt;span style="color: blue;"&gt;readonly&lt;/span&gt; TSocket _transport;&lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;     &lt;span style="color: blue;"&gt;private&lt;/span&gt; Hbase.Hbase.Client _client; &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt;     &lt;span style="color: blue;"&gt;public&lt;/span&gt; Session(ISessionPoolManager manager, IConnection connection)&lt;br /&gt;&lt;span style="color: teal;"&gt;  9&lt;/span&gt;     { &lt;br /&gt;&lt;span style="color: teal;"&gt; 10&lt;/span&gt;          Guid = Guid.NewGuid(); &lt;br /&gt;&lt;span style="color: teal;"&gt; 11&lt;/span&gt;          _connection = connection; &lt;br /&gt;&lt;span style="color: teal;"&gt; 12&lt;/span&gt;          _manager = manager; &lt;br /&gt;&lt;span style="color: teal;"&gt; 13&lt;/span&gt;          _transport = &lt;span style="color: blue;"&gt;new&lt;/span&gt; TSocket(Connection.Name, Connection.Port);&lt;br /&gt;&lt;span style="color: teal;"&gt; 14&lt;/span&gt;          var protocol = &lt;span style="color: blue;"&gt;new&lt;/span&gt; TBinaryProtocol(_transport);&lt;br /&gt;&lt;span style="color: teal;"&gt; 15&lt;/span&gt;          _client = &lt;span style="color: blue;"&gt;new&lt;/span&gt; Hbase.Hbase.Client(protocol);&lt;br /&gt;&lt;span style="color: teal;"&gt; 16&lt;/span&gt;     }&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;The class has a private method called OpenConnection() that is used to, well, open a connection to HBase via Thrift. This code is very straight forward:&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;private&lt;/span&gt; Hbase.Hbase.Client OpenConnection()&lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; { &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;      _transport.Open(); &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;      IsConnected = _transport.IsOpen; &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;      &lt;span style="color: blue;"&gt;return&lt;/span&gt; _client; &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;For completeness let's implement a CloseConnection():&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;private&lt;/span&gt; &lt;span style="color: blue;"&gt;void&lt;/span&gt; CloseConnection()&lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; { &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;      &amp;nbsp;_transport.Close(); &lt;/pre&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;      &amp;nbsp;IsConnected = _transport.IsOpen; &lt;/pre&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;Because the Session class implements the IDisposable interface we are required to have a Dispose method. &amp;nbsp;The Dispose method calls our internal close on the transport and re-queues this object in Pool Manager's queue.&lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;public&lt;/span&gt; &lt;span style="color: blue;"&gt;void&lt;/span&gt; Dispose()&lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; { &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;      CloseConnection(); &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;      _manager.Requeue(&lt;span style="color: blue;"&gt;this&lt;/span&gt;); &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt; }&lt;/pre&gt;&lt;/div&gt;&lt;br /&gt;In the next article we will look at implementing a table scanner for HBase and the structure to support it.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/5568222696367618036/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-first-connections.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5568222696367618036'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5568222696367618036'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/05/hbase-thrift-csharp-first-connections.html' title='HBase, Thrift &amp; C# - First Connections'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-3115882263462139722</id><published>2014-04-26T23:21:00.005-07:00</published><updated>2014-04-26T23:23:50.561-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Automation'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='NTLM'/><category scheme='http://www.blogger.com/atom/ns#' term='Build Pipeline'/><category scheme='http://www.blogger.com/atom/ns#' term='NuGet'/><category scheme='http://www.blogger.com/atom/ns#' term='Continuous Integration'/><category scheme='http://www.blogger.com/atom/ns#' term='Jenkins'/><category scheme='http://www.blogger.com/atom/ns#' term='ProGet'/><title type='text'>NuGet Servers, HBase, Thrift Code Generation and one sweet Jenkins CI Build</title><content type='html'>Its always a bit of a joy when pet and client projects align on similar goals, the proverbial 'killing of two birds with one stone'. &amp;nbsp;Admittedly though, I applied a touch of coercion to get these in sync.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The client project:&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;HBase Thrift connector in C#, which has a code generation step to convert the HBase thrift file into a C# lib.&lt;/li&gt;&lt;/ul&gt;The pet project(s):&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Internal NuGet Server&lt;/li&gt;&lt;li&gt;Scripts for Jenkins to run a code generation process&lt;/li&gt;&lt;li&gt;Scripts for Jenkins to build NuGet packages&lt;/li&gt;&lt;li&gt;Programmatically building a C# Visual Studio project&lt;/li&gt;&lt;/ul&gt;Though it is not the specific focus of this post, I will lightly cover the HBase thrift connector for those that are interested. &amp;nbsp;So without further adieu, lets get to work…&lt;/div&gt;&lt;h3&gt;Step 1 - Build the NuGet Server&lt;/h3&gt;&lt;div&gt;I screwed around for a while with the NuGet package that lets you build your own self hosted server. &amp;nbsp;For those that have the unnatural desire to tweak all the nobs … try it out. &amp;nbsp;I admit, I gave up very early in the process after realizing I could:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Use a pre-baked solution that was a snap to install and configure.&lt;/li&gt;&lt;li&gt;Throw money at someone when our dependency on the product finally warranted support.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&lt;a href="http://inedo.com/proget/overview" target="_blank"&gt;ProGet (from Inedo)&lt;/a&gt;&amp;nbsp;was a great fit. &amp;nbsp;Product is a snap to install, and configure. &amp;nbsp;I simply set up an IIS website as follows:&amp;nbsp;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Define a default localhost:port binding (this was configured when installing the product).&lt;/li&gt;&lt;li&gt;Define a redirect binding of nuget.{server}.{domain}.com to the localhost setup.&lt;/li&gt;&lt;li&gt;Under the site's authentication settings, enable Windows Authentication, disable anonymous, remove the Negotiate provider from the Windows Authentication provider.&lt;/li&gt;&lt;li&gt;Under authorization rules, add an entry for your group as "allow".&amp;nbsp;&lt;/li&gt;&lt;li&gt;Ping your IT/Active Directory team to add the redirect url to the groups trusted sites list.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;In our department, we primarily use IE and Chrome, both honor the GPO trusted sites list though the setting does not always stick the first time through. &amp;nbsp;If that's the case for you, and the site is asking for authentication, be sure to kill IE &amp;amp; Chrome, run a "gpupdate /force", then log out and back in again … it *should* work now. &lt;br /&gt;&lt;br /&gt;Lastly, NuGet Package Manager in Visual Studio works seamlessly with Windows NTLM Authentication. &amp;nbsp;With the site running, you now have a group authenticated, nominally secured internally hosted NuGet Server. &amp;nbsp;I think that deserves a "Sweet, Right On!"&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Step 2 - Configure NuGet&lt;/h3&gt;&lt;div&gt;We have a few things to configure to get NuGet up and running after installation. &amp;nbsp;The developer's workstations will need to be patched to the new server so they can find your internally hosted packages and all build machines, plus their slaves, will need an additional configuration file.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;First things first, lets get the URL for our new server; this had me stumped for a bit. &amp;nbsp;Visit your new site in your browser of choice, select "Browse Packages" and then click on the RSS Feed button on the presented page.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-xzJFMfVgMs8/U1wpZjkQvyI/AAAAAAAAARw/2nhM2agjsLQ/s1600/SnipImage+copy+4.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-xzJFMfVgMs8/U1wpZjkQvyI/AAAAAAAAARw/2nhM2agjsLQ/s1600/SnipImage+copy+4.JPG" height="96" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;You will be presented with a page that has the Atom XML data, just grab the Url and fire up Visual Studio.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The Visual Studio changes are a snap. &amp;nbsp;Under &lt;i&gt;Tools&lt;/i&gt; -&amp;gt; &lt;i&gt;NuGet Package Manager&lt;/i&gt;, select "&lt;i&gt;Manage NuGet Packages for Solution&lt;/i&gt;." &amp;nbsp;You will be presented with the hopefully familiar screen:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-Pyvthj9PqLc/U1wqTVQ-E1I/AAAAAAAAAR4/NqftVA0BTLI/s1600/SnipImage+copy+2.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-Pyvthj9PqLc/U1wqTVQ-E1I/AAAAAAAAAR4/NqftVA0BTLI/s1600/SnipImage+copy+2.JPG" height="265" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Clicking on &lt;i&gt;Settings&lt;/i&gt; in the lower left corner will bring you to the Visual Studio "&lt;i&gt;Options&lt;/i&gt;" Window with &lt;i&gt;Package Sources&lt;/i&gt; Settings in focus.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-BKeGoAsUhWY/U1wq5vSpcbI/AAAAAAAAASA/WMrfD-sqsOI/s1600/SnipImage+copy+3.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-BKeGoAsUhWY/U1wq5vSpcbI/AAAAAAAAASA/WMrfD-sqsOI/s1600/SnipImage+copy+3.JPG" height="322" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In the upper right corner click the "&lt;i&gt;+&lt;/i&gt;" button and add the url you copied from your browser earlier, and a name for your new NuGet Server. &amp;nbsp;Select "&lt;i&gt;OK&lt;/i&gt;."&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The next point to address is configuring the Build Server(s) and any slaves that perform NuGet Package Restores. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For almost all of our projects, we enable Nuget Package Restore. &amp;nbsp;This can be done by adding the following markup in your Nant target right before the call to MS Build.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;&lt;pre&gt;&lt;span style="color: #a65700;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #5f5035;"&gt;setenv&lt;/span&gt;&lt;span style="color: #a65700;"&gt;&amp;gt;&lt;/span&gt;  &lt;br /&gt;    &lt;span style="color: #a65700;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #5f5035;"&gt;variable&lt;/span&gt; &lt;span style="color: #274796;"&gt;name&lt;/span&gt;&lt;span style="color: #808030;"&gt;=&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;EnableNuGetPackageRestore&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt; &lt;span style="color: #274796;"&gt;value&lt;/span&gt;&lt;span style="color: #808030;"&gt;=&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;true&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt; &lt;span style="color: #a65700;"&gt;/&amp;gt;&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: #a65700;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #5f5035;"&gt;setenv&lt;/span&gt;&lt;span style="color: #a65700;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span style="color: #a65700;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;div&gt;No matter which NuGet executable is called, the one included in your project or one installed on the host itself, the program can use a global config file located in "C:\ProgramData\NuGet". &amp;nbsp;Create the NuGet folder if it does not exist and add a file called &lt;i&gt;NuGetDefaults.config&lt;/i&gt;. &amp;nbsp;You can Google plenty of resources on what can go in this file; but, what is essential is the following markup:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: #004a43;"&gt;&amp;lt;?&lt;/span&gt;&lt;span style="color: maroon; font-weight: bold;"&gt;xml&lt;/span&gt;&lt;span style="color: #004a43;"&gt; &lt;/span&gt;&lt;span style="color: #074726;"&gt;version&lt;/span&gt;&lt;span style="color: #808030;"&gt;=&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&lt;span style="color: #7d0045;"&gt;1.0&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&lt;span style="color: #004a43;"&gt; &lt;/span&gt;&lt;span style="color: #074726;"&gt;encoding&lt;/span&gt;&lt;span style="color: #808030;"&gt;=&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;UTF-8&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&lt;span style="color: #004a43;"&gt;?&amp;gt;&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: #a65700;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #5f5035;"&gt;configuration&lt;/span&gt;&lt;span style="color: #a65700;"&gt;&amp;gt;&lt;/span&gt;    &lt;br /&gt;    &lt;span style="color: #a65700;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #5f5035;"&gt;packageSources&lt;/span&gt;&lt;span style="color: #a65700;"&gt;&amp;gt;&lt;/span&gt;  &lt;br /&gt;        &lt;span style="color: #a65700;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #5f5035;"&gt;add&lt;/span&gt; &lt;span style="color: #274796;"&gt;key&lt;/span&gt;&lt;span style="color: #808030;"&gt;=&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;nuget.org&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span style="color: #274796;"&gt;             value&lt;/span&gt;&lt;span style="color: #808030;"&gt;=&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;https://www.nuget.org/api/v2/&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt; &lt;span style="color: #a65700;"&gt;/&amp;gt;&lt;/span&gt;  &lt;br /&gt;        &lt;span style="color: #a65700;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color: #5f5035;"&gt;add&lt;/span&gt; &lt;span style="color: #274796;"&gt;key&lt;/span&gt;&lt;span style="color: #808030;"&gt;=&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;Nuget Source&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span style="color: #274796;"&gt;             value&lt;/span&gt;&lt;span style="color: #808030;"&gt;=&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;http://nuget.myserver.com/nuget/NugetFeed&lt;/span&gt;&lt;span style="color: #0000e6;"&gt;"&lt;/span&gt; &lt;span style="color: #a65700;"&gt;/&amp;gt;&lt;/span&gt;  &lt;br /&gt;    &lt;span style="color: #a65700;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #5f5035;"&gt;packageSources&lt;/span&gt;&lt;span style="color: #a65700;"&gt;&amp;gt;&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: #a65700;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="color: #5f5035;"&gt;configuration&lt;/span&gt;&lt;span style="color: #a65700;"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span style="color: #a65700;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;The markup here simply adds the sources that the build server may restore packages from; in this case both &lt;a href="http://nuget.org/"&gt;nuget.org&lt;/a&gt; and our internal site.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;NOTE: &lt;i&gt;there are some pretty slick options when it comes to ProGet which you should look into. &amp;nbsp;You can have your local server act as a proxy for nuget.org and filter out packages with licenses that are incompatible with your environment. &amp;nbsp;Obviously it does not keep a dev from subverting legal requirements by simply including a package with the source commit; but, it can help stop accidental usage.&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;With our config file set up on the build server(s) and the dev environments patched, we can turn our attention back to getting our first package up on the new NuGet server.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Step 3 - Thrift C# Code Generation&lt;/h3&gt;&lt;div&gt;Though its a bit of a tangent to the core of this post, I am going to use the building of the C# classes for a Thrift to HBase connector as the example.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Our first step is to set up a blank, no frills Visual Studio class library project. &amp;nbsp;Once that's up, go into the NuGet Package Manager and import the "Thrift" package by the &lt;i&gt;Apache Software Foundation&lt;/i&gt;. &amp;nbsp;As of the writing of this article the version is &lt;i&gt;0.9.1.3&lt;/i&gt;. &amp;nbsp;There are really only two important things in this package:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;A precompiled Windows Thrift compiler, &lt;i&gt;thrift.exe&lt;/i&gt;.&lt;/li&gt;&lt;li&gt;The &lt;i&gt;Thrift.dll&lt;/i&gt; which you will provide the common implementation code for your thrift interface.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;NOTE: &lt;i&gt;quite obviously, both of these projects are publicly available. &amp;nbsp;Though there is some complexity to compiling them yourself, you could for example, set up Jenkins to poll the github repository, scrape the tags on master, pull the most recent branch, version and build both the compiler and the core thrift.dll, posting the output automatically to your NuGet server. &amp;nbsp;You *COULD* do that; but personally, I would rather just link the existing thrift NuGet package.&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;With the thrift NuGet package pulled into out project we are only missing the base.thrift file from the trunk of the apache HBase project, found &lt;a href="http://svn.apache.org/viewvc/hbase/trunk/hbase-thrift/src/main/resources/org/apache/hadoop/hbase/thrift/Hbase.thrift?view=markup" target="_blank"&gt;here&lt;/a&gt;. &amp;nbsp;Pull this file into a folder in your project, I put it under CodeGen\ThriftFiles. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One stupid note about this file. &amp;nbsp;As with most cross platform GitHub projects the line endings can be nearly random. &amp;nbsp;As of the writing of this post, they are old school Mac '\r', which may or may not screw things up. &amp;nbsp;Regardless, you will see in the code generation script that I normalize the file to Windows' line endings as a precaution.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We will be writing a PowerShell script to accomplish the code generation. &amp;nbsp;You can obviously use what ever you like. &amp;nbsp;I selected PowerShell … &lt;i&gt;because&lt;/i&gt;. &amp;nbsp;Nuff-said and no comments on this from the peanut gallery.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The basic flow of our script is as follows:&lt;/div&gt;&lt;div&gt;&lt;ol&gt;&lt;li&gt;Clean the line endings of the thrift file.&lt;/li&gt;&lt;li&gt;Create the output folder if it does not exist, if it does clean it.&lt;/li&gt;&lt;li&gt;Pass the hbase.thrift file into the thrift compiler and generate the C# classes.&lt;/li&gt;&lt;li&gt;Get the names of all the generated files.&lt;/li&gt;&lt;li&gt;Open the .csproj file, select any existing nodes to remove and add the generated files.&lt;/li&gt;&lt;li&gt;Save the .csproj file.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;NOTE: &amp;nbsp;&lt;i&gt;I do not claim any responsibility for the code I am about to present. &amp;nbsp;As a recent migrant to PowerShell, I am putting myself and my code out there without warranties or promisses that it is either A) written well or B) even remotely how it should be done. &amp;nbsp;I so encourage commentary from the peanut gallery on this, if there is any. &amp;nbsp;I do appreciate learning how things could/should be done correctly.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;Let's start by setting up some variables:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$ErrorActionPreference&lt;/span&gt; = &lt;span style="color: maroon;"&gt;"Stop"&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$TargetDir&lt;/span&gt;             = &lt;span style="color: maroon;"&gt;'.\src\ThriftInterface\autogen\'&lt;/span&gt; &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$ThriftExecutable&lt;/span&gt;      = &lt;span style="color: maroon;"&gt;'.\src\packages\Thrift.0.9.1.3\tools\thrift-0.9.1.exe'&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$HBaseThriftFile&lt;/span&gt;       = &lt;span style="color: maroon;"&gt;'.\src\CodeGeneration\ThriftFiles\hbase.thrift'&lt;/span&gt; &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$Language&lt;/span&gt;              = &lt;span style="color: maroon;"&gt;'csharp'&lt;/span&gt; &lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Fix the line endings in the thrift file as noted earlier:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; (&lt;span style="color: #2b91af;"&gt;Get-Content&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$BaseThriftFile&lt;/span&gt;) |   &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt;          &lt;span style="color: blue;"&gt;Foreach&lt;/span&gt;-Object {   &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;                  &lt;span style="color: #35687d;"&gt;$_&lt;/span&gt; -replace &lt;span style="color: maroon;"&gt;'`r`n'&lt;/span&gt; , &lt;span style="color: maroon;"&gt;'`r'&lt;/span&gt; -replace &lt;span style="color: maroon;"&gt;'`n'&lt;/span&gt; , &lt;span style="color: maroon;"&gt;'`r'&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;          } |   &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;          &lt;span style="color: #2b91af;"&gt;Set-Content&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$BaseThriftFile&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;Create the target output folder if it does not exist, clear its contents either way:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: #2b91af;"&gt;Write-Host&lt;/span&gt; &lt;span style="color: maroon;"&gt;"Checking for existance of $TargetDir"&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; &lt;span style="color: blue;"&gt;if&lt;/span&gt;(!(&lt;span style="color: #2b91af;"&gt;Test-Path&lt;/span&gt; -Path &lt;span style="color: #35687d;"&gt;$TargetDir&lt;/span&gt; )){   &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;     &lt;span style="color: #2b91af;"&gt;Write-Host&lt;/span&gt; &lt;span style="color: maroon;"&gt;"Target does not exist, creating $TargetDir"&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;     &lt;span style="color: #2b91af;"&gt;New-Item&lt;/span&gt; -ItemType directory -Path &lt;span style="color: #35687d;"&gt;$TargetDir&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt; }   &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;    &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt; &lt;span style="color: #2b91af;"&gt;Write-Host&lt;/span&gt; &lt;span style="color: maroon;"&gt;"Clearing contents of $TargetDir"&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$tardir&lt;/span&gt; = &lt;span style="color: #35687d;"&gt;$TargetDir&lt;/span&gt; + &lt;span style="color: maroon;"&gt;'\*.*'&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt;  9&lt;/span&gt; &lt;span style="color: #2b91af;"&gt;Remove-Item&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$tardir&lt;/span&gt; -recurse -force&amp;nbsp;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Pass the cleansed file into the thrift compiler, specify the target language and direct the output:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: #2b91af;"&gt;Write-Host&lt;/span&gt; &lt;span style="color: maroon;"&gt;"Begining code generation phase; output set to $TargetDir"&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$arguments&lt;/span&gt; = &lt;span style="color: maroon;"&gt;"-out $TargetDir --gen $Language $BaseThriftFile"&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt; &lt;span style="color: #2b91af;"&gt;Invoke-Expression&lt;/span&gt; &lt;span style="color: maroon;"&gt;"$ThriftExecutable $arguments"&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt; &lt;span style="color: #2b91af;"&gt;Write-Host&lt;/span&gt; &lt;span style="color: maroon;"&gt;"Finding Auto-generated Code in Directory: $TargetDir"&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$tardir&lt;/span&gt; = &lt;span style="color: #35687d;"&gt;$TargetDir&lt;/span&gt; + &lt;span style="color: maroon;"&gt;'\HBase\*.*'&lt;/span&gt; &lt;span style="color: green;"&gt;# HBase is the namespace  &lt;/span&gt;&lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$autogenFileNames&lt;/span&gt; = &lt;span style="color: #2b91af;"&gt;Get-ChildItem&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$tardir&lt;/span&gt; |    &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;                     &lt;span style="color: blue;"&gt;Where&lt;/span&gt;-Object {&lt;span style="color: #35687d;"&gt;$_&lt;/span&gt;.Extension -eq &lt;span style="color: maroon;"&gt;".cs"&lt;/span&gt;} &lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Read the .csproj file into a variable:&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$proj&lt;/span&gt; = [xml](&lt;span style="color: #2b91af;"&gt;get-content&lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;                 (&lt;span style="color: #2b91af;"&gt;Resolve-Path&lt;/span&gt; &lt;span style="color: maroon;"&gt;'.\src\ThriftInterface\ThriftInterface.csproj'&lt;/span&gt;))&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Typically most project files only have one compile Item Group definition. &amp;nbsp;We will want access to that node later for the additions, so select it into a variable. &amp;nbsp;Then find any existing auto-generated file nodes and remove them.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$ParentNode&lt;/span&gt; =  &lt;span style="color: #35687d;"&gt;$proj&lt;/span&gt;.Project.ItemGroup.Compile.ParentNode | &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt;                &lt;span style="color: #2b91af;"&gt;Select-Object&lt;/span&gt; -First &lt;span style="color: maroon;"&gt;1&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$removeElements&lt;/span&gt; = &lt;span style="color: #35687d;"&gt;$proj&lt;/span&gt;.Project.ItemGroup.Compile |  &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;                   ? { &lt;span style="color: #35687d;"&gt;$_&lt;/span&gt;.Include -Match &lt;span style="color: maroon;"&gt;"autogen"&lt;/span&gt; }&lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt; &lt;span style="color: blue;"&gt;if&lt;/span&gt; (&lt;span style="color: #35687d;"&gt;$removeElements&lt;/span&gt;) { &lt;span style="color: #35687d;"&gt;$removeElements&lt;/span&gt; | &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;                        % { &lt;span style="color: #35687d;"&gt;$_&lt;/span&gt;.ParentNode.RemoveChild(&lt;span style="color: #35687d;"&gt;$_&lt;/span&gt;) } &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt;                      } &lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Finally, we want to loop the folder where the compiler put the generated code, add those files into the compile item group and save the project file.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: blue;"&gt;foreach&lt;/span&gt; (&lt;span style="color: #35687d;"&gt;$fileName&lt;/span&gt; &lt;span style="color: blue;"&gt;in&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$autogenFileNames&lt;/span&gt;.Name) {  &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt;          &lt;span style="color: #35687d;"&gt;$xmlElt&lt;/span&gt; = &lt;span style="color: #35687d;"&gt;$proj&lt;/span&gt;.CreateElement(&lt;span style="color: maroon;"&gt;"Compile"&lt;/span&gt;, &lt;span style="color: #35687d;"&gt;$nameSpace&lt;/span&gt;)   &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt;          &lt;span style="color: #35687d;"&gt;$xmlAtt&lt;/span&gt; = &lt;span style="color: #35687d;"&gt;$proj&lt;/span&gt;.CreateAttribute(&lt;span style="color: maroon;"&gt;"Include"&lt;/span&gt;)   &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;          &lt;span style="color: #35687d;"&gt;$xmlAtt&lt;/span&gt;.Value = &lt;span style="color: maroon;"&gt;"autogen\Hbase\$fileName"&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt;          &lt;span style="color: #35687d;"&gt;$xmlElt&lt;/span&gt;.Attributes.Append(&lt;span style="color: #35687d;"&gt;$xmlAtt&lt;/span&gt;)  &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;          &lt;span style="color: #35687d;"&gt;$ParentNode&lt;/span&gt;.AppendChild(&lt;span style="color: #35687d;"&gt;$xmlElt&lt;/span&gt;)  &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt; }   &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt;    &lt;br /&gt;&lt;span style="color: teal;"&gt;  9&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$proj&lt;/span&gt;.Save((&lt;span style="color: #2b91af;"&gt;Resolve-Path&lt;/span&gt; &lt;span style="color: maroon;"&gt;".\src\ThriftInterface\ThriftInterface.csproj"&lt;/span&gt;))   &lt;br /&gt;&lt;span style="color: teal;"&gt; 10&lt;/span&gt; exit &lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So there you have it. &amp;nbsp;In 30 lines of code we have converted a .thrift file into a functioning Visual Studio Project!&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;h3&gt;Step 4 - Script NuGet Package Creation&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;Our next task is to create a light script that can wrap up our project into a NuGet package. This requires all of about 8 lines of code.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$ErrorActionPreference&lt;/span&gt; = &lt;span style="color: maroon;"&gt;"Stop"&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt;  2&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$curpath&lt;/span&gt;= &lt;span style="color: maroon;"&gt;".\src\ThriftInterface\"&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt;  3&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$projectName&lt;/span&gt;= &lt;span style="color: maroon;"&gt;"ThriftInterface.csproj"&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt;  4&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt;  5&lt;/span&gt; NuGet Pack &lt;span style="color: maroon;"&gt;"$curpath$projectName"&lt;/span&gt; -Properties Configuration=Release -OutputDirectory &lt;span style="color: #35687d;"&gt;$curpath&lt;/span&gt; &lt;br /&gt;&lt;span style="color: teal;"&gt;  6&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt;  7&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$package&lt;/span&gt; = @(&lt;span style="color: #2b91af;"&gt;Get-ChildItem&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$curpath&lt;/span&gt; -include *.nupkg -recurse | &lt;span style="color: #2b91af;"&gt;Sort-Object&lt;/span&gt;)  &lt;br /&gt;&lt;span style="color: teal;"&gt;  8&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$key&lt;/span&gt; = &lt;span style="color: maroon;"&gt;"*********************"&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt;  9&lt;/span&gt;  &lt;br /&gt;&lt;span style="color: teal;"&gt; 10&lt;/span&gt; nuget push -Source &lt;span style="color: maroon;"&gt;"http://nuget.myserver.com/nuget/TreNugetFeed"&lt;/span&gt; &lt;span style="color: #35687d;"&gt;$package&lt;/span&gt;[-&lt;span style="color: maroon;"&gt;1&lt;/span&gt;] &lt;span style="color: #35687d;"&gt;$key&lt;/span&gt;   &lt;br /&gt;&lt;span style="color: teal;"&gt; 11&lt;/span&gt; exit  &lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The script sets up some locals, runs &lt;i&gt;nuget pack&lt;/i&gt; on the project with the proper build settings and calls &lt;i&gt;nuget push&lt;/i&gt; on the package with the Api key to the NuGet server url. &lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Step 5 - Put It All Together With Jenkins&lt;/h3&gt;Final step here is to wrap the whole project up with a Jenkins job. &amp;nbsp;We need to commit our project shell to source control: Git/HG/SVN. Whatever works. &amp;nbsp;All of our projects include a moderately stock Nant script that sets up package structure for the binaries; which we will run in this example. &amp;nbsp;Even though the NuGet script in Step 4 also performs a build, the Nant build will generate the artifacts for the binary repository. &amp;nbsp;And there is no real issue with building it twice.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-EEf0j0jnxwU/U1xKbc12VQI/AAAAAAAAASQ/MLlSfDhzNpQ/s1600/SnipImage.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://4.bp.blogspot.com/-EEf0j0jnxwU/U1xKbc12VQI/AAAAAAAAASQ/MLlSfDhzNpQ/s1600/SnipImage.JPG" height="286" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Under the build in Jenkins we will configure the execution of out code generation script. &amp;nbsp;Since the PowerShell script is not yet signed, we need to set the execution policy to unrestricted. &lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; powershell.exe -command -&lt;span style="color: #2b91af;"&gt;set-executionpolicy&lt;/span&gt; unrestricted   &lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Follow that up with a call to restore the Thrift NuGet package we included in the Visual Studio Project.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; nuget.exe -restore .\src\ThriftInterface.sln&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This call will ensure that we have the compiler and thrift core dll on hand for the code generation and build steps. &amp;nbsp;With everything in place we can call out code generation script and follow that with the Nant build.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; .\src\CodeGeneration\CodeGen.ps1 &lt;/pre&gt;&lt;br /&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div&gt;Assuming compilation success we can add a post build task to run our NuGet packaging script.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-Nui9a7M0oKM/U1xMucveXJI/AAAAAAAAASc/22pxsb0qsyw/s1600/SnipImage+copy.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-Nui9a7M0oKM/U1xMucveXJI/AAAAAAAAASc/22pxsb0qsyw/s1600/SnipImage+copy.JPG" height="276" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;Again we need to set the environment execution policy to unrestricted.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; powershell.exe -command -&lt;span style="color: #2b91af;"&gt;set-executionpolicy&lt;/span&gt; unrestricted  &lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And finally call our NuGet packaging script.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;pre&gt;&lt;span style="color: teal;"&gt;  1&lt;/span&gt; .\deployment_scripts\nuget_package.ps1&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;With everything set up, save the configuration, scroll back to the top of your Jenkin job, and press the magical "&lt;i&gt;build now&lt;/i&gt;" button. &amp;nbsp;With luck on your side you should be able to browse your NuGet server and see your new package.&lt;br /&gt;&lt;br /&gt;There will likely be an upcoming post that builds upon this one, delving into creating a Linq provider on top of the HBase thrift lib generated here. &amp;nbsp;Feel free to comment here or ping me on Twitter&amp;nbsp;&lt;a href="https://twitter.com/williamberryiii" target="_blank"&gt;@williamberryiii&lt;/a&gt; with questions.&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/3115882263462139722/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/04/nuget-code-generation-jenkins-thrift-hbase.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3115882263462139722'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3115882263462139722'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/04/nuget-code-generation-jenkins-thrift-hbase.html' title='NuGet Servers, HBase, Thrift Code Generation and one sweet Jenkins CI Build'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-xzJFMfVgMs8/U1wpZjkQvyI/AAAAAAAAARw/2nhM2agjsLQ/s72-c/SnipImage+copy+4.JPG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-4408688775305329595</id><published>2014-04-12T14:50:00.004-07:00</published><updated>2014-04-12T20:23:46.833-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Building Teams'/><category scheme='http://www.blogger.com/atom/ns#' term='Interviewee'/><category scheme='http://www.blogger.com/atom/ns#' term='Interviews'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Interviewer'/><category scheme='http://www.blogger.com/atom/ns#' term='Behavioral Interview Questions'/><title type='text'>The Interview - Part I</title><content type='html'>Every few months a new article on interviewing or on being the interviewee goes viral, finding its 10 minutes of fame; I hope this one is no exception. &amp;nbsp;Interview articles often focus on what kinds of questions will be asked or inside lines on how to answer behavioral questions, etc. etc. &amp;nbsp;For the most part, all of it is crap. &amp;nbsp;Most interviews are crap. &amp;nbsp;Most managers and team members don't know how to interview for their teams and most prospective employees don't understand their part in the encounter. &amp;nbsp;Hell, these days getting to the interview at a large corporation is less about who you are and more about your resume's SEO. &amp;nbsp;What follows is the first in a series about interviewing, being interviewed, and team building/development.&lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br /&gt;Over the years I have worked to develop the "un-interview." &amp;nbsp;It goes a little something like this:&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;I walk into the room, extend a firm hand shake and wait for the interviewee to introduce themselves.&amp;nbsp;&lt;/blockquote&gt;&lt;blockquote class="tr_bq"&gt;Interviewee: &amp;nbsp;Hi I am &lt;u&gt;(fill in the blank)&lt;/u&gt;.&lt;br /&gt;Me: &amp;nbsp; Hi, I am Bill. (pause) Have a set. Let's get started.&lt;/blockquote&gt;We are 15 seconds into the interview and this is my first chance to get a feel for how things are going to proceed. &amp;nbsp;The binary tree is, Interviewee is nervous or Interviewee is not nervous; but they are actually a bit nervous, unless they plain don't want to be there. &amp;nbsp;If its clear they don't want to be there, I will spend 15 minutes tops and end it; I have crap to do. &amp;nbsp;For the sake of having a post to write, let's focus on the nervous and slightly nervous interviewees. &lt;br /&gt;&lt;br /&gt;First goal is to make them comfortable, and the easiest way to do that is to talk. &amp;nbsp;I spend between 5 and 10 minutes covering the following points:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;What I do for the company&lt;/li&gt;&lt;li&gt;How long have I been in my current position, and the path I took to get here.&lt;/li&gt;&lt;li&gt;What are some of the things that the company does well.&lt;/li&gt;&lt;li&gt;What's the biggest challenge that I have had to overcome while working at XYZ&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Since I am on home turf and have the power in the room, this conversation time will help even the playing field. &amp;nbsp;The goal here is to provide context to the interviewee that can be leveraged later in the process. &amp;nbsp;I will discuss what the company does in detail later; so for this first segment, I keep the point meaningful, but somewhat innocuous.&lt;br /&gt;&lt;br /&gt;The final bullet, the challenge story, is something that people can relate to. &amp;nbsp;I typically rely on one of my handful of screw ups where I thought for sure I was going to be fired; like pack a box fired. &amp;nbsp;And yes, I admit I have felt this way on more than one occasion. &amp;nbsp;I would wager that most people have a hard time being this honest and airing their dirty laundry with someone they just met; if you can, your risk will almost always be rewarded.&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;Me: &amp;nbsp;My point is to set the stage for you and give you a feel for life here. &amp;nbsp;Both the positive and negative sides. &amp;nbsp;So can you tell me a bit about where you're at right now?&lt;/blockquote&gt;In every case where I have ended up with someone that I truly enjoy working with, this question has been the turning point in the interview. &amp;nbsp;It's where things pushes past the usual formalities and on to an honest and open conversation. &amp;nbsp;With this question, you will find out if the interviewee is involved in drama at their current company, has some difficult to manage baggage, or perhaps even better, has a story that you or a co-worker can sympathize with. &amp;nbsp;Sympathize, not empathize … thats key here. &amp;nbsp;If you find a connection at this juncture, explore it with them. &amp;nbsp;You don't need to dig deep or make things overtly personal. &amp;nbsp;This is your opportunity to listen and let them openly tell a story.&lt;br /&gt;&lt;br /&gt;Too many interviewers love asking the behavioral questions. &amp;nbsp;Don't get me wrong, they can be a powerful tool to learn more about someone. &amp;nbsp;The problem is that if the context is not established correctly, an adequate amount of intimacy developed, the answers you are going to get will be shallow and meaningless. &amp;nbsp;By breaking the barriers down and getting personal, you can get past the bullshit answer that both of you know is coming:&lt;br /&gt;&lt;blockquote class="tr_bq"&gt;Interviewee: &amp;nbsp;Oh there was this person in the department that was really hard to work with and blah, blah, blah...&lt;/blockquote&gt;Without the intimacy, this interaction and further behavioral questions are useless, and a waste of time. &amp;nbsp;I don't interview for stock answers and and neither should you. &amp;nbsp;If you are guilty of this … for everyone's sake, stop.&lt;br /&gt;&lt;br /&gt;At this juncture it's possible that I am not feeling positive about the candidate or could not solidify the intimacy enabling them to open up. &amp;nbsp;Thats OK. &amp;nbsp;Regardless, I favor pivoting to topics like hobbies, or where are they living now. &amp;nbsp;This shift can be more natural if you have some background information on the interviewee. &amp;nbsp;Either way, the goal is to either cool off a deep conversation or tease things along until you can find some common ground again.&lt;br /&gt;&lt;br /&gt;After the reset, I will turn focus back to the company and the team. &amp;nbsp;Give details about what the company does and how it works. &amp;nbsp;Talk team structure. &amp;nbsp;Organizational structure. &amp;nbsp;Tenure of employees. &amp;nbsp;Hours per week. Length of projects. &amp;nbsp;Time off, flexible work hours, etc. While I can hope that the interviewee has done research about the company, it is unlikely that they will know this level of detail about how we actually operate. &amp;nbsp;I do not offer HR level specifics; but rather, my personal take on these values and thresholds. &amp;nbsp;Additionally, interviewees will often plainly forget to ask for this crucial data. &amp;nbsp;Once these topics are laid out, I ask the interviewee how it compares to their current situation. &lt;br /&gt;&lt;blockquote class="tr_bq"&gt;Me: &amp;nbsp;Given how we work, our organization and everything, how does this fit with your experiences and does it sound like we might be a fit for you?&lt;/blockquote&gt;Again, I have used talking time to bring intimacy back to the conversation. &amp;nbsp;With this question, I am engaging and empowering the interviewee to do "on the spot analysis" and cognitive pattern recognition. &amp;nbsp;I am looking to see if they can they quickly intake an understanding of our process (listen), compare/contrast that with their experiences (analyze) and communicate their analysis back to me. &amp;nbsp;Additionally, I am getting more information about how they like to work, which can help my analysis of their fit into the organization and the team. &lt;br /&gt;&lt;br /&gt;As we near the end of the interview I open things back up by peppering the interviewee with a flurry of short questions:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Do you think you can manage the commute/hours/stress level?&lt;/li&gt;&lt;li&gt;Does the work seem interesting to you?&lt;/li&gt;&lt;li&gt;Given what I have told you about the team do you think you can fit in?&lt;/li&gt;&lt;li&gt;Can you show up everyday and ...&lt;/li&gt;&lt;ol&gt;&lt;li&gt;Learn something new?&lt;/li&gt;&lt;li&gt;Teach something new?&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;Do you think you have skills, and energy to really sink your teeth into this opportunity?&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Asking these questions with an upbeat and aggressive cadence will reveal wether or not the candidate is engaged, and excited about the opportunity. &amp;nbsp;If the interviewee has bitten and is excited, I end the interview with my gut instinct, telling them I hope to see them around the halls. &amp;nbsp;If I am not excited then I will not be mean; but, I will be honest. &amp;nbsp;I will tell them that I appreciated the opportunity to meet them and wish them luck on their journey. &amp;nbsp;Even though I am not typically the one making the final decision, revealing these subtle clues can help the interviewee gage how they performed. &lt;br /&gt;&lt;br /&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;/div&gt;&lt;br /&gt;With the interview out of the way, lets discuss the thought that's probably crossed your mind. &amp;nbsp;I never asked a single technical question. &amp;nbsp;Let me repeat that in &lt;i&gt;italics&lt;/i&gt; and in &lt;b&gt;bold&lt;/b&gt; for emphasis, &lt;i&gt;&lt;b&gt;I never asked a single technical question&lt;/b&gt;&lt;/i&gt;. &amp;nbsp;This is true of 80-90% of the interviews I do. &amp;nbsp;Write me off as being crazy; but, I have a few reasons as to why this works great in the end. &lt;br /&gt;&lt;br /&gt;Put a person in a room for a few hours to be grilled by random strangers about their past, present and future selves and even smart, amazing people choke on the simplest of technical questions. &amp;nbsp;Why? &amp;nbsp;For the same reasons that we all hate being interrupted when in the "flow" zone. &amp;nbsp;It takes times to center one's self, get into a technical mindset and really engage. &amp;nbsp;If you can't work with perpetual context switching, why subject a candidate to it during the interview process?&lt;br /&gt;&lt;br /&gt;Running a technical interview requires a commitment on the interviewers part to structure it, provide a smooth entry and easy grading up to the difficult complex topics. &amp;nbsp;Think about how you learn, how you like to work, and structure the interview to give the candidate the best opportunity to succeed. &amp;nbsp;Anything less, and no one wins. &amp;nbsp;The interviewee gets stressed, they can't put their best foot forward and you completely miss an opportunity to hire an ace. &amp;nbsp;That's not their fault, it's yours. &lt;br /&gt;&lt;br /&gt;Building a technical interview curriculum is challenging and a lot of work. &amp;nbsp;Additionally, if it requires a deep understanding of the domain or the business, there is honestly zero chance of success with the approach. &amp;nbsp;One simply cannot get a candidate up to speed, fairly, to truly gage their aptitude. &amp;nbsp;This is why I try to focus purely on behavioral and emotional interviewing after establishing a relationship with the interviewee.&lt;br /&gt;&lt;br /&gt;In my experience, successful employees fit the team based on a few key factors: ability to listen, fair to decent communication skills, learning new things, teaching new things, and most importantly, emotional intelligence. &amp;nbsp;Pretty much everything else can be taught. &amp;nbsp;The point of this interview style is to reveal the candidate's capabilities in these key areas. &lt;br /&gt;&lt;br /&gt;With all that said, there are some drawbacks to this approach:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;It requires a one on one interview format. &amp;nbsp;If I have other people in the room, I won't be able to build the intimacy.&lt;/li&gt;&lt;li&gt;It is easy to fall into it; but, do not be manipulative. &amp;nbsp;One has just a handful of moments to model a candidate. &amp;nbsp;Being anything other than open and honest with them, will just serve to cloud your judgement and analysis. &amp;nbsp;&lt;/li&gt;&lt;li&gt;Finding the right fit for a team is also a two way street. &amp;nbsp;So few people focus on selling the company, the team and making sure that the candidate feels like they belong there. &amp;nbsp;Don't hire someone on false pretenses - make sure they are as committed to the relationship as you.&lt;/li&gt;&lt;li&gt;Have fun. &amp;nbsp;Interviewing and being an interviewee is a stressful interaction. &amp;nbsp;I repeat &lt;b&gt;&lt;i&gt;have fun&lt;/i&gt;&lt;/b&gt;. &amp;nbsp;Remember you are looking for someone to spend 40 hours of your week with, week after week, month after month, year after year. Make it count.&lt;/li&gt;&lt;/ul&gt;Happy Interviewing.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/4408688775305329595/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/04/emotional-and-behavioral-interviewing.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4408688775305329595'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4408688775305329595'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/04/emotional-and-behavioral-interviewing.html' title='The Interview - Part I'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-2035901833013767715</id><published>2014-04-02T21:44:00.002-07:00</published><updated>2014-04-02T21:44:52.228-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Learning'/><category scheme='http://www.blogger.com/atom/ns#' term='Functional Programming'/><title type='text'>Mental Contention - The Fight to Keep Learning</title><content type='html'>You are in your mid thirties, wife, kid, home, great job, everything is humming right along, and yet … you are stymied in a micro existential crisis.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I have been battling a faux crisis lately. &amp;nbsp;One that is completely self-manufactured and despite a healthy dose of reality from the wife and father, I am still slogging through this one … the root cause: functional programming. &amp;nbsp;That's a little unfair, it was actually functional programming that pushed me over the edge; but, I was headed to the cliff long before. &amp;nbsp;The image below is the foundation of my issues:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://3.bp.blogspot.com/-0orXoTiWQ1M/Ut83pB1wUDI/AAAAAAAAARU/OTXimPPQ4SE/s1600/photo.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://3.bp.blogspot.com/-0orXoTiWQ1M/Ut83pB1wUDI/AAAAAAAAARU/OTXimPPQ4SE/s1600/photo.JPG" height="240" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Not only do I have a dozen projects going at work; but, I am relentlessly studying just as many subjects at home. &amp;nbsp;The above is just part of the stack of this years commitment to be a better programmer, engineer, &amp;amp; architect. &amp;nbsp;And what's missing from the above photo are the online lectures, conferences, the endless stream of white papers, blog posts, tweets, &amp;amp; podcasts. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Over the last few months, I have slowly ramped up to, and finally hit, peak bandwidth … it's infuriating. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;div style="text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;This post was abandonded a few weeks ago in shear frustration over the topic. &amp;nbsp;I let things percolate, and have had a breakthrough on the topic. &amp;nbsp;Solution: focused curriculum.&lt;/div&gt;&lt;div style="text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="text-align: left;"&gt;In school we are guided through topics, perhaps not at the pace or on the path that best suits us; but, we are guided nonetheless. &amp;nbsp;When self guided, our meandering path becomes an immense tree structure with "shiny" around every turn. &lt;br /&gt;&lt;br /&gt;Since I was initially derailed by F#, I dropped it all. &amp;nbsp;The jQuery and web development, domain driven design, and even the database books are closed so I can focus all my attention on F# and functional programming. &amp;nbsp;While I am not necessarily learning more information, the learning is going deeper, at a relaxed and consistent pace. &lt;br /&gt;&lt;br /&gt;A couple of nights a week, I set out D. Syme's Expert F# and Petricek's Real World Functional Programming, and for now just type code. &amp;nbsp;Low stress, low energy; time just spent teaching the fingers how to type the language. &amp;nbsp;The twitter feed is tuned for all things F# and I have bulked up the feedly list with the blogs of some keep functional players.&lt;br /&gt;&lt;br /&gt;So whats this whole post about? &amp;nbsp;Just a message to myself to slow down. &amp;nbsp;This is a journey and I don't have to do it all at once. &amp;nbsp;That's all.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/2035901833013767715/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/04/mental-contention-fight-to-keep-learning.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2035901833013767715'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/2035901833013767715'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/04/mental-contention-fight-to-keep-learning.html' title='Mental Contention - The Fight to Keep Learning'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://3.bp.blogspot.com/-0orXoTiWQ1M/Ut83pB1wUDI/AAAAAAAAARU/OTXimPPQ4SE/s72-c/photo.JPG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-3714222670181888913</id><published>2014-03-28T06:00:00.000-07:00</published><updated>2014-03-28T07:56:33.682-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Architecture'/><category scheme='http://www.blogger.com/atom/ns#' term='This Old House'/><category scheme='http://www.blogger.com/atom/ns#' term='Engineering'/><title type='text'></title><content type='html'>Last night's &lt;a href="https://twitter.com/search?q=%23ArchitectureMadeEasy&amp;amp;src=typd" target="_blank"&gt;#ArchitectureMadeEasy&lt;/a&gt; tweet included a wonderful little video from the &lt;a href="http://www.thisoldhouse.com/toh/" target="_blank"&gt;This Old House&lt;/a&gt; series.&lt;br /&gt;&lt;blockquote class="twitter-tweet" lang="en"&gt;Announcing my new &lt;a href="https://twitter.com/search?q=%23tweetumentary&amp;amp;src=hash"&gt;#tweetumentary&lt;/a&gt; software architecture series &lt;a href="https://twitter.com/search?q=%23ArchitectureMadeEasy&amp;amp;src=hash"&gt;#ArchitectureMadeEasy&lt;/a&gt;!  &lt;a href="http://t.co/SqaNCbBmCC"&gt;http://t.co/SqaNCbBmCC&lt;/a&gt;&lt;br /&gt;— William Berry (@williamberryiii) &lt;a href="https://twitter.com/williamberryiii/statuses/449390498243821570"&gt;March 28, 2014&lt;/a&gt;&lt;/blockquote&gt;&lt;script async="" charset="utf-8" src="//platform.twitter.com/widgets.js"&gt;&lt;/script&gt; In this medium length clip, we learned how to add a small deck off of our mud room or kitchen, that includes a few stairs down to grade. &amp;nbsp;This clip is the perfect analogy for cutting a new feature into an existing piece of software.&lt;br /&gt;&lt;br /&gt;Our work begins by laying out and assembling the rough framework to support our feature. &amp;nbsp;We identify the key components, prepare the rough outline, test the interconnects and assemble. &amp;nbsp;With our feature rough framed, we turn our attention to preparing the house, or in this case the base software package for the new feature. &amp;nbsp;Thoroughly, inspect the contact surface for rot/technical debt. &amp;nbsp;We want to make sure that the interface to our new feature is clean and free of potential defect. &amp;nbsp;Using the interface, couple your new feature's base framework to the existing software and fasten securely. &amp;nbsp;With the framework in place we can begin to fill in the remainder of the project.&lt;br /&gt;&lt;br /&gt;If your new feature acts as stairs or a transition to another system or feature, turn your focus to that interface and begin to work the connections back toward your new framework; think of this as your newel posts and stringers from the ground back to your deck's framework. &amp;nbsp;Using the same interface preparation methodologies noted before, make any adaptions necessary to ensure a defect free coupling.&lt;br /&gt;&lt;br /&gt;Cut out each sub-module and test it throughly before fitting it to the base feature framework. &amp;nbsp;You will likely find some small adjustments to make as you perform the final fitting. &lt;br /&gt;&lt;br /&gt;Remember that architecture is more than just applying patterns, it's developing a process, one that works for you and the team as a whole.&lt;br /&gt;&lt;br /&gt;I hope you enjoyed last night's tweet. &amp;nbsp;Follow the #ArchitectureMadeEasy hashtag on Twitter and this blog for the followup commentary.&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/3714222670181888913/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/03/last-nights-architecturemadeeasy-tweet.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3714222670181888913'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/3714222670181888913'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/03/last-nights-architecturemadeeasy-tweet.html' title=''/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-4061020750673606211</id><published>2014-02-25T23:21:00.004-08:00</published><updated>2014-02-25T23:23:19.686-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><title type='text'>LINQ Sequential Selects for Conditional Joins</title><content type='html'>I just finished a block of code that, while not ground breaking, is well worth recording. &amp;nbsp;The problem setup is:&lt;br /&gt;&lt;br /&gt;List&amp;lt;Foo&amp;gt; and List&amp;lt;Bar&amp;gt; conditionally joined to produce List&amp;lt;T&amp;gt;&lt;br /&gt;&lt;br /&gt;What data we join on, however, is conditional on a property x of Foo being in List&amp;lt;Bar&amp;gt;. &amp;nbsp;Let's get a bit more concrete with our example since I hate completely abstract examples.&lt;br /&gt;&lt;br /&gt;I have a List&amp;lt;AppetizerItems&amp;gt;, my wife has a List&amp;lt;DinnerItems&amp;gt;. &amp;nbsp;So lets put together our List&amp;lt;possibleMenu&amp;gt; with a few caveats. &amp;nbsp;We would like to only go shopping at one store, be able to set the oven to one temperature and if the appetizer has has a wine, it would be nice if the dinner and appetizer shared the same color wine (i.e. red, white, rose, etc.).&lt;br /&gt;&lt;br /&gt;var menu = appetizerItems&lt;br /&gt;&amp;nbsp; &amp;nbsp; .Where( appetizerItem =&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dinnerItems.Any(&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dinnerItems =&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dinnerItems.Store == appetizerItem.Store&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; dinnerItems.OvenTemperature == appetizerItem.OvenTemperature&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; )&lt;br /&gt;&amp;nbsp; &amp;nbsp; .Select( appetizerItem =&amp;gt; new&lt;br /&gt;&amp;nbsp; &amp;nbsp; {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; appetizerItem,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dinnerItem = (&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; dinnerItems.Any(di =&amp;gt; di.HasWine == appetizerItem.HasWine&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ? dinerItems.First(di =&amp;gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; di.Store == appetizerItem.Store&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; di.OvenTemperature == appetizerItem.OvenTemperature&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; di.GrapeColor == appetizerItem.GrapeColor&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; )&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; : &amp;nbsp;dinnerItems.First(di =&amp;gt; &lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; di.Store == appetizerItem.Store&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;amp;&amp;amp; di.OvenTemperature == appetizerItem.OvenTemperature&lt;br /&gt;&amp;nbsp; &amp;nbsp; })&lt;br /&gt;&amp;nbsp; &amp;nbsp; .Select(possibleMenu =&amp;gt; &amp;nbsp;new&lt;br /&gt;&amp;nbsp; &amp;nbsp; {&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;possibleMenu.appetizerItem.AppetizerItems,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;possibleMenu.dinnerItem.DinnerItems,&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ...&lt;br /&gt;&amp;nbsp; &amp;nbsp; });&lt;br /&gt;&lt;br /&gt;As you can see, we have managed to do a conditional join via anonymous object composition and sequential selects.</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/4061020750673606211/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/02/linq-sequential-selects-for-conditional.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4061020750673606211'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/4061020750673606211'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/02/linq-sequential-selects-for-conditional.html' title='LINQ Sequential Selects for Conditional Joins'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-1864935213967930309</id><published>2014-02-10T21:58:00.000-08:00</published><updated>2014-02-10T22:01:54.241-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Kiln'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='SCM'/><category scheme='http://www.blogger.com/atom/ns#' term='Build Pipeline'/><category scheme='http://www.blogger.com/atom/ns#' term='Mercurial'/><category scheme='http://www.blogger.com/atom/ns#' term='Jenkins'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><category scheme='http://www.blogger.com/atom/ns#' term='Web Hooks'/><title type='text'>A CI Migration Part III - Kiln, Jenkins &amp; Web Hooks</title><content type='html'>For better or worse, the SCM I work with is Mercurial provided through Fogbugz' Kiln. &amp;nbsp;Yeah I know it's not GitHub, but I was ignorant of that decision as it was being made so, yeah. &amp;nbsp;Reviews, complaints, flamewars aside, working with it has not been bad and it has a reasonable feature set. &amp;nbsp;Of note is the ability to program web hooks to fire on a push to a repository. &lt;br /&gt;&lt;br /&gt;Configuring web hooks in Kiln is super easy and covered well in their online help&amp;nbsp;&lt;a href="http://help.fogcreek.com/8111/web-hooks-integrating-kiln-with-other-services"&gt;here&lt;/a&gt;. &amp;nbsp;For our integration we will be using a custom web hook; in you admin panel select web hooks and a new hook for all repositories.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;a href="http://1.bp.blogspot.com/-Ld73hmNt4KE/UrE7rPQARHI/AAAAAAAAAQI/hjjJxaFxV10/s1600/SnipImage.JPG" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" src="http://1.bp.blogspot.com/-Ld73hmNt4KE/UrE7rPQARHI/AAAAAAAAAQI/hjjJxaFxV10/s320/SnipImage.JPG" height="313" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both;"&gt;&lt;br /&gt;&lt;/div&gt;Once configured, Kiln will fire off a blob of JSON for a waiting web service to do something with. &amp;nbsp;We will primarily be interested in the pusher data, the repository group and the repository in the web hook data, though there is a wealth of other potentially relevant data. &amp;nbsp;We currently only use one master hook that listens for commits on all repository groups; primarily because the Jenkins Job Manager, covered in my &lt;a href="http://www.lucidmotions.net/2013/12/a-ci-migration-part-ii-convention-over.html"&gt;second article on CI migrations&lt;/a&gt;, filters an parses for relevant build related tasks.&lt;br /&gt;&lt;br /&gt;That said one should consider that there are endless possibilities for this information. &amp;nbsp;Consider the things we could do with web hooks:&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Trigger feature branch builds (as discussed).&lt;/li&gt;&lt;li&gt;Keep a permanent log of commits by dev (regardless of feature branch destruction)&lt;/li&gt;&lt;li&gt;Trigger round robin code reviews - good to give team members exposure to new elements.&lt;/li&gt;&lt;li&gt;Send Chrome notification to dev to get up and walk around.&lt;/li&gt;&lt;li&gt;Put pusher in the waiting room for next foosball game.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Point being that once you have the data starting to work for you, the enterprise comes alive. &amp;nbsp;It is all about a loosely coupled, woven fabric of services and event streams working in a coordinated way to make everyone's life a little easier and more fun.&amp;nbsp;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/1864935213967930309/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/02/a-ci-migration-part-iii-kiln-jenkins.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1864935213967930309'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/1864935213967930309'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/02/a-ci-migration-part-iii-kiln-jenkins.html' title='A CI Migration Part III - Kiln, Jenkins &amp; Web Hooks'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://1.bp.blogspot.com/-Ld73hmNt4KE/UrE7rPQARHI/AAAAAAAAAQI/hjjJxaFxV10/s72-c/SnipImage.JPG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-8053727212155658560</id><published>2014-01-08T22:03:00.001-08:00</published><updated>2014-01-08T22:03:29.435-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Artifactory'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='NTLM'/><category scheme='http://www.blogger.com/atom/ns#' term='Continuous Integration'/><category scheme='http://www.blogger.com/atom/ns#' term='Jenkins'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><category scheme='http://www.blogger.com/atom/ns#' term='Window&apos;s Authentication'/><category scheme='http://www.blogger.com/atom/ns#' term='IIS'/><title type='text'>IIS getting in the way of a beautiful Jenkins and Artifactory Engagement </title><content type='html'>My Jenkins installation had turned into a bit of a saga lately. &amp;nbsp;I have been interested in trying out &lt;a href="http://www.jfrog.com/home/v_artifactory_opensource_overview"&gt;Artifactory&lt;/a&gt; by JFrog to store not only our produced binaries; but, additionally to proxy external dependancies and provide a host for general software used across the enterprise.&lt;br /&gt;&lt;br /&gt;Most of the installation went pretty well, pulled a fresh JDK and JRE on the machine and ran the Installer.bat. &amp;nbsp;With the service up and running, I added some detailed connection information to the Tomcat config so that the Artifactory install would not conflict with the Jenkins install; namely to have it listen on localhost and an alternate port.&lt;br /&gt;&lt;br /&gt;As with the Jenkins installation, I created a proxy site with a URL rewrite, added NTLM Windows authentication, and updated the engineer's GPO to include the new url 'artifactory.host.domain.com'. &amp;nbsp;A few 'gpupdate /forces' and the new Artifactory site was up and running with auto-login.&lt;br /&gt;&lt;br /&gt;I created a repository for our main SaaS product and turned my focus to Jenkins.&lt;br /&gt;&lt;br /&gt;In Jenkins, I was able to quickly add the artifactory plugin and begin the process of wiring Jenkins to Artifactory. &amp;nbsp;Unfortunately, I have slammed solidly into a brick wall with an issue.&lt;br /&gt;&lt;br /&gt;When I attempt to test the connection from Jenkins to Artifactory via the Jenkins plugin, I get an 'unauthorized' exception. &amp;nbsp;Checking the service logs for Artifactory in IIS, I see requests arriving from Jenkins without any authentication information. &amp;nbsp;I would expect that IIS would respond to the authentication challenge from the Artifactory site with the application pools identity and properly negotiate. &amp;nbsp;In this case that is not happening. &lt;br /&gt;&lt;br /&gt;Since Jenkins and Artifactory are on the same host, I could reroute Jenkins to the localhost ip and bypass the NTLM authentication; but, then all my URLs for the links in Jenkins to Artifactory would have URLs that are inaccessible to human users.&lt;br /&gt;&lt;br /&gt;At this point I do not have a solution. &amp;nbsp;So if anyone reading this wants to chime in with any ideas … feel free to tell me I am doing it all wrong in the comments.</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/8053727212155658560/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2014/01/iis-getting-in-way-of-beautiful-jenkins.html#comment-form' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/8053727212155658560'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/8053727212155658560'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/01/iis-getting-in-way-of-beautiful-jenkins.html' title='IIS getting in the way of a beautiful Jenkins and Artifactory Engagement '/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-6813295856311367397</id><published>2013-12-29T00:26:00.000-08:00</published><updated>2013-12-30T00:11:55.114-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Automation'/><category scheme='http://www.blogger.com/atom/ns#' term='Kiln'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Build Pipeline'/><category scheme='http://www.blogger.com/atom/ns#' term='Continuous Integration'/><category scheme='http://www.blogger.com/atom/ns#' term='Jenkins'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><title type='text'>A CI Migration Part II - Convention Over Configuration</title><content type='html'>In this post I want to talk about template builds, stable builds and branch/feature builds for Jenkins.&lt;br /&gt;&lt;br /&gt;One of the first things I figured out with Jenkins is that configuration can be overwhelming. &amp;nbsp;Jenkins does a fabulous job of letting you tweak all the nobs throughout its infrastructure. &amp;nbsp;What that translates to however is the need to establish conventions early on in the set up process - if for no other reason than your sanity.&lt;br /&gt;&lt;br /&gt;The build and package process I am currently working in is probably similar to some .NET shops that are still working towards full Continuous Integration. &amp;nbsp;The developer starts with a remote clone of stable in a Kiln repository group and then brings that clone locally (think long running single developer feature branch). The developer does their work to a satisfactory point and pushes changes to the remote repository. &lt;br /&gt;&lt;br /&gt;Once code is pushed to the remote repo, a code review request is made. &amp;nbsp;While the code review is underway, a build package is assembled and run, which will produce the final deployment artifacts. &amp;nbsp;With a combination of NAnt scripts and MSBuild, software is built and later packaged for deployment - where packaging forces a rebuild of the software regardless of the need to actually do so. &amp;nbsp;Once review is complete the deployed artifacts move along to QA for testing.&lt;br /&gt;&lt;br /&gt;Considering that this is not even the full picture - the million dollar question is where and how do you begin to insert Continuous Integration?&lt;br /&gt;&lt;br /&gt;Initial Goals:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Dev should push and the push should automagically build and test the software.&lt;/li&gt;&lt;li&gt;When packaging, software should not be rebuilt.&lt;/li&gt;&lt;li&gt;Packaging should always refer to the latest built artifacts.&lt;/li&gt;&lt;li&gt;The dev's effort in the build process should be limited to writing unit tests and pushing.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;There are plenty of ways to approach this. &amp;nbsp;Given the above requirements, a Kiln SCM and Jenkins for CI tooling, I designed the following approach:&lt;/div&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Dev pushes to remote repository.&lt;/li&gt;&lt;li&gt;Remote repository fires web hook to waiting Jenkins Management Service.&lt;/li&gt;&lt;li&gt;Jenkins Management Service connects to Jenkins and configures a job for our build.&lt;/li&gt;&lt;li&gt;Jenkins Management Service kicks off the build for our newly configured job, runs unit tests, etc.&lt;/li&gt;&lt;li&gt;User receives notification via Chrome plugin as to the success or failure of the build job.&lt;/li&gt;&lt;li&gt;Dev. prepares deployment package using latest compiled artifacts and sends to QA.&lt;/li&gt;&lt;li&gt;Feature is released to Production after QA.&lt;/li&gt;&lt;li&gt;Deployed code is merged to stable repository, rebuilt and unit tests re-run.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;In order to achieve this workflow we need a chunk of middleware, the "Jenkins Management Service." &amp;nbsp;Though Kiln can fire a web hook directly at Jenkins to force a job build, we trade off the ability to make the build job creation automagical for the developer. &amp;nbsp;Depending on your set up, this direct coupling could be an option, assuming you do not need to have a new job for each feature branch.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;To achieve our goal we will create two different Jenkins jobs per repository group. &amp;nbsp;The first, larger and more complex will be the build for stable. If your organization deploys stable, then you can lash this build job to extra processes such as performance tests, remote deploy to QA, remote deploy to integration test env, doc building, etc. &amp;nbsp;This build will be specific to the stable repository and should include all developers in the email notification chain so that everyone on the team can monitor what's going on.&lt;br /&gt;&lt;br /&gt;The second build will be a template build. &amp;nbsp;This job will be a lightweight build performing compilation, running just the most basic of unit tests and should run to completion in 1-2 minutes from the remote push. While we want the developer to take a break at this point, we also want to give them feed back as soon as possible. &lt;br /&gt;&lt;br /&gt;For our system I chose some common name formatting to keep everything in the Jenkins Management Service(JMS) scriptable an easy. &amp;nbsp;Repository Groups in Kiln are consistent with the product name; therefore in Jenkins, the stable build job is&amp;nbsp;&lt;i&gt;RepositoryGroup_stable&lt;/i&gt;&amp;nbsp;and the template job is&amp;nbsp;&lt;i&gt;RepositoryGroup_template&lt;/i&gt;. &lt;br /&gt;&lt;br /&gt;The Jenkins Management Service, which is a simple python bottle cgi application running in IIS, receives a web hook from Kiln on its main route and plucks out the repository, repository group, pusher email, and kiln repository url from the payload. &amp;nbsp;It then turns to Jenkins and sucks down the list of all the available jobs and checks to see if a job with the name&amp;nbsp;&lt;i&gt;RepositoryGroup_repository&lt;/i&gt;&amp;nbsp;exists. &amp;nbsp;If the job does not exist then the JMS retrieves the&amp;nbsp;&lt;i&gt;RepositoryGroup_template&lt;/i&gt;&amp;nbsp;job, remaps various fields and submits the job to Jenkins. &amp;nbsp;If the job had existed, the JMS makes sure that all updated plugin sections are properly configured accruing to the template (you need to have your Chuck Norris plugin enabled after all) and if the pusher's email is not in the notification list, it is added. &lt;br /&gt;&lt;br /&gt;Once the job in Jenkins has been created/updated, the JMS then kicks off the build - this whole process is nearly instant. &amp;nbsp;Through this process we have confined the configurability to the stable and template build jobs and made the process nearly invisible to the developer. &amp;nbsp;If it fits your process, successful builds can fire off an email to the pushers with a link to the most recent archived artifacts, so they can deploy to their test servers.&lt;br /&gt;&lt;br /&gt;One last note about this process. &amp;nbsp;You will need to eventually remove the feature branch jobs; this can be done in a few ways. &amp;nbsp;Currently our process merges feature branches to stable after deployment. &amp;nbsp;This &amp;nbsp; requires developers to run a custom delete script that does some final checking/testing, removes the clone from Kiln and deletes the job. &amp;nbsp;This could in theory be completely automated by running a script that did the merge to stable, ran the stable build job and if all went well, cleaned up the Kiln repository and the Jenkins build job for that feature. &amp;nbsp;I am looking to experiment with this idea in January.&lt;br /&gt;&lt;br /&gt;Happy Automating in the New Year!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/6813295856311367397/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2013/12/a-ci-migration-part-ii-convention-over.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6813295856311367397'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/6813295856311367397'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2013/12/a-ci-migration-part-ii-convention-over.html' title='A CI Migration Part II - Convention Over Configuration'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-7460643779572855487</id><published>2013-12-22T12:58:00.003-08:00</published><updated>2013-12-23T00:20:39.476-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='ITOps'/><category scheme='http://www.blogger.com/atom/ns#' term='Error Logs'/><category scheme='http://www.blogger.com/atom/ns#' term='Technical Indicators'/><category scheme='http://www.blogger.com/atom/ns#' term='DevOps'/><category scheme='http://www.blogger.com/atom/ns#' term='Operations'/><title type='text'>Experimenting with Technical Indicators and Error Events</title><content type='html'>I have been doing some serious data digging over this last week - mostly related to tracing some arcane functionality and an associated issue with a data feed. &amp;nbsp;The work was pretty time consuming, so while the SQL was running, I had some time to think and experiment. &amp;nbsp;Though we knew there was an issue with the data, its impact was not really visible through our reporting tool. &amp;nbsp;Low number of occurrences. Steadily climbing counts, but with pretty low deviation. &amp;nbsp;I needed a way to expose what we thought was happening via a meaningful and actionable indicator.&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;In a previous incarnation, this blog was actually called "the passive investor" and mainly recorded my approach to dividend investing. &amp;nbsp;That work was backed by a pretty intense suite of excel workbooks. &amp;nbsp;Yes, I am well aware that there are online tools that do charting and amazing analysis of stocks for you. &amp;nbsp;Problem was, I needed some way to analyze my entire asset base, so off to the world's most powerful DSL … Excel. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I dug up some of my old worksheets. &amp;nbsp;Hacked a little bit. &amp;nbsp;Made some bulk data queries, thank you pivot tables, and BAM. &amp;nbsp;I was in business. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;The data in this case was simply an aggregation of an event by date. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;I began with the theory that &lt;a href="http://en.wikipedia.org/wiki/Bollinger_Bands"&gt;Bollinger Bands&lt;/a&gt; would likely provide a solid starting point given that they are geared toward volatility analysis.&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-BbjI2p_DTUg/UraWja7iLbI/AAAAAAAAAQY/Dw9ZX7Gno7E/s1600/SnipImage.JPG" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="185" src="http://2.bp.blogspot.com/-BbjI2p_DTUg/UraWja7iLbI/AAAAAAAAAQY/Dw9ZX7Gno7E/s400/SnipImage.JPG" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;As you can see, the Bollinger Bands would not have given confirmation of the impact of our issue, which started November 1, &amp;nbsp;until the sharp change in trend mid-december. &amp;nbsp;Though the volatility was increasing, noted by widening bands, that fact could be discounted by the low counts from Veteran's Day and Thanksgiving. &amp;nbsp;Given the slow signaling from this daily aggregation, I moved on.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Next up on the docket was to try a &lt;a href="http://en.wikipedia.org/wiki/Stochastic_oscillator"&gt;stochastic oscillator&lt;/a&gt;, figuring that the change in momentum might yield some key visual indicator.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://2.bp.blogspot.com/-qr0uPhUzza4/UraYA5ULuLI/AAAAAAAAAQk/Ibqlj3D0pjo/s1600/SnipImage1.JPG" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="77" src="http://2.bp.blogspot.com/-qr0uPhUzza4/UraYA5ULuLI/AAAAAAAAAQk/Ibqlj3D0pjo/s400/SnipImage1.JPG" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Unfortunately, this chart is next to useless. &amp;nbsp;I honestly have no clue what it is trying to tell me. &amp;nbsp;I could likely extend the %D and the %K or take an EMA to slow the oscillations down; but, I still don't think this is what I am looking for.&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;I moved onto the &lt;a href="http://en.wikipedia.org/wiki/MACD"&gt;MACD&lt;/a&gt;&amp;nbsp;indicator figuring that the simple two period moving average and overlaid histogram would show "fast" changes in trend better than the Bollinger Bands. &amp;nbsp;Judging by the image blow I think my conclusions are right. &amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-udrAzAb35nk/UraZdsOelGI/AAAAAAAAAQw/L4y1QtuM6y4/s1600/SnipImage2.JPG" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="95" src="http://4.bp.blogspot.com/-udrAzAb35nk/UraZdsOelGI/AAAAAAAAAQw/L4y1QtuM6y4/s400/SnipImage2.JPG" width="400"&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;We would have received positive confirmation of the issue by mid November, mainly due to this indicator's simplicity. &amp;nbsp;It's easy to calculate. And easy to read. &amp;nbsp;Though it suffers from some latency issues similar to the Bollinger Bands above, it's a moving average indicator after all, the chart reads very clearly and I think provides some actionable data. &amp;nbsp;I will need to work on providing some % deviation clamping around very low transaction days (Veteran's, Thanksgiving); and additionally, see if the data team can provide some evidence for the mid-June spike.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;One further thought that I have yet to experiment with, is the use of volume technical indicators on log data. &amp;nbsp;My hunch is that they might be well suited for looking at transaction times, processing duration, etc.&amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;At this point, I plan on implementing a small MongoDB instance to store a nightly data rollup for the MACD chart. &amp;nbsp;Perhaps an experiment with &lt;a href="http://matplotlib.sourceforge.net/"&gt;Matplotlib&lt;/a&gt; and a light weight python web framework is in order? &amp;nbsp;Thoughts? &amp;nbsp;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/7460643779572855487/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2013/12/experimenting-with-technical-indicators.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7460643779572855487'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/7460643779572855487'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2013/12/experimenting-with-technical-indicators.html' title='Experimenting with Technical Indicators and Error Events'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='http://2.bp.blogspot.com/-BbjI2p_DTUg/UraWja7iLbI/AAAAAAAAAQY/Dw9ZX7Gno7E/s72-c/SnipImage.JPG' height='72' width='72'/><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-5956522040264772246</id><published>2013-12-05T22:35:00.001-08:00</published><updated>2013-12-06T01:04:17.159-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Automation'/><category scheme='http://www.blogger.com/atom/ns#' term='NAnt'/><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#post'/><category scheme='http://www.blogger.com/atom/ns#' term='Build Pipeline'/><category scheme='http://www.blogger.com/atom/ns#' term='Continuous Integration'/><category scheme='http://www.blogger.com/atom/ns#' term='Jenkins'/><category scheme='http://www.blogger.com/atom/ns#' term='Window&apos;s Authentication'/><title type='text'>A CI Migration Part 1 - Jenkins, NAnt &amp; Window's Authentication</title><content type='html'>I am deep in the throws of a slow migration that is laying the groundwork for a continuous integration style build =&amp;gt; unit test =&amp;gt; deploy =&amp;gt; integration test, pipeline. &amp;nbsp;I have shaped Jenkins enough to get builds and unit tests to function smoothly; however, recompilation is still happening during the packaging step using an existing NAnt build system and not Jenkins.&lt;br&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Problem:&lt;/div&gt;&lt;div&gt;Get packaging step, scripts written in NAnt, to pull and use latest compiled artifacts from Jenkins.&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;Solution:&lt;/div&gt;&lt;div&gt;This process was pretty straight forward, until I got to the NAnt packaging scripts&lt;br&gt;&lt;br&gt;In Jenkins under&amp;nbsp;&lt;i&gt;Post Build Actions&lt;/i&gt; for your job, select "Archive the Artifacts". &amp;nbsp;Then in the &lt;i&gt;Files to archive&lt;/i&gt; setting, I entered "package/**", as the final step of our NAnt build script neatly puts the compiled artifacts into a folder aptly named "package".&lt;br&gt;&lt;br&gt;With the build job set up, fire off a build now and visit&amp;nbsp;http://your.jenkins.server.com/job/JobName/lastSuccessfulBuild/artifact/*zip*/archive.zip in your browser. &amp;nbsp;If all has gone well you will be downloading the zipped artifacts from the last successful build.&lt;br&gt;&lt;br&gt;Armed with a functioning url, fire up the &lt;a href="http://nant.sourceforge.net/release/0.91/help/tasks/get.html" target="_blank"&gt;NAnt docs&lt;/a&gt;&amp;nbsp;for reference and drop this little gem in your script to pull the archived artifacts:&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&lt;br&gt;&amp;lt;get src="http://jenkins.server.com/job/JobName/lastSuccessfulBuild/artifact/*zip*/archive.zip" dest="{build.current.outputdir}" /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;br&gt;And ... Run.&lt;br&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;BUILD FAILED&lt;br&gt;&lt;br&gt;C:\Foo\Bar\default.build(48,10):&lt;br&gt;Unable to download 'http://your.jenkins.server.com/job/JobName/lastSuccessfulBuild/artifact/*zip*/archive.zip' to 'C:\your\working\dir\'. The remote server returned an error: (401) Unauthorized.&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;Right, pesky authentication. &lt;br&gt;&lt;br&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br&gt;We need to get off track here for a moment to discuss some environmental details. &amp;nbsp;Jenkins is highly configurable and is flexible enough to run in many environments. &amp;nbsp;With the backdrop of Windows and and Active Directory I have currently opted for the following setup:&lt;br&gt;&lt;ul&gt;&lt;li&gt;Jenkins as Windows Service - instructions &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service" target="_blank"&gt;here&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;IIS site that does url rewriting to forward requests to Jenkins via an inbound reverse proxy with Windows Authentication.&lt;/li&gt;&lt;/ul&gt;"Why? Dear God, Why?" You ask.&lt;br&gt;&lt;br&gt;Active Directory. &lt;br&gt;&lt;br&gt;While I am sure some people posses the magically delicious lucky charms to make the Jenkins AD plug-in and their AD services play ball, I had no such luck. &amp;nbsp;Plan B. &amp;nbsp;Use Windows Authentication through a forwarding site in IIS to proxy authentication. &amp;nbsp;This may seem ugly on the face of it; but, in an AD world this actually takes some of the pain out of configuring the whole environment - let the tools do the work.&lt;br&gt;&lt;br&gt;The forwarding site is a snap to set up, relatively speaking:&lt;br&gt;&lt;ul&gt;&lt;li&gt;Bind Jenkins to Localhost on your favorite port - instructions &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Starting+and+Accessing+Jenkins"&gt;here&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Build new site in IIS&lt;/li&gt;&lt;li&gt;Disable all authentication except Windows Authentication&lt;/li&gt;&lt;li&gt;Enable URL Rewriting&lt;/li&gt;&lt;li&gt;Add inbound reverse proxy rule to rewrite jenkins.yourdomain.com to the localhost address for Jenkins.&lt;/li&gt;&lt;li&gt;Create an AD GPO for your engineers to allow access to jenkins.yourdomain.com (you likely need to do this because the nice address will not be implicitly trusted by browsers as being part of the local domain)&lt;/li&gt;&lt;li&gt;Set up logging in IIS&lt;/li&gt;&lt;li&gt;Set up log rotation/deletion using the Task Scheduler&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&amp;nbsp;You can use a simple PowerShell script along these lines to do the heavy lifting:&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;div&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;get-childitem -Path C:\inet\logfile\path -recurse |&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;where-object {$_.lastwritetime -lt (get-date).addDays(-N)} |&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;Foreach-Object { del $_.FullName } get-childitem -Path C:\inet\logfile\path\service |&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;where-object {$_.lastwritetime -lt (get-date).addDays(-N)} |&amp;nbsp;&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;Foreach-Object { del $_.FullName }&lt;/span&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: xx-small;"&gt;**&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: xx-small;"&gt;**Loose reference from &lt;a href="http://stackoverflow.com/questions/17707757/powershell-to-output-folder-based-on-content-lastwritetime" target="_blank"&gt;here&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;You may want to archive these logs rather than plainly deleting them depending on your security and bookkeeping needs. &amp;nbsp;Be aware that the log files will fill quickly with devs using Chrome notifiers, etc. &amp;nbsp;For Chrome, I use &lt;a href="https://chrome.google.com/webstore/detail/buildreactor/agfdekbncfakhgofmaacjfkpbhjhpjmp?hl=en"&gt;Build Reactor&lt;/a&gt;&amp;nbsp;and &lt;a href="https://chrome.google.com/webstore/detail/hudson-monitor/lnalnbkkohdcnaapeeceifjabgmdfgah?hl=en"&gt;Hudson Monitor&lt;/a&gt;, where Build Reactor monitors all active jobs on the server an Hudson Monitor covers my personal jobs.&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;&lt;/div&gt;At this point your engineers can access Jenkins from their browser with built in authentication and IT gets to centralize access control through AD ... Win-Win in my book!&lt;br&gt;&lt;br&gt;&lt;div style="text-align: center;"&gt;***&lt;/div&gt;&lt;br&gt;And here we are, back at our original problem where the NAnt script cannot authenticate to Jenkins through IIS. &amp;nbsp;There are a few options at this juncture:&lt;br&gt;&lt;ul&gt;&lt;li&gt;Simply embed authentication in the get nAnt task - not much more to say than "ewww"&lt;/li&gt;&lt;li&gt;Little bit of C# embedded in a nAnt script - this ought to get the job done nicely.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Begin by building up a new target to hold our embedded script and add some error handling:&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&amp;lt;target name="utility.getartifacts"&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;fail message="util.getartifacts requires the outputdir property to be set." unless="${property::exists('outputdir')}" /&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;...&lt;/span&gt;&lt;/div&gt;&lt;br&gt;Next we need a&lt;span style="font-family: 'Helvetica Neue Light', HelveticaNeue-Light, helvetica, arial, sans-serif;"&gt;&amp;nbsp;script tag and the relevant references and imports for our work. &amp;nbsp;Since we need to make a network request for our compiled artifacts and save them locally to disk we will want the System DLL and bring in the Net and IO namespaces.&lt;/span&gt;&lt;div&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&amp;lt;script language="C#" prefix="resource" &amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;references&amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;include name="System.dll" /&amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/references&amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;imports&amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;import namespace="System.Net" /&amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;import namespace="System.IO" /&amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;/imports&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&lt;br&gt;&lt;/span&gt;The core work of our script will be to build a WebClient and write the output of a download call to our output file location. &amp;nbsp;The work of setting up windows authentication for our WebClient is done through &lt;i&gt;UseDefaultCredentials = true&lt;/i&gt;. &amp;nbsp;What we are gaining here is the ability for the user running our packaging script to have their credentials auto-negotiated by the WebClient.&lt;br&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&amp;nbsp; &amp;nbsp; &amp;lt;code&amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  &amp;lt;![CDATA[&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [TaskName("get_artifacts")]&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public class ArtifactTask : Task {&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [TaskAttribute("resourceUrl", Required=true)]&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [StringValidator(AllowEmpty = false)]&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public string ResourceUrl{ get; set; }&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [TaskAttribute("outputFile", Required=true)]&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [StringValidator(&lt;/span&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;AllowEmpty = false&lt;/span&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;)]&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public string OutputFile{ get; set; }&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; public void GetArtifacts()&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; WebClient &amp;nbsp;client = new WebClient();&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; client.UseDefaultCredentials = true;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; client.Headers["User-Agent"] =&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "Mozilla/4.0 (Compatible; Windows NT 5.1; MSIE 6.0) " +&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; "(compatible; MSIE 6.0; Windows NT 5.1; " +&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ".NET CLR 1.1.4322; .NET CLR 2.0.50727)";&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // Download data.&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; File.WriteAllBytes(OutputFile,&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; client.DownloadData(ResourceUrl));&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; protected override void ExecuteTask() {&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; GetArtifacts();&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; }&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ]]&amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;lt;/code&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span 14px="" courier="" font-size:="" monospace="" new="" ourier=""&gt;&lt;br&gt;&lt;/span&gt;Most of the preceding code is self explanatory; a few attributes to do some validation, an override and our meat and potatoes method GetArtifacts.&lt;br&gt;&lt;br&gt;The final step is to put everything together into 5 simple calls: build an output directory, make a reference to the output file, download the zip of the artifacts, unzip the artifacts, and delete the zip to clean things up.&lt;br&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;mkdir dir="${build.current.outputdir}" /&amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;property name="build.current.artifacts" value="${project::get-base- &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; directory()}\${build.current.outputdir}\archive.zip" /&amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;get_artifacts&amp;nbsp;resourceUrl="&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;http://your.jenkins.server.com/job/JobName/lastSuccessfulBuild/artifact/*zip*/archive.zip" outputFile="C:\your\working\dir\&lt;/span&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;archive.zip&lt;/span&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;" /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span style="font-family: monospace, 'Courier New', Courier; font-size: 14px;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;unzip zipfile="${build.current.artifacts}" /&amp;gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;lt;delete file="${build.current.artifacts}" /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;This is just the first in a series of posts where I will try to record my path to CI. &amp;nbsp;I cannot by any means say that this is the right way to do it; but, it is "a" way to do it. &amp;nbsp;Feel free to rail on this in the comments below … we can all learn from an open discussion. &amp;nbsp;I suppose the most important notes to take away are as follows:&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;You need to be doing Continuous Integration/Automated Builds - "everyone" can't be wrong.&lt;/li&gt;&lt;li&gt;Don't try to do it all in one go - the risk is just too high and disruptions in the build environment can ripple across an organization.&lt;/li&gt;&lt;li&gt;Don't try to do it all in one go - your Devs will hate you for a massive process change.&lt;/li&gt;&lt;li&gt;Don't make anyone's life harder - we are automating here, so the users lives should get easier, no matter what. &amp;nbsp;This may mean you have to sacrifice the easy and straight forward path for a convoluted hack-fest, just to get the ball rolling.&lt;/li&gt;&lt;li&gt;Momentum is powerful - once you show everyone that this stuff is useful they will be inspired and might even help the effort. &amp;nbsp;No matter what, you won't be making things worse.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Share your stories - everyone is yelling from the hills that you need to be doing CI; but few have been honest and open about how they are actually getting it done.&lt;/li&gt;&lt;li&gt;Don't be a hero - realize that change takes time. &amp;nbsp;You want process to evolve organically … revolution will just piss everyone off.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://www.lucidmotions.net/feeds/5956522040264772246/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='http://www.lucidmotions.net/2013/12/a-ci-migration-part-1-jenkins-nant.html#comment-form' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5956522040264772246'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/posts/default/5956522040264772246'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2013/12/a-ci-migration-part-1-jenkins-nant.html' title='A CI Migration Part 1 - Jenkins, NAnt &amp;amp; Window&amp;#39;s Authentication'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.page-7319328104247075820</id><published>2017-01-06T12:48:00.000-08:00</published><updated>2017-01-06T12:48:41.417-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Off the Shelf</title><content type='html'>I am a constant consumer of information - figuring that most of it on average is wrong; so, if I consume enough, I will more or less get the right picture about things. &amp;nbsp;Like most folks my strategies for consumption includes: Twitter which is great for daily context on the industry, Podcasts for weekly to monthly bigger pictures, Blogs which I use namely for research and longer running mental threads, Conferences to get excited about the business and find peer inspiration, and lastly Books that are always in a state of being read or re-read. &lt;br /&gt;&lt;br /&gt;Below are the sources that I am consuming right now.&lt;br /&gt;&lt;br /&gt;Twitter:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://twitter.com/williamberryiii/following"&gt;Twitter Following List&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;PodCast Roll:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://hanselminutes.com/"&gt;HanselMinutes&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.se-radio.net/"&gt;Software Engineering Radio&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.runasradio.com/"&gt;RunAs Radio&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://fullstackradio.com/"&gt;Full Stack Radio&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.philosophybites.com/"&gt;Philosophy Bites&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.functionalgeekery.com/"&gt;Functional Geekery&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.dotnetrocks.com/"&gt;DotNetRocks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.scriptrock.com/podcast"&gt;ScriptRock Radio&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://masteringbusinessanalysis.com/"&gt;Mastering Business Analysis&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://www.arresteddevops.com/"&gt;Arrested Devops&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://developeronfire.com/"&gt;Developer On Fire&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://thisdeveloperslife.com/"&gt;This Developer's Life&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://hiphination.org/"&gt;Hi-Phi Nation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.philosophy247.org/"&gt;Philosophy 247&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://nigelwarburton.typepad.com/philosophy_sites/"&gt;Philosophy Sites&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Bookshelf:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://www.amazon.com/Jenkins-Continuous-Integration-Cookbook-Alan/dp/1849517401"&gt;Jenkins Continuous Integration Cookbook&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.amazon.com/Continuous-Integration-Improving-Software-Reducing/dp/0321336380/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1388546398&amp;amp;sr=1-1&amp;amp;keywords=continuous+integration"&gt;Continuous Integration&amp;nbsp;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers/dp/193435659X/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1388546420&amp;amp;sr=1-1&amp;amp;keywords=seven+languages+in+seven+weeks"&gt;Seven Languages in Seven Weeks&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.amazon.com/Head-First-jQuery-Ryan-Benedetti/dp/1449393217/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1388546459&amp;amp;sr=1-1&amp;amp;keywords=head+first+jquery"&gt;HeadFirst jQuery&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://www.amazon.com/Pro-ASP-NET-MVC-Adam-Freeman/dp/1430242361/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1388546481&amp;amp;sr=1-1&amp;amp;keywords=asp.net+mvc4"&gt;ASP.Net MVC4&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Conferences:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="http://iloveapis2013.com/"&gt;I Love APIs 2013&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://strataconf.com/big-data-conference-ca-2015/public/content/home"&gt;Strata-Hadoop World&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="http://devopsenterprise.io/"&gt;DevOps Enterprise Summit&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/pages/default/7319328104247075820'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/pages/default/7319328104247075820'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/p/blog-page.html' title='Off the Shelf'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.page-299037963309613008</id><published>2016-09-08T09:09:00.000-07:00</published><updated>2016-09-08T09:09:09.952-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>About Me</title><content type='html'>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt; &lt;o:DocumentProperties&gt;  &lt;o:Revision&gt;0&lt;/o:Revision&gt;  &lt;o:TotalTime&gt;0&lt;/o:TotalTime&gt;  &lt;o:Pages&gt;1&lt;/o:Pages&gt;  &lt;o:Words&gt;74&lt;/o:Words&gt;  &lt;o:Characters&gt;428&lt;/o:Characters&gt;  &lt;o:Company&gt;Lucid Motions&lt;/o:Company&gt;  &lt;o:Lines&gt;3&lt;/o:Lines&gt;  &lt;o:Paragraphs&gt;1&lt;/o:Paragraphs&gt;  &lt;o:CharactersWithSpaces&gt;501&lt;/o:CharactersWithSpaces&gt;  &lt;o:Version&gt;14.0&lt;/o:Version&gt; &lt;/o:DocumentProperties&gt; &lt;o:OfficeDocumentSettings&gt;  &lt;o:AllowPNG/&gt; &lt;/o:OfficeDocumentSettings&gt;&lt;/xml&gt;&lt;![endif]--&gt; &lt;!--[if gte mso 9]&gt;&lt;xml&gt; &lt;w:WordDocument&gt;  &lt;w:View&gt;Normal&lt;/w:View&gt;  &lt;w:Zoom&gt;0&lt;/w:Zoom&gt;  &lt;w:TrackMoves/&gt;  &lt;w:TrackFormatting/&gt;  &lt;w:PunctuationKerning/&gt;  &lt;w:ValidateAgainstSchemas/&gt;  &lt;w:SaveIfXMLInvalid&gt;false&lt;/w:SaveIfXMLInvalid&gt;  &lt;w:IgnoreMixedContent&gt;false&lt;/w:IgnoreMixedContent&gt;  &lt;w:AlwaysShowPlaceholderText&gt;false&lt;/w:AlwaysShowPlaceholderText&gt;  &lt;w:DoNotPromoteQF/&gt;  &lt;w:LidThemeOther&gt;EN-US&lt;/w:LidThemeOther&gt;  &lt;w:LidThemeAsian&gt;JA&lt;/w:LidThemeAsian&gt;  &lt;w:LidThemeComplexScript&gt;X-NONE&lt;/w:LidThemeComplexScript&gt;  &lt;w:Compatibility&gt;   &lt;w:BreakWrappedTables/&gt;   &lt;w:SnapToGridInCell/&gt;   &lt;w:WrapTextWithPunct/&gt;   &lt;w:UseAsianBreakRules/&gt;   &lt;w:DontGrowAutofit/&gt;   &lt;w:SplitPgBreakAndParaMark/&gt;   &lt;w:EnableOpenTypeKerning/&gt;   &lt;w:DontFlipMirrorIndents/&gt;   &lt;w:OverrideTableStyleHps/&gt;   &lt;w:UseFELayout/&gt;  &lt;/w:Compatibility&gt;  &lt;m:mathPr&gt;   &lt;m:mathFont m:val="Cambria Math"/&gt;   &lt;m:brkBin m:val="before"/&gt;   &lt;m:brkBinSub m:val="--"/&gt;   &lt;m:smallFrac m:val="off"/&gt;   &lt;m:dispDef/&gt;   &lt;m:lMargin m:val="0"/&gt;   &lt;m:rMargin m:val="0"/&gt;   &lt;m:defJc m:val="centerGroup"/&gt;   &lt;m:wrapIndent m:val="1440"/&gt;   &lt;m:intLim m:val="subSup"/&gt;   &lt;m:naryLim m:val="undOvr"/&gt;  &lt;/m:mathPr&gt;&lt;/w:WordDocument&gt;&lt;/xml&gt;&lt;![endif]--&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt; &lt;w:LatentStyles DefLockedState="false" DefUnhideWhenUsed="true"   DefSemiHidden="true" DefQFormat="false" DefPriority="99"   LatentStyleCount="276"&gt;  &lt;w:LsdException Locked="false" Priority="0" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Normal"/&gt;  &lt;w:LsdException Locked="false" Priority="9" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="heading 1"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 2"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 3"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 4"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 5"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 6"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 7"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 8"/&gt;  &lt;w:LsdException Locked="false" Priority="9" QFormat="true" Name="heading 9"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 1"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 2"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 3"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 4"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 5"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 6"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 7"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 8"/&gt;  &lt;w:LsdException Locked="false" Priority="39" Name="toc 9"/&gt;  &lt;w:LsdException Locked="false" Priority="35" QFormat="true" Name="caption"/&gt;  &lt;w:LsdException Locked="false" Priority="10" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Title"/&gt;  &lt;w:LsdException Locked="false" Priority="1" Name="Default Paragraph Font"/&gt;  &lt;w:LsdException Locked="false" Priority="11" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtitle"/&gt;  &lt;w:LsdException Locked="false" Priority="22" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Strong"/&gt;  &lt;w:LsdException Locked="false" Priority="20" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Emphasis"/&gt;  &lt;w:LsdException Locked="false" Priority="59" SemiHidden="false"    UnhideWhenUsed="false" Name="Table Grid"/&gt;  &lt;w:LsdException Locked="false" UnhideWhenUsed="false" Name="Placeholder Text"/&gt;  &lt;w:LsdException Locked="false" Priority="1" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="No Spacing"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 1"/&gt;  &lt;w:LsdException Locked="false" UnhideWhenUsed="false" Name="Revision"/&gt;  &lt;w:LsdException Locked="false" Priority="34" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="List Paragraph"/&gt;  &lt;w:LsdException Locked="false" Priority="29" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Quote"/&gt;  &lt;w:LsdException Locked="false" Priority="30" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Quote"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 1"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 2"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 3"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 4"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 5"/&gt;  &lt;w:LsdException Locked="false" Priority="60" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Shading Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="61" SemiHidden="false"    UnhideWhenUsed="false" Name="Light List Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="62" SemiHidden="false"    UnhideWhenUsed="false" Name="Light Grid Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="63" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 1 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="64" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Shading 2 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="65" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 1 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="66" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium List 2 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="67" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 1 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="68" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 2 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="69" SemiHidden="false"    UnhideWhenUsed="false" Name="Medium Grid 3 Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="70" SemiHidden="false"    UnhideWhenUsed="false" Name="Dark List Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="71" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Shading Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="72" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful List Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="73" SemiHidden="false"    UnhideWhenUsed="false" Name="Colorful Grid Accent 6"/&gt;  &lt;w:LsdException Locked="false" Priority="19" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Emphasis"/&gt;  &lt;w:LsdException Locked="false" Priority="21" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Emphasis"/&gt;  &lt;w:LsdException Locked="false" Priority="31" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Subtle Reference"/&gt;  &lt;w:LsdException Locked="false" Priority="32" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Intense Reference"/&gt;  &lt;w:LsdException Locked="false" Priority="33" SemiHidden="false"    UnhideWhenUsed="false" QFormat="true" Name="Book Title"/&gt;  &lt;w:LsdException Locked="false" Priority="37" Name="Bibliography"/&gt;  &lt;w:LsdException Locked="false" Priority="39" QFormat="true" Name="TOC Heading"/&gt; &lt;/w:LatentStyles&gt;&lt;/xml&gt;&lt;![endif]--&gt; &lt;!--[if gte mso 10]&gt;&lt;style&gt; /* Style Definitions */ table.MsoNormalTable  {mso-style-name:"Table Normal";  mso-tstyle-rowband-size:0;  mso-tstyle-colband-size:0;  mso-style-noshow:yes;  mso-style-priority:99;  mso-style-parent:"";  mso-padding-alt:0in 5.4pt 0in 5.4pt;  mso-para-margin:0in;  mso-para-margin-bottom:.0001pt;  mso-pagination:widow-orphan;  font-size:10.0pt;  font-family:Cambria;  mso-ascii-font-family:Cambria;  mso-ascii-theme-font:minor-latin;  mso-hansi-font-family:Cambria;  mso-hansi-theme-font:minor-latin;  mso-fareast-language:JA;} &lt;/style&gt;&lt;![endif]--&gt;   &lt;!--StartFragment--&gt;   &lt;!--EndFragment--&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="MsoNormal" style="margin-bottom: 10.5pt; mso-layout-grid-align: none; mso-pagination: none; text-autospace: none;"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://4.bp.blogspot.com/-EkzDxyEB_m0/U5Po2D9IdbI/AAAAAAAAATo/JgrehebfR0Q/s1600/IMG_8404.JPG" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="200" src="https://4.bp.blogspot.com/-EkzDxyEB_m0/U5Po2D9IdbI/AAAAAAAAATo/JgrehebfR0Q/s1600/IMG_8404.JPG" width="185" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="MsoNormal"&gt;In a previous life Bill crafted scenery for Broadway, a la Pirates of Penzance, but now crafts software for the enterprise, a la Pirates of Silicon Valley. &amp;nbsp;Slinging code for Microsoft's famed DX group, Bill has the opportunity to help developers the world over deliver cutting edge solutions with Azure products &amp;amp; services. &amp;nbsp;In previous roles, he has lead service integrations with Fortune 500 retailers, curated DevOps initiatives and to this day still enjoys building high performance, multi-tenant distributed data APIs. &amp;nbsp;As a deeply curious engineer, he enjoys pairing complex problems with simple and elegant solutions. Striving for meaningful change, Bill believes that cultural and technical progress is best made through evolution and not revolution.&amp;nbsp;&lt;o:p&gt;&lt;/o:p&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="MsoNormal" style="margin-bottom: 10.5pt; mso-layout-grid-align: none; mso-pagination: none; text-autospace: none;"&gt;&lt;br /&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/pages/default/299037963309613008'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/pages/default/299037963309613008'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/p/about.html' title='About Me'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><media:thumbnail xmlns:media='http://search.yahoo.com/mrss/' url='https://4.bp.blogspot.com/-EkzDxyEB_m0/U5Po2D9IdbI/AAAAAAAAATo/JgrehebfR0Q/s72-c/IMG_8404.JPG' height='72' width='72'/></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.page-8313311895403509721</id><published>2015-06-06T12:45:00.000-07:00</published><updated>2015-06-06T12:45:30.076-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#page'/><title type='text'>Resume</title><content type='html'>&lt;h2&gt;&lt;span style="font-family: Arial;"&gt;WILLIAM R. BERRY&lt;/span&gt;&lt;/h2&gt;&lt;div&gt;&lt;div&gt;&lt;b&gt;&lt;span style="font-family: Arial; font-size: 11.0pt;"&gt;Software Craftsman&lt;/span&gt;&lt;/b&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-family: Helvetica; mso-bidi-font-size: 13.0pt;"&gt;, specializing in systems architecture, APIs and integration. Motivated and passionate leader with proven track record interacting with diverse internal and external stakeholders.&lt;span style="mso-spacerun: yes;"&gt;&amp;nbsp; &lt;/span&gt;Deeply curious and savvy technologist that executes on short-term requirements and cultivates long-term visions.&lt;/span&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;Systems Design, Architecture &amp;amp; Integration&lt;/li&gt;&lt;li&gt;Software Engineering&lt;/li&gt;&lt;li&gt;Data Modeling&lt;/li&gt;&lt;li&gt;DevOps Cultural Transformations&lt;/li&gt;&lt;li&gt;National &amp;amp; International Client Service&lt;/li&gt;&lt;li&gt;In-house &amp;amp; Customer Training&lt;/li&gt;&lt;li&gt;Process &amp;amp; Workflow Optimization&lt;/li&gt;&lt;li&gt;Product Integration &amp;amp; Strategic Deployment&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;&lt;span style="font-size: large;"&gt;EXPERIENCE&lt;/span&gt;&lt;/h3&gt;&lt;b&gt;&lt;u&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;THE RETAIL EQUATION&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;b style="mso-bidi-font-weight: normal;"&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;,&lt;/span&gt;&lt;/b&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt; Irvine, CA (2011 - Present)&lt;/span&gt;&lt;br /&gt;&lt;div&gt;Data and analytics driven SaaS, predicting and shaping consumer behavior at each point of interaction. &lt;br /&gt;&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;i style="mso-bidi-font-style: normal;"&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;Verify Application Architect &amp;amp; Technical Lead &lt;span style="mso-spacerun: yes;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;(2013 - Present)&lt;b style="mso-bidi-font-weight: normal;"&gt;&lt;i style="mso-bidi-font-style: normal;"&gt;&lt;/i&gt;&lt;/b&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class="ColorfulList-Accent11CxSpFirst" style="margin-left: 0in; mso-add-space: auto;"&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;Architect and lead developer for real time SaaS system, including associated ETL, infrastructure, APIs and tooling. Interacts directly with internal and external stakeholders on feature development and service integrations for Fortune 500 clientele.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Designed and developed suite of multi-tenant distributed data and middle tier APIs written in C# and F#. API technologies include WebApi &amp;amp; OData for resource exposure, Unity DI/IOC, Entity Framework and custom SQL for service object persistence, SLAB and ELMAH for logging and an in-house performance-monitoring framework purpose built for Microservices. Data APIs also include custom, low-latency access frameworks built over Thrift for HBase and Nest for ElasticSearch. &lt;span style="mso-spacerun: yes;"&gt;&amp;nbsp;&lt;/span&gt;OData endpoints and LINQ Providers enable free search over billions of transaction, employee and consumer records housed in Solr indexes. All APIs include servicing web sites using ASP.NET MVC, Knockoutjs and Bootstrap for command and control, reporting and log viewing.&lt;/li&gt;&lt;li&gt;Implemented continuous build and continuous integration system around JenkinsCI.&lt;span style="mso-spacerun: yes;"&gt;&amp;nbsp; &lt;/span&gt;Features include automatic job creation, build and test on every commit, artifact archiving, and continuous deployment to Development and Integration environments.&lt;/li&gt;&lt;li&gt;Responsible for ongoing feature development of real-time transaction processing system handling over 150M transactions per year. Direct interaction with business stakeholders and client QA and Deployment teams. Design and coding of database schema and associated stored procedures to achieve low latency and high performance system requirements.&lt;/li&gt;&lt;li&gt;Responsible for cross coding of statistical models into real-time transaction processing systems.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;i style="mso-bidi-font-style: normal;"&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;Software Engineer&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;(2011 - 2013)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;Performed core software asset feature development and design including cross coding of predictive analytics/modeling to real-time systems. Instrumental in developing massive parallelized in-house testing platform and expanding ETL capabilities. Began continuing initiative to document institutional knowledge, clarify coding standards and distill in-house product visions.&lt;/span&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Led integration of large retail chain into core software product lines.&lt;/li&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;&lt;li&gt;Led Point-of-Sale integrations for several Fortune500 retailers including requirements gathering, creating specifications and test plans, leading integration testing and production rollouts.&lt;/li&gt;&lt;li&gt;Responsible for ETL engine that transfers large batches of data into production environment. Technologies used include SQL Server and Python.&lt;/li&gt;&lt;li&gt;Designed and developed low latency parsing module for U.S. and Canadian Driver Licenses, handling over 30M possible data structures, compensating for manufacturing defects, swiping and scanning errors and processing over 125M IDs per year.&lt;span style="mso-spacerun: yes;"&gt;&amp;nbsp; &lt;/span&gt;Written in C#.&lt;/li&gt;&lt;li&gt;Developed highly parallelized testing infrastructure for real-time transaction processing system. C# application uses WCF, and custom byte protocol to interact with remote systems, leverages NHibernate for decision and model variable persistence. System was capable of replaying a client’s entire transaction history by reconstructing original messages from database records. &lt;/li&gt;&lt;/span&gt;&lt;/ul&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;LUCID MOTIONS&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;,&lt;/span&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;, Huntington Beach, CA (2008 - 2011)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Boutique entertainment consulting firm specializing in automation and theatrical properties.&lt;br /&gt;&lt;b&gt;&lt;i style="mso-bidi-font-style: normal;"&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;b&gt;&lt;i style="mso-bidi-font-style: normal;"&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;Owner &amp;amp; Automation Consultant&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;/div&gt;&lt;div style="margin-left: 0in; mso-add-space: auto;"&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;Launched successful and profitable Entertainment Consulting Business. Clients include Cruise Ship Entertainment and Broadway. Key deliverables included: Project Management; Real-Time Automation Control Systems Design in Java &amp;amp; .Net; and Product R&amp;amp;D.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;u&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;HUDSON SCENIC STUDIO, INC.&lt;/span&gt;&lt;/u&gt;&lt;/b&gt;&lt;span style="font-family: Arial; font-size: 11.0pt;"&gt;, Yonkers, NY (2007 - 2010)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;Major Broadway production, scenic, and automation studio with more than 40 Tony nominated shows.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;i style="mso-bidi-font-style: normal;"&gt;&lt;span style="font-family: Arial; font-size: 11.0pt; mso-bidi-font-size: 10.0pt;"&gt;Automation Engineer &amp;amp; Control Systems Specialist&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;Designed, programmed and maintained high-speed, low latency C# network application with graphical interface to standalone automation controllers, utilizing Modbus TCP and MelsecFX industrial protocols.&amp;nbsp;Designed and directed fabrication of compact, high-density motor control racks including associated safety systems with 5,000 points of I/O. Conduct in-house and customer training on control devices.&amp;nbsp;Provided national and international client support of automation systems and onsite personnel training&lt;br /&gt;&lt;h3&gt;&lt;span style="font-size: large;"&gt;Education&lt;/span&gt;&lt;/h3&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;span style="font-family: Arial; font-size: 11.0pt;"&gt;MFA&lt;/span&gt;&lt;/b&gt;&amp;nbsp;&amp;nbsp;&lt;b style="mso-bidi-font-weight: normal;"&gt;Stage Automation&lt;/b&gt;, &lt;u&gt;University of North Carolina&lt;/u&gt;, School of the Arts&amp;nbsp;(2004 - 2007)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Thesis: “Proving the viability of scalable, event driven entertainment automation software”.&lt;/li&gt;&lt;li&gt;Relevant Coursework: Control Systems Design including PLCs, Hydraulics, Pneumatics Electronics/Electrics; Project Management; Theatrical Structural Engineering; Metalworking &amp;amp; Fabrication.&lt;/li&gt;&lt;li&gt;Independent Studies: Visual Basic; C#; J2SE; Modbus TCP; Electronics; Field I/O; Computer Controlled Automation Systems; Object Oriented Programming; and TCP/IP Networking.&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;span style="font-family: Arial; font-size: 11.0pt;"&gt;BA&lt;/span&gt;&lt;/b&gt;&lt;span style="font-family: Arial; font-size: 11.0pt;"&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;Theater Arts&lt;/b&gt; - emphasis in Technical Theater, &lt;u&gt;University of California&lt;/u&gt;&amp;nbsp;(1998 - 2001)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/pages/default/8313311895403509721'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/pages/default/8313311895403509721'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/p/williamr.html' title='Resume'/><author><name>William Berry</name><uri>https://plus.google.com/102765041646303051648</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-691254707752460726</id><published>2014-11-20T09:23:53.858-08:00</published><updated>2014-11-23T17:19:10.907-08:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>How did you get IIS to add the request header with...</title><content type='html'>How did you get IIS to add the request header with the domain username for SSO to work? URL rewrite seems to run before authentication happens.&lt;br /&gt;&lt;br /&gt;Thanks!</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/8053727212155658560/comments/default/691254707752460726'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/8053727212155658560/comments/default/691254707752460726'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2014/01/iis-getting-in-way-of-beautiful-jenkins.html?showComment=1416504233858#c691254707752460726' title=''/><author><name>Mike Barry</name><uri>https://www.blogger.com/profile/06123714945751018064</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='35' height='35' src='//lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35'/></author><thr:in-reply-to href='http://www.lucidmotions.net/2014/01/iis-getting-in-way-of-beautiful-jenkins.html' ref='tag:blogger.com,1999:blog-4707687462195457004.post-8053727212155658560' source='https://www.blogger.com/feeds/4707687462195457004/posts/default/8053727212155658560' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1338419253'/><gd:extendedProperty name='blogger.displayTime' value='11/20/2014 9:23 AM'/></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-4793778539600794067</id><published>2017-03-29T22:02:52.017-07:00</published><updated>2017-04-06T14:20:54.756-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Is Azure mandatory for using this SDK?</title><content type='html'>Is Azure mandatory for using this SDK?</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/4884324456457166601/comments/default/4793778539600794067'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/4884324456457166601/comments/default/4793778539600794067'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/09/azure-iot-gateway-sdk-build-problems.html?showComment=1490850172017#c4793778539600794067' title=''/><author><name>Unknown</name><uri>https://www.blogger.com/profile/08885927409819377062</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='35' height='35' src='//lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35'/></author><thr:in-reply-to href='http://www.lucidmotions.net/2016/09/azure-iot-gateway-sdk-build-problems.html' ref='tag:blogger.com,1999:blog-4707687462195457004.post-4884324456457166601' source='https://www.blogger.com/feeds/4707687462195457004/posts/default/4884324456457166601' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-73756513'/><gd:extendedProperty name='blogger.displayTime' value='3/29/2017 10:02 PM'/></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-7732142901372553236</id><published>2017-03-29T22:02:54.389-07:00</published><updated>2017-04-06T14:21:14.517-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'></title><content type='html'>This comment has been removed by a blog administrator.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/4884324456457166601/comments/default/7732142901372553236'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/4884324456457166601/comments/default/7732142901372553236'/><author><name>Unknown</name><uri>https://www.blogger.com/profile/08885927409819377062</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='35' height='35' src='//lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35'/></author><thr:in-reply-to href='http://www.lucidmotions.net/2016/09/azure-iot-gateway-sdk-build-problems.html' ref='tag:blogger.com,1999:blog-4707687462195457004.post-4884324456457166601' source='https://www.blogger.com/feeds/4707687462195457004/posts/default/4884324456457166601' type='text/html'/><gd:extendedProperty name='blogger.contentRemoved' value='true'/><gd:extendedProperty name='blogger.itemClass' value='pid-73756513'/><gd:extendedProperty name='blogger.displayTime' value='3/29/2017 10:02 PM'/></entry><entry><id>tag:blogger.com,1999:blog-4707687462195457004.post-770916495136221966</id><published>2017-04-06T14:23:11.118-07:00</published><updated>2017-04-06T14:23:11.118-07:00</updated><category scheme='http://schemas.google.com/g/2005#kind' term='http://schemas.google.com/blogger/2008/kind#comment'/><title type='text'>Technically no.  You could quite easily create a t...</title><content type='html'>Technically no.  You could quite easily create a terminal module that logged the data locally to a database or persisted to disk.  I would see the non-Azure connected gateway as part of a complex migration story, wherein you may not be able to initially connect your field array to the cloud.</content><link rel='edit' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/4884324456457166601/comments/default/770916495136221966'/><link rel='self' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/4884324456457166601/comments/default/770916495136221966'/><link rel='alternate' type='text/html' href='http://www.lucidmotions.net/2016/09/azure-iot-gateway-sdk-build-problems.html?showComment=1491513791118#c770916495136221966' title=''/><link rel='related' type='application/atom+xml' href='https://www.blogger.com/feeds/4707687462195457004/4884324456457166601/comments/default/4793778539600794067'/><author><name>William Berry</name><uri>https://www.blogger.com/profile/06915500422576509762</uri><email>noreply@blogger.com</email><gd:image rel='http://schemas.google.com/g/2005#thumbnail' width='32' height='32' src='//lh4.googleusercontent.com/-HKBnt-nBcqo/AAAAAAAAAAI/AAAAAAAAAGc/BnywGv-5sX4/s32-c/photo.jpg'/></author><thr:in-reply-to href='http://www.lucidmotions.net/2016/09/azure-iot-gateway-sdk-build-problems.html' ref='tag:blogger.com,1999:blog-4707687462195457004.post-4884324456457166601' source='https://www.blogger.com/feeds/4707687462195457004/posts/default/4884324456457166601' type='text/html'/><gd:extendedProperty name='blogger.itemClass' value='pid-1536219783'/><gd:extendedProperty name='blogger.displayTime' value='4/06/2017 2:23 PM'/></entry></feed>